//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace OpenPrismNode.CardanoWalletApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Sign Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;experimental&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>**⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>This endpoint is experimental and for internal use in the Catalyst project. This
        /// <br/>functionality will be refined in the forthcoming future and the interface is likely
        /// <br/>to change in **NON-BACKWARD COMPATIBLE WAYS**.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only `Soft` indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> SignMetadataAsync(string walletId, Role role, string index, Body body)
        {
            return SignMetadataAsync(walletId, role, index, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sign Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;experimental&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>**⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>This endpoint is experimental and for internal use in the Catalyst project. This
        /// <br/>functionality will be refined in the forthcoming future and the interface is likely
        /// <br/>to change in **NON-BACKWARD COMPATIBLE WAYS**.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only `Soft` indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> SignMetadataAsync(string walletId, Role role, string index, Body body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (role == null)
                throw new System.ArgumentNullException("role");

            if (index == null)
                throw new System.ArgumentNullException("index");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/signatures/{role}/{index}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/signatures/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create / Restore
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create and restore a wallet from a mnemonic sentence or account public key.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> PostWalletAsync(object body)
        {
            return PostWalletAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create / Restore
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create and restore a wallet from a mnemonic sentence or account public key.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> PostWalletAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets"
                    urlBuilder_.Append("wallets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known wallets, ordered from oldest to newest.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> ListWalletsAsync()
        {
            return ListWalletsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known wallets, ordered from oldest to newest.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> ListWalletsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets"
                    urlBuilder_.Append("wallets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// List all assets associated with the wallet, and their metadata
        /// <br/>if known.
        /// <br/>
        /// <br/>An asset is _associated_ with a wallet if, at one point in history,
        /// <br/>it was spendable by the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> ListAssetsAsync(string walletId)
        {
            return ListAssetsAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// List all assets associated with the wallet, and their metadata
        /// <br/>if known.
        /// <br/>
        /// <br/>An asset is _associated_ with a wallet if, at one point in history,
        /// <br/>it was spendable by the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> ListAssetsAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/assets"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous2>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// Fetch a single asset from its `policy_id` and `asset_name`,
        /// <br/>with its metadata if any.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> GetAssetAsync(string walletId, string policyId, string assetName)
        {
            return GetAssetAsync(walletId, policyId, assetName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// Fetch a single asset from its `policy_id` and `asset_name`,
        /// <br/>with its metadata if any.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> GetAssetAsync(string walletId, string policyId, string assetName, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (assetName == null)
                throw new System.ArgumentNullException("assetName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/assets/{policyId}/{assetName}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(assetName, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Asset (empty name)
        /// </summary>
        /// <remarks>
        /// Fetch the asset from `policy_id` with an empty name.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response3> GetAssetDefaultAsync(string walletId, string policyId)
        {
            return GetAssetDefaultAsync(walletId, policyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Asset (empty name)
        /// </summary>
        /// <remarks>
        /// Fetch the asset from `policy_id` with an empty name.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response3> GetAssetDefaultAsync(string walletId, string policyId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/assets/{policyId}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// UTxO Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the UTxO distribution across the whole wallet, in the form of a histogram.
        /// <br/>
        /// <br/>```
        /// <br/>     │
        /// <br/> 100 ─
        /// <br/>     │
        /// <br/>     │                                 ┌───┐
        /// <br/>  10 ─                         ┌───┐   │   │                   ┌───┐
        /// <br/>     │                 ┌───┐   │   │   │   │                   │   │
        /// <br/>     │                 │   │   │   │   │   │   ┌───┐           │   │
        /// <br/>   1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │
        /// <br/>     └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────
        /// <br/>           10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳
        /// <br/>```
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response4> GetUTxOsStatisticsAsync(string walletId)
        {
            return GetUTxOsStatisticsAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// UTxO Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the UTxO distribution across the whole wallet, in the form of a histogram.
        /// <br/>
        /// <br/>```
        /// <br/>     │
        /// <br/> 100 ─
        /// <br/>     │
        /// <br/>     │                                 ┌───┐
        /// <br/>  10 ─                         ┌───┐   │   │                   ┌───┐
        /// <br/>     │                 ┌───┐   │   │   │   │                   │   │
        /// <br/>     │                 │   │   │   │   │   │   ┌───┐           │   │
        /// <br/>   1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │
        /// <br/>     └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────
        /// <br/>           10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳
        /// <br/>```
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response4> GetUTxOsStatisticsAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/statistics/utxos"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/statistics/utxos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// A snapshot of the wallet's UTxO set
        /// </summary>
        /// <remarks>
        /// Generate a snapshot of the wallet's UTxO set.
        /// <br/>
        /// <br/>This endpoint is intended for debugging purposes.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response5> GetWalletUtxoSnapshotAsync(string walletId)
        {
            return GetWalletUtxoSnapshotAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// A snapshot of the wallet's UTxO set
        /// </summary>
        /// <remarks>
        /// Generate a snapshot of the wallet's UTxO set.
        /// <br/>
        /// <br/>This endpoint is intended for debugging purposes.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response5> GetWalletUtxoSnapshotAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/utxo"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/utxo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response6> GetWalletAsync(string walletId)
        {
            return GetWalletAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response6> GetWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteWalletAsync(string walletId)
        {
            return DeleteWalletAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response7> PutWalletAsync(string walletId, Body2 body)
        {
            return PutWalletAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response7> PutWalletAsync(string walletId, Body2 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Passphrase
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PutWalletPassphraseAsync(string walletId, object body)
        {
            return PutWalletPassphraseAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Passphrase
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutWalletPassphraseAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/passphrase"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/passphrase");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Estimate fee for the transaction. The estimate is made by
        /// <br/>assembling multiple transactions and analyzing the
        /// <br/>distribution of their fees. The estimated_max is the highest
        /// <br/>fee observed, and the estimated_min is the fee which is lower
        /// <br/>than at least 90% of the fees observed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response8> PostTransactionFeeAsync(string walletId, object body)
        {
            return PostTransactionFeeAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Estimate fee for the transaction. The estimate is made by
        /// <br/>assembling multiple transactions and analyzing the
        /// <br/>distribution of their fees. The estimated_max is the highest
        /// <br/>fee observed, and the estimated_min is the fee which is lower
        /// <br/>than at least 90% of the fees observed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response8> PostTransactionFeeAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/payment-fees"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payment-fees");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create and send transaction from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response9> PostTransactionAsync(string walletId, object body)
        {
            return PostTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create and send transaction from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response9> PostTransactionAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Lists all incoming and outgoing wallet's transactions.
        /// </remarks>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="order">An optional sort order.</param>
        /// <param name="max_count">An optional maximum count.</param>
        /// <param name="minWithdrawal">Returns only transactions that have at least one withdrawal above the given amount.
        /// <br/>This is particularly useful when set to `1` in order to list the withdrawal history of a wallet.</param>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <param name="address">An optional address.
        /// <br/>If given, the list of transactions will be filtered
        /// <br/>to only contain transactions that refer to this address in their inputs or outputs.
        /// <br/>This may exclude transactions whose inputs reference outside transactions
        /// <br/>that are not part of the transaction history of the wallet.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> ListTransactionsAsync(string walletId, string? start, string? end, Order? order, int? max_count, int? minWithdrawal, bool? simple_metadata, string? address)
        {
            return ListTransactionsAsync(walletId, start, end, order, max_count, minWithdrawal, simple_metadata, address, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Lists all incoming and outgoing wallet's transactions.
        /// </remarks>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="order">An optional sort order.</param>
        /// <param name="max_count">An optional maximum count.</param>
        /// <param name="minWithdrawal">Returns only transactions that have at least one withdrawal above the given amount.
        /// <br/>This is particularly useful when set to `1` in order to list the withdrawal history of a wallet.</param>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <param name="address">An optional address.
        /// <br/>If given, the list of transactions will be filtered
        /// <br/>to only contain transactions that refer to this address in their inputs or outputs.
        /// <br/>This may exclude transactions whose inputs reference outside transactions
        /// <br/>that are not part of the transaction history of the wallet.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous3>> ListTransactionsAsync(string walletId, string? start, string? end, Order? order, int? max_count, int? minWithdrawal, bool? simple_metadata, string? address, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (start != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("start")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (end != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("end")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minWithdrawal != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minWithdrawal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minWithdrawal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (simple_metadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("simple-metadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(simple_metadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (address != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("address")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous3>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Get transaction by id.
        /// </remarks>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response10> GetTransactionAsync(string walletId, string transactionId, bool? simple_metadata)
        {
            return GetTransactionAsync(walletId, transactionId, simple_metadata, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Get transaction by id.
        /// </remarks>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response10> GetTransactionAsync(string walletId, string transactionId, bool? simple_metadata, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions/{transactionId}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (simple_metadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("simple-metadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(simple_metadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Forget pending transaction. Importantly, a transaction, when sent,
        /// <br/>cannot be cancelled. One can only request forgetting about it
        /// <br/>in order to try spending (concurrently) the same UTxO in another
        /// <br/>transaction. But, the transaction may still show up later in a block
        /// <br/>and therefore, appear in the wallet.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteTransactionAsync(string walletId, string transactionId)
        {
            return DeleteTransactionAsync(walletId, transactionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Forget pending transaction. Importantly, a transaction, when sent,
        /// <br/>cannot be cancelled. One can only request forgetting about it
        /// <br/>in order to try spending (concurrently) the same UTxO in another
        /// <br/>transaction. But, the transaction may still show up later in a block
        /// <br/>and therefore, appear in the wallet.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTransactionAsync(string walletId, string transactionId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions/{transactionId}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response11>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Construct
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create a transaction to be signed from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response12> ConstructTransactionAsync(string walletId, Body3 body)
        {
            return ConstructTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Construct
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create a transaction to be signed from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response12> ConstructTransactionAsync(string walletId, Body3 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions-construct"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-construct");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sign
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Signs a serialised transaction either hex-encoded or base64-encoded,
        /// <br/>returning the modified transaction.
        /// <br/>
        /// <br/>This endpoint will add new witnesses using the keys available
        /// <br/>to this wallet. Any existing witnesses will remain in the
        /// <br/>witness set.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SignTransactionAsync(string walletId, Body4 body)
        {
            return SignTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sign
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Signs a serialised transaction either hex-encoded or base64-encoded,
        /// <br/>returning the modified transaction.
        /// <br/>
        /// <br/>This endpoint will add new witnesses using the keys available
        /// <br/>to this wallet. Any existing witnesses will remain in the
        /// <br/>witness set.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SignTransactionAsync(string walletId, Body4 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions-sign"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-sign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Decode
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Decode a serialized transaction, either freshly constructed,
        /// <br/>partially signed or fully-signed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response13> DecodeTransactionAsync(string walletId, Body5 body)
        {
            return DecodeTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Decode
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Decode a serialized transaction, either freshly constructed,
        /// <br/>partially signed or fully-signed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response13> DecodeTransactionAsync(string walletId, Body5 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions-decode"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-decode");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Submit
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Submit a transaction that was already created and signed.
        /// <br/>Fails for foreign transactions that is transactions which lack
        /// <br/>the wallet's inputs and withdrawals.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response14> SubmitTransactionAsync(string walletId, object body)
        {
            return SubmitTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Submit
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Submit a transaction that was already created and signed.
        /// <br/>Fails for foreign transactions that is transactions which lack
        /// <br/>the wallet's inputs and withdrawals.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response14> SubmitTransactionAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions-submit"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-submit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known addresses, ordered from newest to oldest
        /// </remarks>
        /// <param name="state">An optional filter on the address state.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> ListAddressesAsync(string walletId, State? state)
        {
            return ListAddressesAsync(walletId, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known addresses, ordered from newest to oldest
        /// </remarks>
        /// <param name="state">An optional filter on the address state.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> ListAddressesAsync(string walletId, State? state, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/addresses"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/addresses");
                    urlBuilder_.Append('?');
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous4>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Derive an account public key for any account index. For this key derivation to be possible,
        /// <br/>the wallet must have been created from mnemonic.
        /// <br/>
        /// <br/>It is possible to use the optional `purpose` field to override that branch of the derivation path
        /// <br/>with different hardened derivation index. If that field is omitted, the default purpose
        /// <br/>for Cardano wallets (`1852H`) will be used.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only _Hardened_ indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> PostAccountKeyAsync(string walletId, string index, Body6 body)
        {
            return PostAccountKeyAsync(walletId, index, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Derive an account public key for any account index. For this key derivation to be possible,
        /// <br/>the wallet must have been created from mnemonic.
        /// <br/>
        /// <br/>It is possible to use the optional `purpose` field to override that branch of the derivation path
        /// <br/>with different hardened derivation index. If that field is omitted, the default purpose
        /// <br/>for Cardano wallets (`1852H`) will be used.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only _Hardened_ indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> PostAccountKeyAsync(string walletId, string index, Body6 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (index == null)
                throw new System.ArgumentNullException("index");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/keys/{index}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/keys/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Retrieve the account public key of this wallet.
        /// <br/>
        /// <br/>To get an extended public key, instead of the public key,
        /// <br/>use query parameter `format=extended`. For non-extended public key
        /// <br/>use `format=non_extended` or omit query parameter.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetAccountKeyAsync(string walletId)
        {
            return GetAccountKeyAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Retrieve the account public key of this wallet.
        /// <br/>
        /// <br/>To get an extended public key, instead of the public key,
        /// <br/>use query parameter `format=extended`. For non-extended public key
        /// <br/>use `format=non_extended` or omit query parameter.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetAccountKeyAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/keys"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/keys");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Return a public key for a given role and derivation index.
        /// <br/>
        /// <br/>To get a hash of the public key, instead of the public key,
        /// <br/>use query parameter `hash=true`.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only `Soft` indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetWalletKeyAsync(string walletId, Role2 role, string index)
        {
            return GetWalletKeyAsync(walletId, role, index, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Return a public key for a given role and derivation index.
        /// <br/>
        /// <br/>To get a hash of the public key, instead of the public key,
        /// <br/>use query parameter `hash=true`.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only `Soft` indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetWalletKeyAsync(string walletId, Role2 role, string index, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (role == null)
                throw new System.ArgumentNullException("role");

            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/keys/{role}/{index}"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/keys/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Policy Id
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create policy id for the wallet and a given mint/burn script.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response15> PostPolicyIdAsync(string walletId, Body7 body)
        {
            return PostPolicyIdAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Policy Id
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create policy id for the wallet and a given mint/burn script.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response15> PostPolicyIdAsync(string walletId, Body7 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/policy-id"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/policy-id");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Policy Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create policy key for the wallet.
        /// <br/>
        /// <br/>In order to be able to mint/burn assets with `POST Construct` endpoint there needs to be
        /// <br/>a policy key set for the wallet. Invoking this endpoint would be required for all wallets instantiated
        /// <br/>before introducing mint/burn feature prior to making a mint/burn transaction from them.
        /// <br/>
        /// <br/>To get a hash of the policy key instead of the policy key,
        /// <br/>use query parameter `hash=true`.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> PostPolicyKeyAsync(string walletId, Body8 body)
        {
            return PostPolicyKeyAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Policy Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create policy key for the wallet.
        /// <br/>
        /// <br/>In order to be able to mint/burn assets with `POST Construct` endpoint there needs to be
        /// <br/>a policy key set for the wallet. Invoking this endpoint would be required for all wallets instantiated
        /// <br/>before introducing mint/burn feature prior to making a mint/burn transaction from them.
        /// <br/>
        /// <br/>To get a hash of the policy key instead of the policy key,
        /// <br/>use query parameter `hash=true`.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> PostPolicyKeyAsync(string walletId, Body8 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/policy-key"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/policy-key");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Policy Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Return a policy key for a derivation index = 0.
        /// <br/>
        /// <br/>To get a hash of the policy key instead of the policy key,
        /// <br/>use query parameter `hash=true`.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetPolicyKeyAsync(string walletId)
        {
            return GetPolicyKeyAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Policy Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Return a policy key for a derivation index = 0.
        /// <br/>
        /// <br/>To get a hash of the policy key instead of the policy key,
        /// <br/>use query parameter `hash=true`.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetPolicyKeyAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/policy-key"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/policy-key");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Stake Keys
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;Experimental&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>List stake-keys relevant to the wallet, and how much ada is associated with each.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response16> ListStakeKeysAsync(string walletId)
        {
            return ListStakeKeysAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Stake Keys
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;Experimental&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>List stake-keys relevant to the wallet, and how much ada is associated with each.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response16> ListStakeKeysAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/stake-keys"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/stake-keys");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>List all known stake pools ordered by descending `non_myopic_member_rewards`.
        /// <br/>The `non_myopic_member_rewards` — and thus the ordering — depends on the `?stake` query
        /// <br/>parameter.
        /// <br/>
        /// <br/>Some pools _may_ also have metadata attached to them.
        /// </remarks>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> ListStakePoolsAsync(long stake)
        {
            return ListStakePoolsAsync(stake, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>List all known stake pools ordered by descending `non_myopic_member_rewards`.
        /// <br/>The `non_myopic_member_rewards` — and thus the ordering — depends on the `?stake` query
        /// <br/>parameter.
        /// <br/>
        /// <br/>Some pools _may_ also have metadata attached to them.
        /// </remarks>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> ListStakePoolsAsync(long stake, System.Threading.CancellationToken cancellationToken)
        {
            if (stake == null)
                throw new System.ArgumentNullException("stake");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stake-pools"
                    urlBuilder_.Append("stake-pools");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("stake")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(stake, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response17>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous5>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// View Maintenance Actions
        /// </summary>
        /// <remarks>
        /// Returns the current status of the stake pools maintenance actions.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetMaintenanceActionsAsync()
        {
            return GetMaintenanceActionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// View Maintenance Actions
        /// </summary>
        /// <remarks>
        /// Returns the current status of the stake pools maintenance actions.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetMaintenanceActionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stake-pools/maintenance-actions"
                    urlBuilder_.Append("stake-pools/maintenance-actions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Trigger Maintenance Actions
        /// </summary>
        /// <remarks>
        /// Performs maintenance actions on stake pools, such
        /// <br/>as triggering metadata garbage collection.
        /// <br/>
        /// <br/>Actions may not be instantaneous.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PostMaintenanceActionAsync(Body9 body)
        {
            return PostMaintenanceActionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Trigger Maintenance Actions
        /// </summary>
        /// <remarks>
        /// Performs maintenance actions on stake pools, such
        /// <br/>as triggering metadata garbage collection.
        /// <br/>
        /// <br/>Actions may not be instantaneous.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PostMaintenanceActionAsync(Body9 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stake-pools/maintenance-actions"
                    urlBuilder_.Append("stake-pools/maintenance-actions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Estimate fee for joining or leaving a stake pool. Note that it is an
        /// <br/>estimation because a delegation induces a transaction for which coins
        /// <br/>have to be selected randomly within the wallet. Because of this randomness,
        /// <br/>fees can only be estimated.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response18> GetDelegationFeeAsync(string walletId)
        {
            return GetDelegationFeeAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Estimate fee for joining or leaving a stake pool. Note that it is an
        /// <br/>estimation because a delegation induces a transaction for which coins
        /// <br/>have to be selected randomly within the wallet. Because of this randomness,
        /// <br/>fees can only be estimated.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response18> GetDelegationFeeAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/delegation-fees"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/delegation-fees");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response19>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Quit
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Stop delegating completely. The wallet's stake will become inactive.
        /// <br/>
        /// <br/>Any current rewards will automatically withdrawn.
        /// <br/>
        /// <br/>&gt; ⚠️  Disclaimer ⚠️
        /// <br/>&gt;
        /// <br/>&gt; This endpoint historically use to take a stake pool id as a path parameter.
        /// <br/>&gt; However, retiring from delegation is ubiquitous and not tied to a particular
        /// <br/>&gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path
        /// <br/>&gt; parameter will still be accepted by the server but new integrations are
        /// <br/>&gt; encouraged to provide a placeholder asterisk `*` instead.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response20> QuitStakePoolAsync(string walletId, Body10 body)
        {
            return QuitStakePoolAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Quit
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Stop delegating completely. The wallet's stake will become inactive.
        /// <br/>
        /// <br/>Any current rewards will automatically withdrawn.
        /// <br/>
        /// <br/>&gt; ⚠️  Disclaimer ⚠️
        /// <br/>&gt;
        /// <br/>&gt; This endpoint historically use to take a stake pool id as a path parameter.
        /// <br/>&gt; However, retiring from delegation is ubiquitous and not tied to a particular
        /// <br/>&gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path
        /// <br/>&gt; parameter will still be accepted by the server but new integrations are
        /// <br/>&gt; encouraged to provide a placeholder asterisk `*` instead.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response20> QuitStakePoolAsync(string walletId, Body10 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stake-pools/*/wallets/{walletId}"
                    urlBuilder_.Append("stake-pools/*/wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Delegate all (current and future) addresses from the given wallet to the given stake pool.
        /// <br/>
        /// <br/>&lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response21> JoinStakePoolAsync(string stakePoolId, string walletId, Body11 body)
        {
            return JoinStakePoolAsync(stakePoolId, walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Delegate all (current and future) addresses from the given wallet to the given stake pool.
        /// <br/>
        /// <br/>&lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response21> JoinStakePoolAsync(string stakePoolId, string walletId, Body11 body, System.Threading.CancellationToken cancellationToken)
        {
            if (stakePoolId == null)
                throw new System.ArgumentNullException("stakePoolId");

            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stake-pools/{stakePoolId}/wallets/{walletId}"
                    urlBuilder_.Append("stake-pools/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(stakePoolId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Delegate all votes from the given wallet to the given DRep or
        /// <br/>case abstain or no-confidence
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response22> JoinDRepAsync(DrepId drepId, string walletId, Body12 body)
        {
            return JoinDRepAsync(drepId, walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Delegate all votes from the given wallet to the given DRep or
        /// <br/>case abstain or no-confidence
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response22> JoinDRepAsync(DrepId drepId, string walletId, Body12 body, System.Threading.CancellationToken cancellationToken)
        {
            if (drepId == null)
                throw new System.ArgumentNullException("drepId");

            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "dreps/{drepId}/wallets/{walletId}"
                    urlBuilder_.Append("dreps/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(drepId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Random
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Select coins to cover the given set of payments.
        /// <br/>
        /// <br/>Uses the &lt;a href="https://iohk.io/blog/self-organisation-in-coin-selection/"&gt;
        /// <br/>Random-Improve coin selection algorithm&lt;/a&gt;.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response23> SelectCoinsAsync(string walletId, object body)
        {
            return SelectCoinsAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Random
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Select coins to cover the given set of payments.
        /// <br/>
        /// <br/>Uses the &lt;a href="https://iohk.io/blog/self-organisation-in-coin-selection/"&gt;
        /// <br/>Random-Improve coin selection algorithm&lt;/a&gt;.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response23> SelectCoinsAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/coin-selections/random"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/coin-selections/random");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// Migrate the UTxO balance of this wallet to the given set of addresses.
        /// <br/>
        /// <br/>This operation will attempt to transfer as much of the wallet's balance
        /// <br/>as possible to the given set of addresses, by creating and submitting
        /// <br/>as many transactions as may be necessary to migrate the entire balance.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>transactions. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>This operation is performed on a best-effort basis. If there is
        /// <br/>insufficient ada available to pay for the entire UTxO set to be
        /// <br/>migrated, then only a subset of the wallet's UTxO set will be migrated.
        /// <br/>
        /// <br/>A typical use of this operation would be to move all funds from an old
        /// <br/>wallet to a new wallet, by providing addresses that belong to the new
        /// <br/>wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> MigrateShelleyWalletAsync(object? walletId, Body13 body)
        {
            return MigrateShelleyWalletAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// Migrate the UTxO balance of this wallet to the given set of addresses.
        /// <br/>
        /// <br/>This operation will attempt to transfer as much of the wallet's balance
        /// <br/>as possible to the given set of addresses, by creating and submitting
        /// <br/>as many transactions as may be necessary to migrate the entire balance.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>transactions. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>This operation is performed on a best-effort basis. If there is
        /// <br/>insufficient ada available to pay for the entire UTxO set to be
        /// <br/>migrated, then only a subset of the wallet's UTxO set will be migrated.
        /// <br/>
        /// <br/>A typical use of this operation would be to move all funds from an old
        /// <br/>wallet to a new wallet, by providing addresses that belong to the new
        /// <br/>wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> MigrateShelleyWalletAsync(object? walletId, Body13 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/migrations"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append("/migrations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous6>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a migration plan
        /// </summary>
        /// <remarks>
        /// Generate a plan for migrating the UTxO balance of this wallet to
        /// <br/>another wallet, without executing the plan.
        /// <br/>
        /// <br/>This operation generates a plan that transfers as much of the wallet's
        /// <br/>balance as possible, by creating as many selections as may be necessary
        /// <br/>to migrate the entire balance.  Each selection created is the basis for
        /// <br/>a transaction.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>selections. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>The plan is generated on a best-effort basis. If there is insufficient
        /// <br/>ada available to pay for the entire UTxO set to be migrated, then only
        /// <br/>a subset of the wallet's UTxO set will be included in the resultant
        /// <br/>plan.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response24> CreateShelleyWalletMigrationPlanAsync(object? walletId, Body14 body)
        {
            return CreateShelleyWalletMigrationPlanAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a migration plan
        /// </summary>
        /// <remarks>
        /// Generate a plan for migrating the UTxO balance of this wallet to
        /// <br/>another wallet, without executing the plan.
        /// <br/>
        /// <br/>This operation generates a plan that transfers as much of the wallet's
        /// <br/>balance as possible, by creating as many selections as may be necessary
        /// <br/>to migrate the entire balance.  Each selection created is the basis for
        /// <br/>a transaction.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>selections. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>The plan is generated on a best-effort basis. If there is insufficient
        /// <br/>ada available to pay for the entire UTxO set to be migrated, then only
        /// <br/>a subset of the wallet's UTxO set will be included in the resultant
        /// <br/>plan.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response24> CreateShelleyWalletMigrationPlanAsync(object? walletId, Body14 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/migrations/plan"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append("/migrations/plan");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response25>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Balance
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;under development&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Balance a transaction body of a given transaction, add needed inputs/outputs,
        /// <br/>so as the transaction can be signed from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response26> BalanceTransactionAsync(string walletId, Body15 body)
        {
            return BalanceTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Balance
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;under development&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Balance a transaction body of a given transaction, add needed inputs/outputs,
        /// <br/>so as the transaction can be signed from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response26> BalanceTransactionAsync(string walletId, Body15 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "wallets/{walletId}/transactions-balance"
                    urlBuilder_.Append("wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-balance");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Restore
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Restore a Byron wallet from a mnemonic sentence or encrypted root private key (deprecated).
        /// <br/>
        /// <br/>  **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>  The construction of random wallet in itself is **deprecated**, in particular the restoration from an encrypted root private key.
        /// <br/>  These endpoints exist to ease migrations from legacy software such as `cardano-sl` but should be avoided by new applications.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response27> PostByronWalletAsync(object body)
        {
            return PostByronWalletAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Restore a Byron wallet from a mnemonic sentence or encrypted root private key (deprecated).
        /// <br/>
        /// <br/>  **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>  The construction of random wallet in itself is **deprecated**, in particular the restoration from an encrypted root private key.
        /// <br/>  These endpoints exist to ease migrations from legacy software such as `cardano-sl` but should be avoided by new applications.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response27> PostByronWalletAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets"
                    urlBuilder_.Append("byron-wallets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known Byron wallets, ordered from oldest to newest.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> ListByronWalletsAsync()
        {
            return ListByronWalletsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known Byron wallets, ordered from oldest to newest.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> ListByronWalletsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets"
                    urlBuilder_.Append("byron-wallets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous7>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// List all assets associated with the wallet, and their metadata
        /// <br/>if known.
        /// <br/>
        /// <br/>An asset is _associated_ with a wallet if it is involved in a
        /// <br/>transaction of the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> ListByronAssetsAsync(string walletId)
        {
            return ListByronAssetsAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Assets
        /// </summary>
        /// <remarks>
        /// List all assets associated with the wallet, and their metadata
        /// <br/>if known.
        /// <br/>
        /// <br/>An asset is _associated_ with a wallet if it is involved in a
        /// <br/>transaction of the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> ListByronAssetsAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/assets"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous8>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// Fetch a single asset from its `policy_id` and `asset_name`,
        /// <br/>with its metadata if any.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response28> GetByronAssetAsync(string walletId, string policyId, string assetName)
        {
            return GetByronAssetAsync(walletId, policyId, assetName, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Asset
        /// </summary>
        /// <remarks>
        /// Fetch a single asset from its `policy_id` and `asset_name`,
        /// <br/>with its metadata if any.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response28> GetByronAssetAsync(string walletId, string policyId, string assetName, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            if (assetName == null)
                throw new System.ArgumentNullException("assetName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/assets/{policyId}/{assetName}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(assetName, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Asset (empty name)
        /// </summary>
        /// <remarks>
        /// Fetch the asset from `policy_id` with an empty name.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response29> GetByronAssetDefaultAsync(string walletId, string policyId)
        {
            return GetByronAssetDefaultAsync(walletId, policyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Asset (empty name)
        /// </summary>
        /// <remarks>
        /// Fetch the asset from `policy_id` with an empty name.
        /// <br/>
        /// <br/>The asset must be associated with the wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response29> GetByronAssetDefaultAsync(string walletId, string policyId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (policyId == null)
                throw new System.ArgumentNullException("policyId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/assets/{policyId}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(policyId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// UTxO Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the UTxO distribution across the whole wallet, in the form of a histogram.
        /// <br/>
        /// <br/>```
        /// <br/>     │
        /// <br/> 100 ─
        /// <br/>     │
        /// <br/>     │                                 ┌───┐
        /// <br/>  10 ─                         ┌───┐   │   │                   ┌───┐
        /// <br/>     │                 ┌───┐   │   │   │   │                   │   │
        /// <br/>     │                 │   │   │   │   │   │   ┌───┐           │   │
        /// <br/>   1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │
        /// <br/>     └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────
        /// <br/>           10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳
        /// <br/>```
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response30> GetByronUTxOsStatisticsAsync(string walletId)
        {
            return GetByronUTxOsStatisticsAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// UTxO Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the UTxO distribution across the whole wallet, in the form of a histogram.
        /// <br/>
        /// <br/>```
        /// <br/>     │
        /// <br/> 100 ─
        /// <br/>     │
        /// <br/>     │                                 ┌───┐
        /// <br/>  10 ─                         ┌───┐   │   │                   ┌───┐
        /// <br/>     │                 ┌───┐   │   │   │   │                   │   │
        /// <br/>     │                 │   │   │   │   │   │   ┌───┐           │   │
        /// <br/>   1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │
        /// <br/>     └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────
        /// <br/>           10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳
        /// <br/>```
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response30> GetByronUTxOsStatisticsAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/statistics/utxos"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/statistics/utxos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// A snapshot of the wallet's UTxO set
        /// </summary>
        /// <remarks>
        /// Generate a snapshot of the wallet's UTxO set.
        /// <br/>
        /// <br/>This endpoint is intended for debugging purposes.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response31> GetByronWalletUtxoSnapshotAsync(string walletId)
        {
            return GetByronWalletUtxoSnapshotAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// A snapshot of the wallet's UTxO set
        /// </summary>
        /// <remarks>
        /// Generate a snapshot of the wallet's UTxO set.
        /// <br/>
        /// <br/>This endpoint is intended for debugging purposes.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response31> GetByronWalletUtxoSnapshotAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/utxo"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/utxo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return information about a Byron wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response32> GetByronWalletAsync(string walletId)
        {
            return GetByronWalletAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return information about a Byron wallet.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response32> GetByronWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Delete a Byron wallet.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteByronWalletAsync(string walletId)
        {
            return DeleteByronWalletAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Delete a Byron wallet.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteByronWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response33> PutByronWalletAsync(string walletId, Body16 body)
        {
            return PutByronWalletAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response33> PutByronWalletAsync(string walletId, Body16 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Passphrase
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PutByronWalletPassphraseAsync(string walletId, Body17 body)
        {
            return PutByronWalletPassphraseAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Passphrase
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutByronWalletPassphraseAsync(string walletId, Body17 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/passphrase"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/passphrase");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>⚠️  This endpoint is available for `random` wallets only. Any
        /// <br/>attempt to call this endpoint on another type of wallet will result in
        /// <br/>a `403 Forbidden` error from the server.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response34> CreateAddressAsync(string walletId, Body18 body)
        {
            return CreateAddressAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>⚠️  This endpoint is available for `random` wallets only. Any
        /// <br/>attempt to call this endpoint on another type of wallet will result in
        /// <br/>a `403 Forbidden` error from the server.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response34> CreateAddressAsync(string walletId, Body18 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/addresses"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/addresses");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known addresses, ordered from newest to oldest for sequential wallets.
        /// <br/>Arbitrarily ordered for random wallets.
        /// </remarks>
        /// <param name="state">An optional filter on the address state.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> ListByronAddressesAsync(string walletId, State2? state)
        {
            return ListByronAddressesAsync(walletId, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known addresses, ordered from newest to oldest for sequential wallets.
        /// <br/>Arbitrarily ordered for random wallets.
        /// </remarks>
        /// <param name="state">An optional filter on the address state.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous9>> ListByronAddressesAsync(string walletId, State2? state, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/addresses"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/addresses");
                    urlBuilder_.Append('?');
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous9>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import Addresses
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>⚠️  This endpoint is available for `random` wallets only. Any
        /// <br/>attempt to call this endpoint on another type of wallet will result in
        /// <br/>a `403 Forbidden` error from the server.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ImportAddressesAsync(string walletId, Body19 body)
        {
            return ImportAddressesAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import Addresses
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>⚠️  This endpoint is available for `random` wallets only. Any
        /// <br/>attempt to call this endpoint on another type of wallet will result in
        /// <br/>a `403 Forbidden` error from the server.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ImportAddressesAsync(string walletId, Body19 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/addresses"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/addresses");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>⚠️  This endpoint is available for `random` wallets only. Any
        /// <br/>attempt to call this endpoint on another type of wallet will result in
        /// <br/>a `403 Forbidden` error from the server.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ImportAddressAsync(string walletId, string addressId)
        {
            return ImportAddressAsync(walletId, addressId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>⚠️  This endpoint is available for `random` wallets only. Any
        /// <br/>attempt to call this endpoint on another type of wallet will result in
        /// <br/>a `403 Forbidden` error from the server.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ImportAddressAsync(string walletId, string addressId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (addressId == null)
                throw new System.ArgumentNullException("addressId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/addresses/{addressId}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/addresses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(addressId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Estimate fee for the transaction.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response35> PostByronTransactionFeeAsync(string walletId, Body20 body)
        {
            return PostByronTransactionFeeAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Estimate fee for the transaction.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response35> PostByronTransactionFeeAsync(string walletId, Body20 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/payment-fees"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payment-fees");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response35>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create and send transaction from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response36> PostByronTransactionAsync(string walletId, Body21 body)
        {
            return PostByronTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create and send transaction from the wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response36> PostByronTransactionAsync(string walletId, Body21 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/transactions"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response36>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>List all incoming and outgoing transactions for the given wallet.
        /// </remarks>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="order">An optional sort order.</param>
        /// <param name="max_count">An optional maximum count.</param>
        /// <param name="address">An optional address.
        /// <br/>If given, the list of transactions will be filtered
        /// <br/>to only contain transactions that refer to this address in their inputs or outputs.
        /// <br/>This may exclude transactions whose inputs reference outside transactions
        /// <br/>that are not part of the transaction history of the wallet.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> ListByronTransactionsAsync(string walletId, string? start, string? end, Order2? order, int? max_count, string? address)
        {
            return ListByronTransactionsAsync(walletId, start, end, order, max_count, address, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>List all incoming and outgoing transactions for the given wallet.
        /// </remarks>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="order">An optional sort order.</param>
        /// <param name="max_count">An optional maximum count.</param>
        /// <param name="address">An optional address.
        /// <br/>If given, the list of transactions will be filtered
        /// <br/>to only contain transactions that refer to this address in their inputs or outputs.
        /// <br/>This may exclude transactions whose inputs reference outside transactions
        /// <br/>that are not part of the transaction history of the wallet.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous10>> ListByronTransactionsAsync(string walletId, string? start, string? end, Order2? order, int? max_count, string? address, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/transactions"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (start != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("start")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (end != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("end")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (address != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("address")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous10>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Get transaction by id.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response37> GetByronTransactionAsync(string walletId, string transactionId)
        {
            return GetByronTransactionAsync(walletId, transactionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Get transaction by id.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response37> GetByronTransactionAsync(string walletId, string transactionId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/transactions/{transactionId}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response37>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Forget pending Byron transaction. Importantly, a transaction, when sent,
        /// <br/>cannot be cancelled. One can only request forgetting about it
        /// <br/>in order to try spending (concurrently) the same UTxO in another
        /// <br/>transaction. But, the transaction may still show up later in a block
        /// <br/>and therefore, appear in the wallet.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteByronTransactionAsync(string walletId, string transactionId)
        {
            return DeleteByronTransactionAsync(walletId, transactionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Forget pending Byron transaction. Importantly, a transaction, when sent,
        /// <br/>cannot be cancelled. One can only request forgetting about it
        /// <br/>in order to try spending (concurrently) the same UTxO in another
        /// <br/>transaction. But, the transaction may still show up later in a block
        /// <br/>and therefore, appear in the wallet.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteByronTransactionAsync(string walletId, string transactionId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/transactions/{transactionId}"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response38>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response38>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Random
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Select coins to cover the given set of payments.
        /// <br/>
        /// <br/>Uses the &lt;a href="https://iohk.io/blog/self-organisation-in-coin-selection/"&gt;
        /// <br/>Random-Improve coin selection algorithm&lt;/a&gt;.
        /// <br/>
        /// <br/>&lt;b&gt;Note: &lt;/b&gt; Not supported for Byron random wallets.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response39> ByronSelectCoinsAsync(string walletId, Body22 body)
        {
            return ByronSelectCoinsAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Random
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Select coins to cover the given set of payments.
        /// <br/>
        /// <br/>Uses the &lt;a href="https://iohk.io/blog/self-organisation-in-coin-selection/"&gt;
        /// <br/>Random-Improve coin selection algorithm&lt;/a&gt;.
        /// <br/>
        /// <br/>&lt;b&gt;Note: &lt;/b&gt; Not supported for Byron random wallets.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response39> ByronSelectCoinsAsync(string walletId, Body22 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/coin-selections/random"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/coin-selections/random");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response39>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// Migrate the UTxO balance of this wallet to the given set of addresses.
        /// <br/>
        /// <br/>This operation will attempt to transfer as much of the wallet's balance
        /// <br/>as possible to the given set of addresses, by creating and submitting
        /// <br/>as many transactions as may be necessary to migrate the entire balance.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>transactions. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>This operation is performed on a best-effort basis. If there is
        /// <br/>insufficient ada available to pay for the entire UTxO set to be
        /// <br/>migrated, then only a subset of the wallet's UTxO set will be migrated.
        /// <br/>
        /// <br/>A typical use of this operation would be to move all funds from an old
        /// <br/>wallet to a new wallet, by providing addresses that belong to the new
        /// <br/>wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> MigrateByronWalletAsync(object? walletId, Body23 body)
        {
            return MigrateByronWalletAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// Migrate the UTxO balance of this wallet to the given set of addresses.
        /// <br/>
        /// <br/>This operation will attempt to transfer as much of the wallet's balance
        /// <br/>as possible to the given set of addresses, by creating and submitting
        /// <br/>as many transactions as may be necessary to migrate the entire balance.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>transactions. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>This operation is performed on a best-effort basis. If there is
        /// <br/>insufficient ada available to pay for the entire UTxO set to be
        /// <br/>migrated, then only a subset of the wallet's UTxO set will be migrated.
        /// <br/>
        /// <br/>A typical use of this operation would be to move all funds from an old
        /// <br/>wallet to a new wallet, by providing addresses that belong to the new
        /// <br/>wallet.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> MigrateByronWalletAsync(object? walletId, Body23 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/migrations"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append("/migrations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous11>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a migration plan
        /// </summary>
        /// <remarks>
        /// Generate a plan for migrating the UTxO balance of this wallet to
        /// <br/>another wallet, without executing the plan.
        /// <br/>
        /// <br/>This operation generates a plan that transfers as much of the wallet's
        /// <br/>balance as possible, by creating as many selections as may be necessary
        /// <br/>to migrate the entire balance.  Each selection created is the basis for
        /// <br/>a transaction.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>selections. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>The plan is generated on a best-effort basis. If there is insufficient
        /// <br/>ada available to pay for the entire UTxO set to be migrated, then only
        /// <br/>a subset of the wallet's UTxO set will be included in the resultant
        /// <br/>plan.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response40> CreateByronWalletMigrationPlanAsync(object? walletId, Body24 body)
        {
            return CreateByronWalletMigrationPlanAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a migration plan
        /// </summary>
        /// <remarks>
        /// Generate a plan for migrating the UTxO balance of this wallet to
        /// <br/>another wallet, without executing the plan.
        /// <br/>
        /// <br/>This operation generates a plan that transfers as much of the wallet's
        /// <br/>balance as possible, by creating as many selections as may be necessary
        /// <br/>to migrate the entire balance.  Each selection created is the basis for
        /// <br/>a transaction.
        /// <br/>
        /// <br/>In order to minimize the total transaction fee required, UTxO entries
        /// <br/>are coalesced together to the greatest extent possible in the resulting
        /// <br/>selections. No attempt is made to preserve the wallet's UTxO
        /// <br/>distribution.
        /// <br/>
        /// <br/>The plan is generated on a best-effort basis. If there is insufficient
        /// <br/>ada available to pay for the entire UTxO set to be migrated, then only
        /// <br/>a subset of the wallet's UTxO set will be included in the resultant
        /// <br/>plan.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response40> CreateByronWalletMigrationPlanAsync(object? walletId, Body24 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "byron-wallets/{walletId}/migrations/plan"
                    urlBuilder_.Append("byron-wallets/");
                    urlBuilder_.Append("/migrations/plan");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response41>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Response41>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response40>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Information
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response42> GetNetworkInformationAsync()
        {
            return GetNetworkInformationAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Information
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response42> GetNetworkInformationAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "network/information"
                    urlBuilder_.Append("network/information");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response42>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Clock
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetNetworkClockAsync(object? forceNtpCheck)
        {
            return GetNetworkClockAsync(forceNtpCheck, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clock
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetNetworkClockAsync(object? forceNtpCheck, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "network/clock"
                    urlBuilder_.Append("network/clock");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Parameters
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Returns the set of network parameters for the current epoch.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response43> GetNetworkParametersAsync()
        {
            return GetNetworkParametersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Parameters
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Returns the set of network parameters for the current epoch.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response43> GetNetworkParametersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "network/parameters"
                    urlBuilder_.Append("network/parameters");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response43>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Submit External Transaction
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Submits a transaction that was created and signed outside of cardano-wallet.
        /// <br/>
        /// <br/>NOTE: Unlike the `submitTransaction` endpoint, there are no
        /// <br/>guarantees that a transaction accepted by this endpoint will
        /// <br/>actually be included in the chain. It's up to the caller to
        /// <br/>retry submission until the transaction is confirmed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response44> PostExternalTransactionAsync(System.IO.Stream body)
        {
            return PostExternalTransactionAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Submit External Transaction
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Submits a transaction that was created and signed outside of cardano-wallet.
        /// <br/>
        /// <br/>NOTE: Unlike the `submitTransaction` endpoint, there are no
        /// <br/>guarantees that a transaction accepted by this endpoint will
        /// <br/>actually be included in the chain. It's up to the caller to
        /// <br/>retry submission until the transaction is confirmed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response44> PostExternalTransactionAsync(System.IO.Stream body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StreamContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/octet-stream");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "proxy/transactions"
                    urlBuilder_.Append("proxy/transactions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response44>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Inspect Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Give useful information about the structure of a given address.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response45> InspectAddressAsync(string addressId)
        {
            return InspectAddressAsync(addressId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Inspect Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Give useful information about the structure of a given address.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response45> InspectAddressAsync(string addressId, System.Threading.CancellationToken cancellationToken)
        {
            if (addressId == null)
                throw new System.ArgumentNullException("addressId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "addresses/{addressId}"
                    urlBuilder_.Append("addresses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(addressId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response45>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Construct Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Construct any address by specyfying credential for payment or delegation.
        /// <br/>
        /// <br/>In Cardano, Addresses are made of three parts:
        /// <br/>
        /// <br/>```
        /// <br/>*---------*---------*-----------*
        /// <br/>| NETWORK | PAYMENT | DELEGATION |
        /// <br/>*---------*---------*-----------*
        /// <br/>```
        /// <br/>
        /// <br/>The `NETWORK` part allows for distinguishing addresses between different networks like the mainnet or the testnet. It is implicitly
        /// <br/>handled by the server without you having to worry about it. The `PAYMENT` and `DELEGATION` parts however can be constructed similarly, using
        /// <br/>either:
        /// <br/>
        /// <br/>- A public key
        /// <br/>- A script
        /// <br/>
        /// <br/>The script itself is either constructed out of a public key, one of two timelocks, or one of the three following primitives:
        /// <br/>
        /// <br/>- all
        /// <br/>- any
        /// <br/>- some
        /// <br/>
        /// <br/>The timelock can determine validity as respect to the slot. `active_from slot` means the script is valid from the specified slot
        /// <br/>and onward. `active_until slot` means the script is valid until (not included) the specified slot.
        /// <br/>
        /// <br/>Each of which contains one or more script(s) that can be either keys or primitives, and so on. Schematically:
        /// <br/>
        /// <br/>```
        /// <br/>                                   ┏─────────┓
        /// <br/>SCRIPT = ──┬───────────────────────┤ pub key ├─────────────────────┬──
        /// <br/>           │                       ┗─────────┛                     │
        /// <br/>           │                       ┏──────────────────┓            │
        /// <br/>           ├───────────────────────┤ ACTIVE_FROM slot ├──── ───────┤
        /// <br/>           │                       ┗──────────────────┛            │
        /// <br/>           │                       ┏───────────────────┓           │
        /// <br/>           ├───────────────────────┤ ACTIVE_UNTIL slot ├───────────┤
        /// <br/>           │                       ┗───────────────────┛           │
        /// <br/>           │                                                       │
        /// <br/>           │  ╭─────╮   ╭────────╮                                 │
        /// <br/>           ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤
        /// <br/>           │  ╰─────╯ ^ ╰────────╯ │                               │
        /// <br/>           │          │   ╭───╮    │                               │
        /// <br/>           │          └───┤ , ├────┘                               │
        /// <br/>           │              ╰───╯                                    │
        /// <br/>           │  ╭─────╮   ╭────────╮                                 │
        /// <br/>           ├──┤ ANY ├───┤ SCRIPT ├─┬───────────────────────────────┤
        /// <br/>           │  ╰─────╯ ^ ╰────────╯ │                               │
        /// <br/>           │          │   ╭───╮    │                               │
        /// <br/>           │          └───┤ , ├────┘                               │
        /// <br/>           │              ╰───╯                                    │
        /// <br/>           │  ╭──────╮ ╭──────────╮ ┏───┓ ╭──────╮   ╭────────╮    │
        /// <br/>           └──┤ SOME ├─┤ AT_LEAST ├─┤ n ├─┤ FROM ├───┤ SCRIPT ├─┬──┘
        /// <br/>              ╰──────╯ ╰──────────╯ ┗───┛ ╰──────╯ ^ ╰────────╯ │
        /// <br/>                                                   │   ╭───╮    │
        /// <br/>                                                   └───┤ , ├────┘
        /// <br/>                                                       ╰───╯
        /// <br/>```
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response46> PostAnyAddressAsync(Body25? body)
        {
            return PostAnyAddressAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Construct Address
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Construct any address by specyfying credential for payment or delegation.
        /// <br/>
        /// <br/>In Cardano, Addresses are made of three parts:
        /// <br/>
        /// <br/>```
        /// <br/>*---------*---------*-----------*
        /// <br/>| NETWORK | PAYMENT | DELEGATION |
        /// <br/>*---------*---------*-----------*
        /// <br/>```
        /// <br/>
        /// <br/>The `NETWORK` part allows for distinguishing addresses between different networks like the mainnet or the testnet. It is implicitly
        /// <br/>handled by the server without you having to worry about it. The `PAYMENT` and `DELEGATION` parts however can be constructed similarly, using
        /// <br/>either:
        /// <br/>
        /// <br/>- A public key
        /// <br/>- A script
        /// <br/>
        /// <br/>The script itself is either constructed out of a public key, one of two timelocks, or one of the three following primitives:
        /// <br/>
        /// <br/>- all
        /// <br/>- any
        /// <br/>- some
        /// <br/>
        /// <br/>The timelock can determine validity as respect to the slot. `active_from slot` means the script is valid from the specified slot
        /// <br/>and onward. `active_until slot` means the script is valid until (not included) the specified slot.
        /// <br/>
        /// <br/>Each of which contains one or more script(s) that can be either keys or primitives, and so on. Schematically:
        /// <br/>
        /// <br/>```
        /// <br/>                                   ┏─────────┓
        /// <br/>SCRIPT = ──┬───────────────────────┤ pub key ├─────────────────────┬──
        /// <br/>           │                       ┗─────────┛                     │
        /// <br/>           │                       ┏──────────────────┓            │
        /// <br/>           ├───────────────────────┤ ACTIVE_FROM slot ├──── ───────┤
        /// <br/>           │                       ┗──────────────────┛            │
        /// <br/>           │                       ┏───────────────────┓           │
        /// <br/>           ├───────────────────────┤ ACTIVE_UNTIL slot ├───────────┤
        /// <br/>           │                       ┗───────────────────┛           │
        /// <br/>           │                                                       │
        /// <br/>           │  ╭─────╮   ╭────────╮                                 │
        /// <br/>           ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤
        /// <br/>           │  ╰─────╯ ^ ╰────────╯ │                               │
        /// <br/>           │          │   ╭───╮    │                               │
        /// <br/>           │          └───┤ , ├────┘                               │
        /// <br/>           │              ╰───╯                                    │
        /// <br/>           │  ╭─────╮   ╭────────╮                                 │
        /// <br/>           ├──┤ ANY ├───┤ SCRIPT ├─┬───────────────────────────────┤
        /// <br/>           │  ╰─────╯ ^ ╰────────╯ │                               │
        /// <br/>           │          │   ╭───╮    │                               │
        /// <br/>           │          └───┤ , ├────┘                               │
        /// <br/>           │              ╰───╯                                    │
        /// <br/>           │  ╭──────╮ ╭──────────╮ ┏───┓ ╭──────╮   ╭────────╮    │
        /// <br/>           └──┤ SOME ├─┤ AT_LEAST ├─┤ n ├─┤ FROM ├───┤ SCRIPT ├─┬──┘
        /// <br/>              ╰──────╯ ╰──────────╯ ┗───┛ ╰──────╯ ^ ╰────────╯ │
        /// <br/>                                                   │   ╭───╮    │
        /// <br/>                                                   └───┤ , ├────┘
        /// <br/>                                                       ╰───╯
        /// <br/>```
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response46> PostAnyAddressAsync(Body25? body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "addresses"
                    urlBuilder_.Append("addresses");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response46>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Overwrite current settings.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PutSettingsAsync(Body26 body)
        {
            return PutSettingsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update settings
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Overwrite current settings.
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PutSettingsAsync(Body26 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "settings"
                    urlBuilder_.Append("settings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get settings
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the current settings.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response47> GetSettingsAsync()
        {
            return GetSettingsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get settings
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the current settings.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response47> GetSettingsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "settings"
                    urlBuilder_.Append("settings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response47>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Current SMASH health
        /// </summary>
        /// <remarks>
        /// Get health status of the currently active SMASH server.
        /// </remarks>
        /// <param name="url">check this url for health instead of the currently configured one</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response48> GetCurrentSmashHealthAsync(string? url)
        {
            return GetCurrentSmashHealthAsync(url, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Current SMASH health
        /// </summary>
        /// <remarks>
        /// Get health status of the currently active SMASH server.
        /// </remarks>
        /// <param name="url">check this url for health instead of the currently configured one</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response48> GetCurrentSmashHealthAsync(string? url, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "smash/health"
                    urlBuilder_.Append("smash/health");
                    urlBuilder_.Append('?');
                    if (url != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("url")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(url, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response48>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Create a shared wallet from either an account public key and script
        /// <br/>templates or mnemonic and script templates.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PostSharedWalletAsync(object body)
        {
            return PostSharedWalletAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Create a shared wallet from either an account public key and script
        /// <br/>templates or mnemonic and script templates.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PostSharedWalletAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets"
                    urlBuilder_.Append("shared-wallets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known shared wallets, ordered from oldest to newest.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> ListSharedWalletsAsync()
        {
            return ListSharedWalletsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known shared wallets, ordered from oldest to newest.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<object>> ListSharedWalletsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets"
                    urlBuilder_.Append("shared-wallets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Get a shared wallet for a given wallet id.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetSharedWalletAsync(string walletId)
        {
            return GetSharedWalletAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Get a shared wallet for a given wallet id.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetSharedWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteSharedWalletAsync(string walletId)
        {
            return DeleteSharedWalletAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSharedWalletAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PutSharedWalletAsync(string walletId, Body27 body)
        {
            return PutSharedWalletAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Metadata
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PutSharedWalletAsync(string walletId, Body27 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// UTxO Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the UTxO distribution across the whole wallet, in the form of a histogram.
        /// <br/>
        /// <br/>```
        /// <br/>     │
        /// <br/> 100 ─
        /// <br/>     │
        /// <br/>     │                                 ┌───┐
        /// <br/>  10 ─                         ┌───┐   │   │                   ┌───┐
        /// <br/>     │                 ┌───┐   │   │   │   │                   │   │
        /// <br/>     │                 │   │   │   │   │   │   ┌───┐           │   │
        /// <br/>   1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │
        /// <br/>     └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────
        /// <br/>           10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳
        /// <br/>```
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response49> GetUTxOsStatisticsSharedAsync(string walletId)
        {
            return GetUTxOsStatisticsSharedAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// UTxO Statistics
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the UTxO distribution across the whole wallet, in the form of a histogram.
        /// <br/>
        /// <br/>```
        /// <br/>     │
        /// <br/> 100 ─
        /// <br/>     │
        /// <br/>     │                                 ┌───┐
        /// <br/>  10 ─                         ┌───┐   │   │                   ┌───┐
        /// <br/>     │                 ┌───┐   │   │   │   │                   │   │
        /// <br/>     │                 │   │   │   │   │   │   ┌───┐           │   │
        /// <br/>   1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │           │   │   │   │   │   │   │   │           │   │
        /// <br/>     │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │
        /// <br/>     └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────
        /// <br/>           10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳
        /// <br/>```
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response49> GetUTxOsStatisticsSharedAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/statistics/utxos"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/statistics/utxos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response49>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// A snapshot of the wallet's UTxO set
        /// </summary>
        /// <remarks>
        /// Generate a snapshot of the wallet's UTxO set.
        /// <br/>
        /// <br/>This endpoint is intended for debugging purposes.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response50> GetSharedWalletUtxoSnapshotAsync(string walletId)
        {
            return GetSharedWalletUtxoSnapshotAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// A snapshot of the wallet's UTxO set
        /// </summary>
        /// <remarks>
        /// Generate a snapshot of the wallet's UTxO set.
        /// <br/>
        /// <br/>This endpoint is intended for debugging purposes.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response50> GetSharedWalletUtxoSnapshotAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/utxo"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/utxo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response50>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Update payment script template for a given shared wallet by
        /// <br/>updating/adding account public key for cosigner. Updating the
        /// <br/>shared wallet account key results in an error. Also updating is
        /// <br/>enabled only for incomplete shared wallet, ie., the wallet that has
        /// <br/>a missing account public key for any cosigner.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PatchSharedWalletInPaymentAsync(string walletId, object body)
        {
            return PatchSharedWalletInPaymentAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Payment
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Update payment script template for a given shared wallet by
        /// <br/>updating/adding account public key for cosigner. Updating the
        /// <br/>shared wallet account key results in an error. Also updating is
        /// <br/>enabled only for incomplete shared wallet, ie., the wallet that has
        /// <br/>a missing account public key for any cosigner.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PatchSharedWalletInPaymentAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/payment-script-template"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payment-script-template");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Delegation
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Update delegation script template for a given shared wallet by
        /// <br/>updating/adding account public key for cosigner. Updating the
        /// <br/>shared wallet account key results in an error. Also updating is
        /// <br/>enabled only for incomplete shared wallet, ie., the wallet that has
        /// <br/>a missing account public key for any cosigner.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PatchSharedWalletInDelegationAsync(string walletId, object body)
        {
            return PatchSharedWalletInDelegationAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Delegation
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Update delegation script template for a given shared wallet by
        /// <br/>updating/adding account public key for cosigner. Updating the
        /// <br/>shared wallet account key results in an error. Also updating is
        /// <br/>enabled only for incomplete shared wallet, ie., the wallet that has
        /// <br/>a missing account public key for any cosigner.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PatchSharedWalletInDelegationAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/delegation-script-template"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/delegation-script-template");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Construct
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create a transaction to be signed from the shared wallet.
        /// <br/>
        /// <br/>Works for the following fields:
        /// <br/>  - payments
        /// <br/>  - metadata
        /// <br/>  - validity_interval
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response51> ConstructSharedTransactionAsync(string walletId, Body28 body)
        {
            return ConstructSharedTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Construct
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Create a transaction to be signed from the shared wallet.
        /// <br/>
        /// <br/>Works for the following fields:
        /// <br/>  - payments
        /// <br/>  - metadata
        /// <br/>  - validity_interval
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response51> ConstructSharedTransactionAsync(string walletId, Body28 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/transactions-construct"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-construct");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response51>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Decode
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Decode a serialized transaction, either freshly constructed,
        /// <br/>partially signed or fully-signed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response52> DecodeSharedTransactionAsync(string walletId, Body29 body)
        {
            return DecodeSharedTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Decode
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Decode a serialized transaction, either freshly constructed,
        /// <br/>partially signed or fully-signed.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response52> DecodeSharedTransactionAsync(string walletId, Body29 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/transactions-decode"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-decode");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response52>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sign
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Signs a serialised transaction, returning the modified
        /// <br/>transaction.
        /// <br/>
        /// <br/>This endpoint will add new witnesses using the keys available
        /// <br/>to this wallet. Any existing witnesses will remain in the
        /// <br/>witness set.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> SignSharedTransactionAsync(string walletId, Body30 body)
        {
            return SignSharedTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sign
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Signs a serialised transaction, returning the modified
        /// <br/>transaction.
        /// <br/>
        /// <br/>This endpoint will add new witnesses using the keys available
        /// <br/>to this wallet. Any existing witnesses will remain in the
        /// <br/>witness set.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SignSharedTransactionAsync(string walletId, Body30 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/transactions-sign"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-sign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Submit
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Submit a transaction that was already created and fully signed.
        /// <br/>Fails for foreign transactions that is transactions which lack
        /// <br/>the wallet's inputs and withdrawals.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response53> SubmitSharedTransactionAsync(string walletId, object body)
        {
            return SubmitSharedTransactionAsync(walletId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Submit
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Submit a transaction that was already created and fully signed.
        /// <br/>Fails for foreign transactions that is transactions which lack
        /// <br/>the wallet's inputs and withdrawals.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response53> SubmitSharedTransactionAsync(string walletId, object body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/transactions-submit"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions-submit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response53>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Lists all incoming and outgoing wallet's transactions.
        /// </remarks>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="order">An optional sort order.</param>
        /// <param name="max_count">An optional maximum count.</param>
        /// <param name="minWithdrawal">Returns only transactions that have at least one withdrawal above the given amount.
        /// <br/>This is particularly useful when set to `1` in order to list the withdrawal history of a wallet.</param>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <param name="address">An optional address.
        /// <br/>If given, the list of transactions will be filtered
        /// <br/>to only contain transactions that refer to this address in their inputs or outputs.
        /// <br/>This may exclude transactions whose inputs reference outside transactions
        /// <br/>that are not part of the transaction history of the wallet.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> ListSharedTransactionsAsync(string walletId, string? start, string? end, Order3? order, int? max_count, int? minWithdrawal, bool? simple_metadata, string? address)
        {
            return ListSharedTransactionsAsync(walletId, start, end, order, max_count, minWithdrawal, simple_metadata, address, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Lists all incoming and outgoing wallet's transactions.
        /// </remarks>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and
        /// <br/>extended formats are both accepted. Times can be local (with a
        /// <br/>timezone offset) or UTC.
        /// <br/>
        /// <br/>If both a start time and an end time are specified, then the start
        /// <br/>time must not be later than the end time.
        /// <br/>
        /// <br/>Example: `2008-08-08T08:08:08Z`</param>
        /// <param name="order">An optional sort order.</param>
        /// <param name="max_count">An optional maximum count.</param>
        /// <param name="minWithdrawal">Returns only transactions that have at least one withdrawal above the given amount.
        /// <br/>This is particularly useful when set to `1` in order to list the withdrawal history of a wallet.</param>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <param name="address">An optional address.
        /// <br/>If given, the list of transactions will be filtered
        /// <br/>to only contain transactions that refer to this address in their inputs or outputs.
        /// <br/>This may exclude transactions whose inputs reference outside transactions
        /// <br/>that are not part of the transaction history of the wallet.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> ListSharedTransactionsAsync(string walletId, string? start, string? end, Order3? order, int? max_count, int? minWithdrawal, bool? simple_metadata, string? address, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/transactions"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (start != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("start")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(start, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (end != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("end")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(end, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (order != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("order")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(order, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (max_count != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("max_count")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(max_count, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minWithdrawal != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minWithdrawal")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minWithdrawal, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (simple_metadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("simple-metadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(simple_metadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (address != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("address")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous12>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Get transaction by id.
        /// </remarks>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response54> GetSharedTransactionAsync(string walletId, string transactionId, bool? simple_metadata)
        {
            return GetSharedTransactionAsync(walletId, transactionId, simple_metadata, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Get transaction by id.
        /// </remarks>
        /// <param name="simple_metadata">When present (or equal to true) in the query, the metadata format for the
        /// <br/>transaction(s) in the output will be untyped plain json as specified in
        /// <br/>[CIP 25](https://cips.cardano.org/cips/cip25/)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response54> GetSharedTransactionAsync(string walletId, string transactionId, bool? simple_metadata, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/transactions/{transactionId}"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (simple_metadata != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("simple-metadata")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(simple_metadata, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<object>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response54>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Derive an account public key for any account index. For this key derivation to be possible,
        /// <br/>the wallet must have been created from mnemonic.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only _Hardened_ indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> PostAccountKeySharedAsync(string walletId, string index, Body31 body)
        {
            return PostAccountKeySharedAsync(walletId, index, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Derive an account public key for any account index. For this key derivation to be possible,
        /// <br/>the wallet must have been created from mnemonic.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only _Hardened_ indexes are supported by this endpoint.
        /// </remarks>
        /// <returns>Accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> PostAccountKeySharedAsync(string walletId, string index, Body31 body, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (index == null)
                throw new System.ArgumentNullException("index");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/keys/{index}"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/keys/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Retrieve the account public key of this shared wallet.
        /// <br/>
        /// <br/>To get an extended public key, instead of the public key,
        /// <br/>use query parameter `format=extended`. For non-extended public key
        /// <br/>use `format=non_extended` or omit query parameter.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetAccountKeySharedAsync(string walletId)
        {
            return GetAccountKeySharedAsync(walletId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Account Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Retrieve the account public key of this shared wallet.
        /// <br/>
        /// <br/>To get an extended public key, instead of the public key,
        /// <br/>use query parameter `format=extended`. For non-extended public key
        /// <br/>use `format=non_extended` or omit query parameter.
        /// </remarks>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetAccountKeySharedAsync(string walletId, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/keys"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/keys");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Return a public key for a given role and derivation index for
        /// <br/>a shared wallet.
        /// <br/>
        /// <br/>To get a hash of the public key, instead of the public key,
        /// <br/>use query parameter `hash=true`.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only `Soft` indexes are supported by this endpoint.
        /// </remarks>
        /// <param name="hash">Whether to return the key hash instead of the key.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetSharedWalletKeyAsync(string walletId, Role3 role, string index, bool? hash)
        {
            return GetSharedWalletKeyAsync(walletId, role, index, hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>Return a public key for a given role and derivation index for
        /// <br/>a shared wallet.
        /// <br/>
        /// <br/>To get a hash of the public key, instead of the public key,
        /// <br/>use query parameter `hash=true`.
        /// <br/>
        /// <br/>&lt;b&gt;Note:&lt;/b&gt; Only `Soft` indexes are supported by this endpoint.
        /// </remarks>
        /// <param name="hash">Whether to return the key hash instead of the key.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetSharedWalletKeyAsync(string walletId, Role3 role, string index, bool? hash, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            if (role == null)
                throw new System.ArgumentNullException("role");

            if (index == null)
                throw new System.ArgumentNullException("index");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/keys/{role}/{index}"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/keys/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(role, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (hash != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("hash")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hash, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known addresses, ordered from newest to oldest
        /// </remarks>
        /// <param name="state">An optional filter on the address state.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> ListSharedAddressesAsync(string walletId, State3? state)
        {
            return ListSharedAddressesAsync(walletId, state, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return a list of known addresses, ordered from newest to oldest
        /// </remarks>
        /// <param name="state">An optional filter on the address state.</param>
        /// <returns>Ok</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> ListSharedAddressesAsync(string walletId, State3? state, System.Threading.CancellationToken cancellationToken)
        {
            if (walletId == null)
                throw new System.ArgumentNullException("walletId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shared-wallets/{walletId}/addresses"
                    urlBuilder_.Append("shared-wallets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(walletId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/addresses");
                    urlBuilder_.Append('?');
                    if (state != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous13>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Block Header
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the latest block-header available at the chain source
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response55> GetBlocksLatestHeaderAsync()
        {
            return GetBlocksLatestHeaderAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Block Header
        /// </summary>
        /// <remarks>
        /// &lt;p align="right"&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>Return the latest block-header available at the chain source
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response55> GetBlocksLatestHeaderAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "blocks/latest/header"
                    urlBuilder_.Append("blocks/latest/header");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response55>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAddressWithPath
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiAddressWithPathState State { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiAddressWithPath FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiAddressWithPath>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAddressInspect
    {

        [System.Text.Json.Serialization.JsonPropertyName("address_style")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiAddressInspectAddress_style Address_style { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake_reference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiAddressInspectStake_reference Stake_reference { get; set; } = default!;

        /// <summary>
        /// Can be null for 'Icarus' and 'Byron' styles.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_tag")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Network_tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("spending_key_hash")]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Spending_key_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("spending_key_bech32")]
        public string Spending_key_bech32 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake_key_hash")]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Stake_key_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake_key_bech32")]
        public string Stake_key_bech32 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script_hash")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Script_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script_hash_bech32")]
        public string Script_hash_bech32 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pointer")]
        public Pointer Pointer { get; set; } = default!;

        /// <summary>
        /// Only for 'Icarus' and 'Byron' styles.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_root")]
        public string Address_root { get; set; } = default!;

        /// <summary>
        /// Only for 'Byron' style.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        public string Derivation_path { get; set; } = default!;

        /// <summary>
        /// The raw type field of the address.
        /// <br/>
        /// <br/>Details about possible address types are following (refer also to [cddl](https://github.com/IntersectMBO/cardano-ledger/blob/master/eras/alonzo/test-suite/cddl-files/alonzo.cddl)).
        /// <br/>
        /// <br/>| address_type | binary prefix  |   Meaning                                                |
        /// <br/>| ------------ |:--------------:|:--------------------------------------------------------:|
        /// <br/>|      0       |  0000          |   base address: keyhash28,keyhash28                      |
        /// <br/>|      1       |  0001          |   base address: scripthash28,keyhash28                   |
        /// <br/>|      2       |  0010          |   base address: keyhash28,scripthash28                   |
        /// <br/>|      3       |  0011          |   base address: scripthash28,scripthash28                |
        /// <br/>|      4       |  0100          |   pointer address: keyhash28, 3 variable length uint     |
        /// <br/>|      5       |  0101          |   pointer address: scripthash28, 3 variable length uint  |
        /// <br/>|      6       |  0110          |   enterprise address: keyhash28                          |
        /// <br/>|      7       |  0111          |   enterprise address: scripthash28                       |
        /// <br/>|      8       |  1000          |   byron/icarus                                           |
        /// <br/>|      14      |  1110          |   reward account: keyhash28                              |
        /// <br/>|      15      |  1111          |   reward account: scripthash28                           |
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_type")]
        [System.ComponentModel.DataAnnotations.Range(0, 15)]
        public int Address_type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiAddressInspect FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiAddressInspect>(data, options);

        }

    }

    /// <summary>
    /// The time slot corresponding the network tip.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiNetworkTip
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiNetworkTip FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiNetworkTip>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiEra
    {

        [System.Runtime.Serialization.EnumMember(Value = @"byron")]
        Byron = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"shelley")]
        Shelley = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"allegra")]
        Allegra = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"mary")]
        Mary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"alonzo")]
        Alonzo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"babbage")]
        Babbage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"conway")]
        Conway = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkInfo
    {
        /// <summary>
        /// The unique magic number defining the network the wallet is working on.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("protocol_magic")]
        public int Protocol_magic { get; set; } = default!;

        /// <summary>
        /// A name just distinguishing mainnet from testnets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NetworkInfoNetwork_id Network_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NetworkInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NetworkInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiNetworkInformation
    {
        /// <summary>
        /// Estimated synchronization progress of the node with the underlying network. Note that this may
        /// <br/>change quite arbitrarily as the node may switch to shorter or longer chain forks.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sync_progress")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Sync_progress { get; set; } = default!;

        /// <summary>
        /// Underlying node's tip
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Node_tip { get; set; } = default!;

        /// <summary>
        /// The time slot corresponding the network tip.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_tip")]
        public object Network_tip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next_epoch")]
        public Next_epoch Next_epoch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("node_era")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiNetworkInformationNode_era Node_era { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("network_info")]
        [System.ComponentModel.DataAnnotations.Required]
        public Network_info Network_info { get; set; } = new Network_info();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_mode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiNetworkInformationWallet_mode Wallet_mode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiNetworkInformation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiNetworkInformation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiNetworkClock
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiNetworkClock FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiNetworkClock>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NullableEpochInfo
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NullableEpochInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NullableEpochInfo>(data, options);

        }

    }

    /// <summary>
    /// 
    /// <br/>If and when each era started or will start.
    /// <br/>
    /// <br/>The object is keyed by era names. The values either describe the epoch boundary
    /// <br/>when the era starts (can be in the future or in the past), or are null if not yet
    /// <br/>confirmed on-chain.
    /// <br/>
    /// <br/>If you need to know the current era, see the `node_era` field of
    /// <br/>`GET /network/information`.
    /// <br/>
    /// <br/>&gt; Due to complications with our current tooling, we cannot mark the era names
    /// <br/>&gt; as required, but the keys are in fact always present.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiEraInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("byron")]
        public object? Byron { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shelley")]
        public object? Shelley { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allegra")]
        public object? Allegra { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mary")]
        public object? Mary { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alonzo")]
        public object? Alonzo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("babbage")]
        public object? Babbage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conway")]
        public object? Conway { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiEraInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiEraInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiNetworkParameters
    {
        /// <summary>
        /// The hash of a block
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("genesis_block_hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Genesis_block_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("blockchain_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Blockchain_start_time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slot_length")]
        [System.ComponentModel.DataAnnotations.Required]
        public Slot_length Slot_length { get; set; } = new Slot_length();

        [System.Text.Json.Serialization.JsonPropertyName("epoch_length")]
        [System.ComponentModel.DataAnnotations.Required]
        public Epoch_length Epoch_length { get; set; } = new Epoch_length();

        [System.Text.Json.Serialization.JsonPropertyName("security_parameter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Security_parameter Security_parameter { get; set; } = new Security_parameter();

        [System.Text.Json.Serialization.JsonPropertyName("active_slot_coefficient")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active_slot_coefficient Active_slot_coefficient { get; set; } = new Active_slot_coefficient();

        [System.Text.Json.Serialization.JsonPropertyName("decentralization_level")]
        [System.ComponentModel.DataAnnotations.Required]
        public Decentralization_level Decentralization_level { get; set; } = new Decentralization_level();

        [System.Text.Json.Serialization.JsonPropertyName("desired_pool_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Desired_pool_number { get; set; } = default!;

        /// <summary>
        /// 
        /// <br/>If and when each era started or will start.
        /// <br/>
        /// <br/>The object is keyed by era names. The values either describe the epoch boundary
        /// <br/>when the era starts (can be in the future or in the past), or are null if not yet
        /// <br/>confirmed on-chain.
        /// <br/>
        /// <br/>If you need to know the current era, see the `node_era` field of
        /// <br/>`GET /network/information`.
        /// <br/>
        /// <br/>&gt; Due to complications with our current tooling, we cannot mark the era names
        /// <br/>&gt; as required, but the keys are in fact always present.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eras")]
        [System.ComponentModel.DataAnnotations.Required]
        public Eras Eras { get; set; } = new Eras();

        /// <summary>
        /// The maximum number of collateral inputs that can be used in a single
        /// <br/>transaction.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maximum_collateral_input_count")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Maximum_collateral_input_count { get; set; } = default!;

        /// <summary>
        /// The minimum required amount of collateral as a percentage of the
        /// <br/>total transaction fee.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minimum_collateral_percentage")]
        public object Minimum_collateral_percentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maximum_token_bundle_size")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Maximum_token_bundle_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("execution_unit_prices")]
        public object Execution_unit_prices { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiNetworkParameters FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiNetworkParameters>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSelectCoinsPayments
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Payments> Payments { get; set; } = new System.Collections.ObjectModel.Collection<Payments>();

        /// <summary>
        /// When provided, instruments the server to automatically withdraw rewards from the source wallet when they are deemed
        /// <br/>sufficient (i.e. they contribute to the balance for at least as much as they cost).
        /// <br/>
        /// <br/>As a consequence, the resulting transaction may or may not have a withdrawal object. Summarizing:
        /// <br/>
        /// <br/>withdrawal field | reward balance | result
        /// <br/>---              | ---            | ---
        /// <br/>`null`           | too small      | ✓ no withdrawals generated
        /// <br/>`null`           | big enough     | ✓ no withdrawals generated
        /// <br/>`"self"`         | too small      | ✓ no withdrawals generated
        /// <br/>`"self"`         | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiSelectCoinsPaymentsWithdrawal Withdrawal { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSelectCoinsPayments FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSelectCoinsPayments>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSelectCoinsRedemption
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments>();

        /// <summary>
        /// When provided, attempts to withdraw rewards from the default stake address
        /// <br/>corresponding to the given mnemonic.
        /// <br/>
        /// <br/>Should the rewards be null or too small to be worth withdrawing (i.e. the
        /// <br/>cost of adding them into the transaction is more than their own intrinsic
        /// <br/>value), the server will reject the request with a
        /// <br/>`withdrawal_not_beneficial` error.
        /// <br/>
        /// <br/>withdrawal field    | reward balance | result
        /// <br/>---                 | ---            | ---
        /// <br/>any recovery phrase | too small      | x Error 403 `withdrawal_not_beneficial`
        /// <br/>any recovery phrase | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Withdrawal { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata2 Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSelectCoinsRedemption FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSelectCoinsRedemption>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSelectCoinsAction
    {
        /// <summary>
        /// A delegation action.
        /// <br/>
        /// <br/>Pool id is only required for "join".
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation_action")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation_action Delegation_action { get; set; } = new Delegation_action();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSelectCoinsAction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSelectCoinsAction>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSelectCoinsData
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSelectCoinsData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSelectCoinsData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronSelectCoinsData
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments2> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments2>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronSelectCoinsData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronSelectCoinsData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiCoinSelection
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Inputs> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<Inputs>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Outputs> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<Outputs>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Change> Change { get; set; } = new System.Collections.ObjectModel.Collection<Change>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<Collateral> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<Withdrawals> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<Certificates> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<Deposits_taken> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<Deposits_returned> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiCoinSelection FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiCoinSelection>(data, options);

        }

    }

    /// <summary>
    /// Gives an indication if metadata GC checking for delisted pools
    /// <br/>has run and if so, when.
    /// <br/>
    /// <br/>Possible values are:
    /// <br/>  - not_applicable -&gt; we're currently not querying a SMASH server for metadata
    /// <br/>  - not_started -&gt; the GC hasn't started yet, try again in a short while
    /// <br/>  - restarting -&gt; the GC thread is currently restarting, try again in short while
    /// <br/>  - has_run -&gt; the GC has run successfully
    /// <br/>
    /// <br/>When 'status' is 'restarting' or 'has_run' then the field 'last_run'
    /// <br/>is set to the last GC time in UTC.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiGCStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiGCStatusStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_run")]
        public string Last_run { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiGCStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiGCStatus>(data, options);

        }

    }

    /// <summary>
    /// The maintenance action to carry out, current values are
    /// <br/>  - gc_stake_pools -&gt; trigger looking up delisted pools from the remote SMASH server
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMaintenanceActionPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("maintenance_action")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiMaintenanceActionPostDataMaintenance_action Maintenance_action { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMaintenanceActionPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiMaintenanceActionPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMaintenanceAction
    {
        /// <summary>
        /// Gives an indication if metadata GC checking for delisted pools
        /// <br/>has run and if so, when.
        /// <br/>
        /// <br/>Possible values are:
        /// <br/>  - not_applicable -&gt; we're currently not querying a SMASH server for metadata
        /// <br/>  - not_started -&gt; the GC hasn't started yet, try again in a short while
        /// <br/>  - restarting -&gt; the GC thread is currently restarting, try again in short while
        /// <br/>  - has_run -&gt; the GC has run successfully
        /// <br/>
        /// <br/>When 'status' is 'restarting' or 'has_run' then the field 'last_run'
        /// <br/>is set to the last GC time in UTC.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gc_stake_pools")]
        [System.ComponentModel.DataAnnotations.Required]
        public Gc_stake_pools Gc_stake_pools { get; set; } = new Gc_stake_pools();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMaintenanceAction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiMaintenanceAction>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiStakePool
    {
        /// <summary>
        /// A unique identifier for the pool.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metrics")]
        [System.ComponentModel.DataAnnotations.Required]
        public Metrics Metrics { get; set; } = new Metrics();

        /// <summary>
        /// Estimated cost set by the pool operator when registering his pool.
        /// <br/>This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cost")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Cost { get; set; } = default!;

        /// <summary>
        /// Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("margin")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Margin { get; set; } = default!;

        /// <summary>
        /// Minimal stake amount that a stake pool is willing to honor.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pledge")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pledge { get; set; } = default!;

        /// <summary>
        /// Information about the stake pool.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata3 Metadata { get; set; } = default!;

        /// <summary>
        /// The epoch in which a stake pool retires.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't yet found a retirement certificate
        /// <br/>for this stake pool.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("retirement")]
        public object Retirement { get; set; } = default!;

        /// <summary>
        /// Various flags applicable to stake pools. Possible flags:
        /// <br/>
        /// <br/>| flag     | description                                                                                                      |
        /// <br/>| ---      | ---                                                                                                              |
        /// <br/>| delisted | The pool is marked as delisted on a configured SMASH server; metadata for this pool have therefore been dropped. |
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("flags")]

        // TODO(system.text.json): Add string enum item converter
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Flags> Flags { get; set; } = new System.Collections.ObjectModel.Collection<Flags>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiStakePool FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiStakePool>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiFee
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_min")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_min Estimated_min { get; set; } = new Estimated_min();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_max")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_max Estimated_max { get; set; } = new Estimated_max();

        /// <summary>
        /// A list of minimum coin values that each output in a payment must satisfy. The values themselves depends on two things:
        /// <br/>
        /// <br/>  - (a) Some updatable protocol parameters fixed by the network.
        /// <br/>  - (b) The nature of the outputs (i.e. the kind of assets it includes).
        /// <br/>
        /// <br/>The list is a direct 1:1 mapping of the requested outputs. Said differently, it has the **same number of items** and **items
        /// <br/>are ordered in the same way** as **requested outputs** are ordered. In the case where there's no explicitly requested outputs (e.g.
        /// <br/>when calculating fee for delegation), this list is empty.
        /// <br/>
        /// <br/>For example, an output containing only `Ada` may require to be of at least `1 Ada`. An output containing only an hypothetical `AppleCoin`
        /// <br/>may require to also carry a minimum of `1.2 Ada`. Note that no matter what, a minimum coin value is always given in Lovelace / Ada.
        /// <br/>
        /// <br/>&gt; ℹ️ This mechanism is used by the protocol to protect against flooding of the network with worthless assets. By requiring a minimum coin value to every
        /// <br/>UTxO, they are given an intrinsic value indexed itself on the value of Ada.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minimum_coins")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Minimum_coins> Minimum_coins { get; set; } = new System.Collections.ObjectModel.Collection<Minimum_coins>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit Deposit { get; set; } = new Deposit();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiFee FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiFee>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPutAddressesData
    {
        /// <summary>
        /// The imported addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPutAddressesData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPutAddressesData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostPolicyKeyData
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostPolicyKeyData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostPolicyKeyData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPolicyId
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPolicyId FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPolicyId>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostPolicyIdData
    {

        [System.Text.Json.Serialization.JsonPropertyName("policy_script_template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Policy_script_template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostPolicyIdData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostPolicyIdData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiTxId
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiTxId FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiTxId>(data, options);

        }

    }

    /// <summary>
    /// An encoded transaction.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSerialisedTransaction
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSerialisedTransaction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSerialisedTransaction>(data, options);

        }

    }

    /// <summary>
    /// An encoded transaction.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSerialisedTransactionEncoded
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSerialisedTransactionEncoded FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSerialisedTransactionEncoded>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiTokenAmountFingerprint
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiTokenAmountFingerprint FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiTokenAmountFingerprint>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlutusScriptInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("language_version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PlutusScriptInfoLanguage_version Language_version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script_hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Script_hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PlutusScriptInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PlutusScriptInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnyScript
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AnyScriptScript_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AnyScript FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AnyScript>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnyExplicitScript
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AnyExplicitScriptScript_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference2 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AnyExplicitScript FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AnyExplicitScript>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiTokens
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Assets> Assets { get; set; } = new System.Collections.ObjectModel.Collection<Assets>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiTokens FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiTokens>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAssetMintBurn
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Tokens> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<Tokens>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiAssetMintBurn FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiAssetMintBurn>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiConstructTransaction
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("coin_selection")]
        [System.ComponentModel.DataAnnotations.Required]
        public Coin_selection Coin_selection { get; set; } = new Coin_selection();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee Fee { get; set; } = new Fee();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiConstructTransaction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiConstructTransaction>(data, options);

        }

    }

    /// <summary>
    /// Inputs that could be external or belong to the wallet.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiInputsGeneral
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiInputsGeneral FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiInputsGeneral>(data, options);

        }

    }

    /// <summary>
    /// Outputs that could be external or belong to the wallet.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiOutputsGeneral
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiOutputsGeneral FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiOutputsGeneral>(data, options);

        }

    }

    /// <summary>
    /// Outputs that could be external or belong to the wallet.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiCollateralOutputsGeneral
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiCollateralOutputsGeneral FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiCollateralOutputsGeneral>(data, options);

        }

    }

    /// <summary>
    /// Withdrawals that could be external or belong to the wallet.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWithdrawalsGeneral
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWithdrawalsGeneral FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWithdrawalsGeneral>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiStakePoolMetadata
    {
        /// <summary>
        /// A URL to the stake pool's website.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiStakePoolMetadata FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiStakePoolMetadata>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiRegisterPool
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiRegisterPoolCertificate_type Certificate_type { get; set; } = default!;

        /// <summary>
        /// A unique identifier for the pool.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Pool_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool_owners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Pool_owners { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_margin")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pool_margin { get; set; } = default!;

        /// <summary>
        /// Estimated cost set by the pool operator when registering his pool.
        /// <br/>This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_cost")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pool_cost { get; set; } = default!;

        /// <summary>
        /// Minimal stake amount that a stake pool is willing to honor.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_pledge")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pool_pledge { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool_metadata")]
        public Pool_metadata Pool_metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiRegisterPool FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiRegisterPool>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiDeregisterPool
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiDeregisterPoolCertificate_type Certificate_type { get; set; } = default!;

        /// <summary>
        /// A unique identifier for the pool.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Pool_id { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("retirement_epoch")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Retirement_epoch { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiDeregisterPool FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiDeregisterPool>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiCertificate
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiCertificate FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiCertificate>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiValidityIntervalExplicit
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before Invalid_before { get; set; } = new Invalid_before();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter Invalid_hereafter { get; set; } = new Invalid_hereafter();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiValidityIntervalExplicit FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiValidityIntervalExplicit>(data, options);

        }

    }

    /// <summary>
    /// Specifies the number of verification key and bootstrap wintesses.
    /// <br/>As scripts act as witnesses they are also included. Scripts can be specified
    /// <br/>and spent in a given transaction or defined to be consumed later.
    /// <br/>In the latter case they are defined in transaction outputs (feature possible from Babbage era)
    /// <br/>in one transaction and referenced in other later transaction(s). The script referencing
    /// <br/>is realized via including of reference in a reference input. If reference script
    /// <br/>is present here it included the form of the script and reference to be used later,
    /// <br/>ie. tx id and index of tx out where the script was included.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWitnessCount
    {
        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verification_key")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Verification_key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scripts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Scripts> Scripts { get; set; } = new System.Collections.ObjectModel.Collection<Scripts>();

        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bootstrap")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Bootstrap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWitnessCount FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWitnessCount>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiDecodedTransaction
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee2 Fee { get; set; } = new Fee2();

        /// <summary>
        /// Inputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Inputs { get; set; } = default!;

        /// <summary>
        /// Outputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Outputs { get; set; } = default!;

        /// <summary>
        /// Inputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public object Collateral { get; set; } = default!;

        /// <summary>
        /// Outputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        public object Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// Withdrawals that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mint Mint { get; set; } = new Mint();

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        [System.ComponentModel.DataAnnotations.Required]
        public Burn Burn { get; set; } = new Burn();

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata4 Metadata { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiDecodedTransactionScript_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval Validity_interval { get; set; } = default!;

        /// <summary>
        /// Specifies the number of verification key and bootstrap wintesses.
        /// <br/>As scripts act as witnesses they are also included. Scripts can be specified
        /// <br/>and spent in a given transaction or defined to be consumed later.
        /// <br/>In the latter case they are defined in transaction outputs (feature possible from Babbage era)
        /// <br/>in one transaction and referenced in other later transaction(s). The script referencing
        /// <br/>is realized via including of reference in a reference input. If reference script
        /// <br/>is present here it included the form of the script and reference to be used later,
        /// <br/>ie. tx id and index of tx out where the script was included.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("witness_count")]
        [System.ComponentModel.DataAnnotations.Required]
        public Witness_count Witness_count { get; set; } = new Witness_count();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiDecodedTransaction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiDecodedTransaction>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiTransaction
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee3 Fee { get; set; } = new Fee3();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken Deposit_taken { get; set; } = new Deposit_taken();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned Deposit_returned { get; set; } = new Deposit_returned();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiTransactionDirection Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<Collateral_outputs> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiTransactionStatus Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata5 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiTransactionScript_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint2 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn2 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval2 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiTransaction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiTransaction>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XTxBody
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static XTxBody FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<XTxBody>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XTxWits : System.Collections.ObjectModel.Collection<byte[]>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static XTxWits FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<XTxWits>(data, options);

        }

    }

    /// <summary>
    /// The result of signing a transaction (serialized and encoded).
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSignedTransaction
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSignedTransaction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSignedTransaction>(data, options);

        }

    }

    /// <summary>
    /// The result of signing a transaction (serialized and encoded).
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSignedTransactionEncoded
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSignedTransactionEncoded FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSignedTransactionEncoded>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletDelegationNext
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiWalletDelegationNextStatus Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at Changes_at { get; set; } = new Changes_at();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletDelegationNext FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletDelegationNext>(data, options);

        }

    }

    /// <summary>
    /// Delegation settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletDelegation
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active Active { get; set; } = new Active();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Next> Next { get; set; } = new System.Collections.ObjectModel.Collection<Next>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletDelegation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletDelegation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWallet
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        /// <summary>
        /// Wallet current Ada balance(s).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance Balance { get; set; } = new Balance();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets2 Assets { get; set; } = new Assets2();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation Delegation { get; set; } = new Delegation();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip Tip { get; set; } = new Tip();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWallet FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWallet>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWallet
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Byron wallet's current balance(s)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance2 Balance { get; set; } = new Balance2();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets3 Assets { get; set; } = new Assets3();

        /// <summary>
        /// Mechanism used for discovering addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discovery")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiByronWalletDiscovery Discovery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase2 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip2 Tip { get; set; } = new Tip2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWallet FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWallet>(data, options);

        }

    }

    /// <summary>
    /// Restore from root private key
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A list of mnemonic words
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_sentence")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(15)]
        [System.ComponentModel.DataAnnotations.MaxLength(24)]
        public System.Collections.Generic.ICollection<string> Mnemonic_sentence { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// An optional passphrase used to encrypt the mnemonic sentence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_second_factor")]
        [System.ComponentModel.DataAnnotations.MinLength(9)]
        [System.ComponentModel.DataAnnotations.MaxLength(12)]
        public System.Collections.Generic.ICollection<string> Mnemonic_second_factor { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        [System.Text.Json.Serialization.JsonPropertyName("one_change_address_mode")]
        public bool One_change_address_mode { get; set; } = false;

        /// <summary>
        /// The wallet restoration mode determines since when the wallet should
        /// <br/>be restored from the blockchain.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("restoration_mode")]
        public object Restoration_mode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletPostData>(data, options);

        }

    }

    /// <summary>
    /// Restore from account public key
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAccountPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// An extended account public key (public key + chain code)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account_public_key")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 128)]
        public string Account_public_key { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiAccountPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiAccountPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletOrAccountPostData
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletOrAccountPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletOrAccountPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiActiveSharedWallet
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account_index")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account_index { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase3 Passphrase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payment_script_template")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment_script_template Payment_script_template { get; set; } = new Payment_script_template();

        [System.Text.Json.Serialization.JsonPropertyName("delegation_script_template")]
        public Delegation_script_template Delegation_script_template { get; set; } = default!;

        /// <summary>
        /// Wallet current Ada balance(s).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance3 Balance { get; set; } = new Balance3();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets4 Assets { get; set; } = new Assets4();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation2 Delegation { get; set; } = new Delegation2();

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip3 Tip { get; set; } = new Tip3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiActiveSharedWallet FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiActiveSharedWallet>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiIncompleteSharedWallet
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account_index")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account_index { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        [System.Text.Json.Serialization.JsonPropertyName("payment_script_template")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment_script_template2 Payment_script_template { get; set; } = new Payment_script_template2();

        [System.Text.Json.Serialization.JsonPropertyName("delegation_script_template")]
        public Delegation_script_template2 Delegation_script_template { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public State4 State { get; set; } = new State4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiIncompleteSharedWallet FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiIncompleteSharedWallet>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSharedWallet
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSharedWallet FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSharedWallet>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSharedWalletPostDataFromMnemonics
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A list of mnemonic words
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_sentence")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(15)]
        [System.ComponentModel.DataAnnotations.MaxLength(24)]
        public System.Collections.Generic.ICollection<string> Mnemonic_sentence { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// An optional passphrase used to encrypt the mnemonic sentence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_second_factor")]
        [System.ComponentModel.DataAnnotations.MinLength(9)]
        [System.ComponentModel.DataAnnotations.MaxLength(12)]
        public System.Collections.Generic.ICollection<string> Mnemonic_second_factor { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account_index")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account_index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payment_script_template")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment_script_template3 Payment_script_template { get; set; } = new Payment_script_template3();

        [System.Text.Json.Serialization.JsonPropertyName("delegation_script_template")]
        public Delegation_script_template3 Delegation_script_template { get; set; } = default!;

        /// <summary>
        /// Script validation level. Required validation sifts off scripts that would not
        /// <br/>be accepted by the ledger. Recommended level filters out scripts that do not pass
        /// <br/>required validation and additionally when:
        /// <br/>  * 'all' is non-empty
        /// <br/>  * there are redundant timelocks in a given level
        /// <br/>  * there are no duplicated verification keys in a given level
        /// <br/>  * 'at_least' coefficient is positive
        /// <br/>  * 'all', 'any' are non-empty and `'at_least' has no less elements in the list
        /// <br/>     than the coefficient after timelocks are filtered out.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiSharedWalletPostDataFromMnemonicsScript_validation Script_validation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("one_change_address_mode")]
        public bool One_change_address_mode { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSharedWalletPostDataFromMnemonics FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSharedWalletPostDataFromMnemonics>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSharedWalletPostDataFromAccountPubX
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// An extended account public key (public key + chain code) of shared wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account_public_key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(acct_shared_xvk)1[0-9a-z]*$")]
        public string Account_public_key { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account_index")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account_index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payment_script_template")]
        [System.ComponentModel.DataAnnotations.Required]
        public Payment_script_template4 Payment_script_template { get; set; } = new Payment_script_template4();

        [System.Text.Json.Serialization.JsonPropertyName("delegation_script_template")]
        public Delegation_script_template4 Delegation_script_template { get; set; } = default!;

        /// <summary>
        /// Script validation level. Required validation sifts off scripts that would not
        /// <br/>be accepted by the ledger. Recommended level filters out scripts that do not pass
        /// <br/>required validation and additionally when:
        /// <br/>  * 'all' is non-empty
        /// <br/>  * there are redundant timelocks in a given level
        /// <br/>  * there are no duplicated verification keys in a given level
        /// <br/>  * 'at_least' coefficient is positive
        /// <br/>  * 'all', 'any' are non-empty and `'at_least' has no less elements in the list
        /// <br/>     than the coefficient after timelocks are filtered out.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiSharedWalletPostDataFromAccountPubXScript_validation Script_validation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSharedWalletPostDataFromAccountPubX FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSharedWalletPostDataFromAccountPubX>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSharedWalletPostData
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSharedWalletPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSharedWalletPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSharedWalletPatchData
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSharedWalletPatchData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSharedWalletPatchData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAsset
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        /// <summary>
        /// In the Mary era of Cardano, UTxO may contain native assets. These
        /// <br/>assets are represented on-chain by opaque identifiers which are
        /// <br/>meaningless to end-users. Therefore, user-facing metadata
        /// <br/>regarding each token must be stored off-chain, in a metadata
        /// <br/>registry.
        /// <br/>
        /// <br/>Token creators may publish metadata into the registry and client
        /// <br/>applications can consume these metadata for display to end
        /// <br/>users. This will work in a similar way to how it is done for stake
        /// <br/>pool metadata.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata6 Metadata { get; set; } = default!;

        /// <summary>
        /// If there was an error fetching metadata from the server,
        /// <br/>this will be set to one of `fetch` or `parse`, to indicate
        /// <br/>the kind of error.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata_error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiAssetMetadata_error Metadata_error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiAsset FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiAsset>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletMigrationBalance
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ada")]
        [System.ComponentModel.DataAnnotations.Required]
        public Ada Ada { get; set; } = new Ada();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<assets> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletMigrationBalance FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletMigrationBalance>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletMigrationPlan
    {
        /// <summary>
        /// The complete set of selections required for a migration.
        /// <br/>
        /// <br/>Each selection is the basis for a single transaction.
        /// <br/>
        /// <br/>The ordering of selections within the list is not significant.
        /// <br/>After conversion into transactions, the transactions can be
        /// <br/>broadcast to the network in any order to perform the migration.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("selections")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Selections> Selections { get; set; } = new System.Collections.ObjectModel.Collection<Selections>();

        /// <summary>
        /// The total amount to be paid in fees for a migration.
        /// <br/>
        /// <br/>This is the total sum of the fees of the individual selections.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total_fee { get; set; } = default!;

        /// <summary>
        /// The total balance of assets that **cannot** be migrated.
        /// <br/>
        /// <br/>The **ada** component of this balance is the total sum of all dust
        /// <br/>ada entries in the UTxO set. An ada entry is considered to be dust
        /// <br/>if its value is not large enough to pay for the marginal cost of
        /// <br/>including it in a transaction.
        /// <br/>
        /// <br/>The **assets** component of this balance is the total sum of all
        /// <br/>non-ada assets that cannot currently be migrated. Tokens of a
        /// <br/>non-ada asset cannot be migrated if there is insufficient ada
        /// <br/>available to pay for their inclusion in a transaction.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance_leftover")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Balance_leftover { get; set; } = default!;

        /// <summary>
        /// The total balance of assets that **can** be migrated.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance_selected")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Balance_selected { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletMigrationPlan FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletMigrationPlan>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletPassphrase
    {
        /// <summary>
        /// The source wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletPassphrase FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletPassphrase>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletMigrationPlanPostData
    {
        /// <summary>
        /// The recipient addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletMigrationPlanPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletMigrationPlanPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWalletMigrationPostData
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// The recipient addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWalletMigrationPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWalletMigrationPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiShelleyWalletMigrationPostData
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// The recipient addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiShelleyWalletMigrationPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiShelleyWalletMigrationPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletUtxoSnapshotEntry
    {
        /// <summary>
        /// The ada quantity associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ada")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Ada { get; set; } = default!;

        /// <summary>
        /// The set of non-ada assets associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletUtxoSnapshotEntry FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletUtxoSnapshotEntry>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletUtxoSnapshot
    {
        /// <summary>
        /// The complete set of UTxO entries associated with a wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entries")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Entries> Entries { get; set; } = new System.Collections.ObjectModel.Collection<Entries>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletUtxoSnapshot FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletUtxoSnapshot>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletUTxOsStatistics
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public Total Total { get; set; } = new Total();

        [System.Text.Json.Serialization.JsonPropertyName("scale")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiWalletUTxOsStatisticsScale Scale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distribution")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, int> Distribution { get; set; } = new System.Collections.Generic.Dictionary<string, int>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletUTxOsStatistics FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletUTxOsStatistics>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletSignData
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata7 Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletSignData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletSignData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiScript
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiScript FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiScript>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPubKey
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPubKey FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPubKey>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnyAddress
    {
        /// <summary>
        /// A Shelley address representing either enterprise, reward account or delegating address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((addr)|(stake)|(addr_test)|(stake_test))1[0-9a-z]*$")]
        public string Address { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AnyAddress FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AnyAddress>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiCredential
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiCredential FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiCredential>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiAddressData
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        public object Payment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        public object Stake { get; set; } = default!;

        /// <summary>
        /// Script validation level. Required validation sifts off scripts that would not
        /// <br/>be accepted by the ledger. Recommended level filters out scripts that do not pass
        /// <br/>required validation and additionally when:
        /// <br/>  * 'all' is non-empty
        /// <br/>  * there are redundant timelocks in a given level
        /// <br/>  * there are no duplicated verification keys in a given level
        /// <br/>  * 'at_least' coefficient is positive
        /// <br/>  * 'all', 'any' are non-empty and `'at_least' has no less elements in the list
        /// <br/>     than the coefficient after timelocks are filtered out.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiAddressDataValidation Validation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiAddressData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiAddressData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWalletRandomPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("style")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiByronWalletRandomPostDataStyle Style { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_sentence")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Mnemonic_sentence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWalletRandomPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWalletRandomPostData>(data, options);

        }

    }

    /// <summary>
    /// patate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWalletRandomXPrvPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("style")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiByronWalletRandomXPrvPostDataStyle Style { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("encrypted_root_private_key")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.Obsolete]
        public object Encrypted_root_private_key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("passphrase_hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.Obsolete]
        public object Passphrase_hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWalletRandomXPrvPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWalletRandomXPrvPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWalletIcarusPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("style")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiByronWalletIcarusPostDataStyle Style { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_sentence")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Mnemonic_sentence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWalletIcarusPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWalletIcarusPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWalletTrezorPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("style")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiByronWalletTrezorPostDataStyle Style { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_sentence")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Mnemonic_sentence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWalletTrezorPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWalletTrezorPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWalletLedgerPostData
    {

        [System.Text.Json.Serialization.JsonPropertyName("style")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiByronWalletLedgerPostDataStyle Style { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_sentence")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Mnemonic_sentence { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWalletLedgerPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWalletLedgerPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletPutData
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletPutData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletPutData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletPutDataExtended
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("one_change_address_mode")]
        public bool One_change_address_mode { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletPutDataExtended FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletPutDataExtended>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostAccountKeyData
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// Determines whether extended (with chain code) or normal (without chain code) key is requested
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiPostAccountKeyDataFormat Format { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostAccountKeyData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostAccountKeyData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostAccountKeyDataWithPurpose
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// Determines whether extended (with chain code) or normal (without chain code) key is requested
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiPostAccountKeyDataWithPurposeFormat Format { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        public string Purpose { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostAccountKeyDataWithPurpose FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostAccountKeyDataWithPurpose>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSettingsPutData
    {
        /// <summary>
        /// Settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("settings")]
        public Settings Settings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSettingsPutData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSettingsPutData>(data, options);

        }

    }

    /// <summary>
    /// The status of the SMASH server. Possible values are:
    /// <br/>
    /// <br/>health                  | description
    /// <br/>---                     | ---
    /// <br/>`"available"`           | server is awaiting your requests
    /// <br/>`"unavailable"`         | server is running, but currently unavailable, try again in a short time
    /// <br/>`"unreachable"`         | server could not be reached or didn't return a health status
    /// <br/>`"no_smash_configured"` | SMASH is currently not configured, adjust the Settings first
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiHealthCheck
    {

        [System.Text.Json.Serialization.JsonPropertyName("health")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiHealthCheckHealth Health { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiHealthCheck FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiHealthCheck>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletPutPassphraseOldPassphraseData
    {
        /// <summary>
        /// The current master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("old_passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Old_passphrase { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("new_passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object New_passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletPutPassphraseOldPassphraseData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletPutPassphraseOldPassphraseData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletPutPassphraseMnemonicData
    {
        /// <summary>
        /// An optional passphrase used to encrypt the mnemonic sentence.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_second_factor")]
        [System.ComponentModel.DataAnnotations.MinLength(9)]
        [System.ComponentModel.DataAnnotations.MaxLength(12)]
        public System.Collections.Generic.ICollection<string> Mnemonic_second_factor { get; set; } = default!;

        /// <summary>
        /// The mnemonic list of words to restore the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mnemonic_sentence")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Mnemonic_sentence { get; set; } = default!;

        /// <summary>
        /// The new master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("new_passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object New_passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletPutPassphraseMnemonicData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletPutPassphraseMnemonicData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiWalletPutPassphraseData
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiWalletPutPassphraseData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiWalletPutPassphraseData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiByronWalletPutPassphraseData
    {
        /// <summary>
        /// The current passphrase if present.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("old_passphrase")]
        public object Old_passphrase { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("new_passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object New_passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiByronWalletPutPassphraseData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiByronWalletPutPassphraseData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiDecodeTransactionPostData
    {
        /// <summary>
        /// The metadata passphrase for decryption.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decrypt_metadata")]
        public object Decrypt_metadata { get; set; } = default!;

        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiDecodeTransactionPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiDecodeTransactionPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiSignTransactionPostData
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiSignTransactionPostDataEncoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiSignTransactionPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiSignTransactionPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostTransactionDataByron
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments3> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments3>();

        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostTransactionDataByron FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostTransactionDataByron>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostTransactionData
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments4> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments4>();

        /// <summary>
        /// When provided, instruments the server to automatically withdraw rewards from the source wallet when they are deemed
        /// <br/>sufficient (i.e. they contribute to the balance for at least as much as they cost).
        /// <br/>
        /// <br/>As a consequence, the resulting transaction may or may not have a withdrawal object. Summarizing:
        /// <br/>
        /// <br/>withdrawal field | reward balance | result
        /// <br/>---              | ---            | ---
        /// <br/>`null`           | too small      | ✓ no withdrawals generated
        /// <br/>`null`           | big enough     | ✓ no withdrawals generated
        /// <br/>`"self"`         | too small      | ✓ no withdrawals generated
        /// <br/>`"self"`         | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiPostTransactionDataWithdrawal Withdrawal { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata8 Metadata { get; set; } = default!;

        /// <summary>
        /// The TTL (time to live) is the time period in which the transaction
        /// <br/>will be accepted into node mempools.
        /// <br/>
        /// <br/>After the TTL has lapsed, the transaction is considered
        /// <br/>expired. At this point, nodes will give up on broadcasting the
        /// <br/>transaction, and the wallet will release the funds allocated to
        /// <br/>the transaction so they can be used for other payments.
        /// <br/>
        /// <br/>The TTL should be long enough that the transaction has time to be
        /// <br/>propagated through the network and confirmed, but short enough so
        /// <br/>that - in the event of failures - UTxO are returned to the wallet
        /// <br/>in a timely manner.
        /// <br/>
        /// <br/>The TTL value is given in seconds. It will be converted to a slot
        /// <br/>number internally.
        /// <br/>
        /// <br/>If the TTL is not provided for a payment, a reasonable default
        /// <br/>value will be used.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time_to_live")]
        public object Time_to_live { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostTransactionData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostTransactionData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostRedemptionData
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments5> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments5>();

        /// <summary>
        /// When provided, attempts to withdraw rewards from the default stake address
        /// <br/>corresponding to the given mnemonic.
        /// <br/>
        /// <br/>Should the rewards be null or too small to be worth withdrawing (i.e. the
        /// <br/>cost of adding them into the transaction is more than their own intrinsic
        /// <br/>value), the server will reject the request with a
        /// <br/>`withdrawal_not_beneficial` error.
        /// <br/>
        /// <br/>withdrawal field    | reward balance | result
        /// <br/>---                 | ---            | ---
        /// <br/>any recovery phrase | too small      | x Error 403 `withdrawal_not_beneficial`
        /// <br/>any recovery phrase | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Withdrawal { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostRedemptionData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostRedemptionData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostTransactionFeeDataByron
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments6> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments6>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostTransactionFeeDataByron FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostTransactionFeeDataByron>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostTransactionFeeData
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments7> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments7>();

        /// <summary>
        /// When provided, instruments the server to automatically withdraw rewards from the source wallet when they are deemed
        /// <br/>sufficient (i.e. they contribute to the balance for at least as much as they cost).
        /// <br/>
        /// <br/>As a consequence, the resulting transaction may or may not have a withdrawal object. Summarizing:
        /// <br/>
        /// <br/>withdrawal field | reward balance | result
        /// <br/>---              | ---            | ---
        /// <br/>`null`           | too small      | ✓ no withdrawals generated
        /// <br/>`null`           | big enough     | ✓ no withdrawals generated
        /// <br/>`"self"`         | too small      | ✓ no withdrawals generated
        /// <br/>`"self"`         | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiPostTransactionFeeDataWithdrawal Withdrawal { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata9 Metadata { get; set; } = default!;

        /// <summary>
        /// The TTL (time to live) is the time period in which the transaction
        /// <br/>will be accepted into node mempools.
        /// <br/>
        /// <br/>After the TTL has lapsed, the transaction is considered
        /// <br/>expired. At this point, nodes will give up on broadcasting the
        /// <br/>transaction, and the wallet will release the funds allocated to
        /// <br/>the transaction so they can be used for other payments.
        /// <br/>
        /// <br/>The TTL should be long enough that the transaction has time to be
        /// <br/>propagated through the network and confirmed, but short enough so
        /// <br/>that - in the event of failures - UTxO are returned to the wallet
        /// <br/>in a timely manner.
        /// <br/>
        /// <br/>The TTL value is given in seconds. It will be converted to a slot
        /// <br/>number internally.
        /// <br/>
        /// <br/>If the TTL is not provided for a payment, a reasonable default
        /// <br/>value will be used.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("time_to_live")]
        public object Time_to_live { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostTransactionFeeData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostTransactionFeeData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostRedemptionFeeData
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments8> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments8>();

        /// <summary>
        /// When provided, attempts to withdraw rewards from the default stake address
        /// <br/>corresponding to the given mnemonic.
        /// <br/>
        /// <br/>Should the rewards be null or too small to be worth withdrawing (i.e. the
        /// <br/>cost of adding them into the transaction is more than their own intrinsic
        /// <br/>value), the server will reject the request with a
        /// <br/>`withdrawal_not_beneficial` error.
        /// <br/>
        /// <br/>withdrawal field    | reward balance | result
        /// <br/>---                 | ---            | ---
        /// <br/>any recovery phrase | too small      | x Error 403 `withdrawal_not_beneficial`
        /// <br/>any recovery phrase | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Withdrawal { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostRedemptionFeeData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostRedemptionFeeData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPostRandomAddressData
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// An address derivation index.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_index")]
        [System.ComponentModel.DataAnnotations.Range(0D, 4294967295D)]
        public double Address_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPostRandomAddressData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPostRandomAddressData>(data, options);

        }

    }

    /// <summary>
    /// Specify only invalid_before or invalid_hereafter or both.
    /// <br/>
    /// <br/>Please note that, if not set, the default values are:
    /// <br/>  - `"invalid_before": {"quantity":0, "unit":"slot"}`
    /// <br/>  - `"invalid_hereafter":{"quantity":7200, "unit":"second"}`
    /// <br/>
    /// <br/>Which translates to 2h transaction TTL.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiValidityInterval
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        public object Invalid_before { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        public object Invalid_hereafter { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiValidityInterval FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiValidityInterval>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiPaymentDestination
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiPaymentDestination FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiPaymentDestination>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMintData
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiving_address")]
        public string Receiving_address { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMintData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiMintData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiBurnData
    {
        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiBurnData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiBurnData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMintBurnOperation
    {

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint3 Mint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMintBurnOperation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiMintBurnOperation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiMintBurnData
    {

        [System.Text.Json.Serialization.JsonPropertyName("policy_script_template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Policy_script_template { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public Operation Operation { get; set; } = new Operation();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiMintBurnData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiMintBurnData>(data, options);

        }

    }

    /// <summary>
    /// At least one field needs to be chosen
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiConstructTransactionData
    {

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        public object Payments { get; set; } = default!;

        /// <summary>
        /// When provided, instruments the server to automatically withdraw rewards from the source wallet when they are deemed
        /// <br/>sufficient (i.e. they contribute to the balance for at least as much as they cost).
        /// <br/>
        /// <br/>As a consequence, the resulting transaction may or may not have a withdrawal object. Summarizing:
        /// <br/>
        /// <br/>withdrawal field | reward balance | result
        /// <br/>---              | ---            | ---
        /// <br/>`null`           | too small      | ✓ no withdrawals generated
        /// <br/>`null`           | big enough     | ✓ no withdrawals generated
        /// <br/>`"self"`         | too small      | ✓ no withdrawals generated
        /// <br/>`"self"`         | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiConstructTransactionDataWithdrawal Withdrawal { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata10 Metadata { get; set; } = default!;

        /// <summary>
        /// If used then metadata in a transaction is going to be encrypted by
        /// <br/>AES 256 using CBC mode which is a default method (called base).
        /// <br/>PBKDF2 password stretching is used to get a 32-byte secret key and a 16-byte
        /// <br/>initialization vector required in the cipher.
        /// <br/>PBKDF2 encryption algorithm using HMAC with the SHA256 hash algorithm is employed,
        /// <br/>and 10000 iterations to get key and iv pair are used.
        /// <br/>Cipher algorithm uses 8-byte salt, PKCS#7 padding as specified in
        /// <br/>https://datatracker.ietf.org/doc/html/rfc5652#section-6.3 is applied.
        /// <br/>Only metadata value under `msg` field is encrypted. If `msg` field is missing error
        /// <br/>will be emitted.
        /// <br/>Metadata encryption is in accordance to CIP 83 (https://cips.cardano.org/cips/cip83/).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encrypt_metadata")]
        public Encrypt_metadata Encrypt_metadata { get; set; } = default!;

        /// <summary>
        /// An entry for each unique asset to be minted and/or burned,
        /// <br/>containing helpful information.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mint_burn")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Mint_burn> Mint_burn { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vote")]
        public Vote Vote { get; set; } = default!;

        /// <summary>
        /// &lt;p&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>A list of staking actions (joining, rejoining or leaving from stake pools).
        /// <br/>Using '0H' stake key index is supported at this moment. This will change with
        /// <br/>multi-account support.
        /// <br/>Only one delegation action can be used.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegations")]
        public System.Collections.Generic.ICollection<object> Delegations { get; set; } = default!;

        /// <summary>
        /// Specify only invalid_before or invalid_hereafter or both.
        /// <br/>
        /// <br/>Please note that, if not set, the default values are:
        /// <br/>  - `"invalid_before": {"quantity":0, "unit":"slot"}`
        /// <br/>  - `"invalid_hereafter":{"quantity":7200, "unit":"second"}`
        /// <br/>
        /// <br/>Which translates to 2h transaction TTL.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval3 Validity_interval { get; set; } = default!;

        /// <summary>
        /// Optional policy script template that could be used as a script reference
        /// <br/>in another transaction.
        /// <br/>In the current transaction, the script will be included as
        /// <br/>the first output (`index = 0`).
        /// <br/>The script is constructed by replacing the cosigner
        /// <br/>with the policy public key of the wallet.
        /// <br/>In future transactions, the reference script can be used
        /// <br/>by any wallet multiple times
        /// <br/>by referencing the current transaction `id` and `index = 0`.
        /// <br/>The script template must contain a single cosigner only, but it may include time locks.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference_policy_script_template")]
        public object Reference_policy_script_template { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiConstructTransactionDataEncoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiConstructTransactionData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiConstructTransactionData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CredentialValue
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CredentialValue FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CredentialValue>(data, options);

        }

    }

    /// <summary>
    /// Leaf value for a script designating a required verification key hash.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScriptValue
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ScriptValue FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ScriptValue>(data, options);

        }

    }

    /// <summary>
    /// Leaf value for a script designating a cosigner co-sharing the script.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScriptTemplateValue
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ScriptTemplateValue FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ScriptTemplateValue>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionMetadataValue
    {

        [System.Text.Json.Serialization.JsonPropertyName("string")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string String { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TransactionMetadataValue FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<TransactionMetadataValue>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionMetadataValueNoSchema
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TransactionMetadataValueNoSchema FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<TransactionMetadataValueNoSchema>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiGetSettings
    {
        /// <summary>
        /// Pool metadata source. This sets the metadata fetching strategy.
        /// <br/>
        /// <br/>Possible values are
        /// <br/>  * none -&gt; no fetching
        /// <br/>  * direct -&gt; direct fetching
        /// <br/>  * uri -&gt; use SMASH server
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_metadata_source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(none|direct|https?:\/\/[a-zA-Z0-9-_~.]+(:[0-9]+)?/?)$")]
        public string Pool_metadata_source { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiGetSettings FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiGetSettings>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SomeByronWalletPostData
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SomeByronWalletPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SomeByronWalletPostData>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiOurStakeKey
    {
        /// <summary>
        /// A soft derivation index.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int Index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake Stake { get; set; } = new Stake();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward_balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reward_balance Reward_balance { get; set; } = new Reward_balance();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation3 Delegation { get; set; } = new Delegation3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiOurStakeKey FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiOurStakeKey>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiForeignStakeKey
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake2 Stake { get; set; } = new Stake2();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward_balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reward_balance2 Reward_balance { get; set; } = new Reward_balance2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiForeignStakeKey FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiForeignStakeKey>(data, options);

        }

    }

    /// <summary>
    /// The absence of a stake key. The `stake` field shows how much of the wallet funds
    /// <br/>are not associated with an identifiable stake key.
    /// <br/>
    /// <br/>Most likely, these funds are associated with enterprise addresses lacking staking rights.
    /// <br/>But they /could/ also be associate with more rare types of addresses like pointer addresses.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiNullStakeKey
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake3 Stake { get; set; } = new Stake3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiNullStakeKey FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiNullStakeKey>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiStakeKeys
    {
        /// <summary>
        /// Stake keys belonging to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ours")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Ours> Ours { get; set; } = new System.Collections.ObjectModel.Collection<Ours>();

        /// <summary>
        /// Stake keys found in the wallet's UTxO, but does not belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreign")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Foreign> Foreign { get; set; } = new System.Collections.ObjectModel.Collection<Foreign>();

        /// <summary>
        /// The absence of a stake key. The `stake` field shows how much of the wallet funds
        /// <br/>are not associated with an identifiable stake key.
        /// <br/>
        /// <br/>Most likely, these funds are associated with enterprise addresses lacking staking rights.
        /// <br/>But they /could/ also be associate with more rare types of addresses like pointer addresses.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("none")]
        [System.ComponentModel.DataAnnotations.Required]
        public None None { get; set; } = new None();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiStakeKeys FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiStakeKeys>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiRedeemerSpending
    {

        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiRedeemerSpendingPurpose Purpose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("input")]
        [System.ComponentModel.DataAnnotations.Required]
        public Input Input { get; set; } = new Input();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiRedeemerSpending FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiRedeemerSpending>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiRedeemerMinting
    {

        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiRedeemerMintingPurpose Purpose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(56)]
        public string Policy_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiRedeemerMinting FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiRedeemerMinting>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiRedeemerRewarding
    {

        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiRedeemerRewardingPurpose Purpose { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiRedeemerRewarding FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiRedeemerRewarding>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiRedeemer
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiRedeemer FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiRedeemer>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiBalanceTransactionPostData
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        /// <summary>
        /// Mapping from inputs (`id`, `ix`) in the supplied `transaction` binary to outputs (`amount`, `assets`, ...). It is not required to include inputs present in the `cardano-node` UTxO, as `cardano-wallet` will automatically query for them.
        /// <br/>
        /// <br/>In other words, this field can be left empty unless the supplied `transaction` contains inputs referring to pending transactions.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        public System.Collections.Generic.ICollection<inputs2> Inputs { get; set; } = default!;

        /// <summary>
        /// A list of redeemers data with their purpose. The redeemers in the `transaction` binary will be overwritten by this value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("redeemers")]
        public System.Collections.Generic.ICollection<object> Redeemers { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ApiBalanceTransactionPostDataEncoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiBalanceTransactionPostData FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiBalanceTransactionPostData>(data, options);

        }

    }

    /// <summary>
    /// A Block Header.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiBlockHeader
    {
        /// <summary>
        /// The hash of a block
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("header_hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Header_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slot_no")]
        [System.ComponentModel.DataAnnotations.Required]
        public Slot_no Slot_no { get; set; } = new Slot_no();

        [System.Text.Json.Serialization.JsonPropertyName("block_height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Block_height Block_height { get; set; } = new Block_height();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApiBlockHeader FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApiBlockHeader>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Role
    {

        [System.Runtime.Serialization.EnumMember(Value = @"utxo_external")]
        Utxo_external = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"utxo_internal")]
        Utxo_internal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mutable_account")]
        Mutable_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata11 Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("one_change_address_mode")]
        public bool One_change_address_mode { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Order
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ascending")]
        Ascending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"descending")]
        Descending = 1,

    }

    /// <summary>
    /// At least one field needs to be chosen
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        public object Payments { get; set; } = default!;

        /// <summary>
        /// When provided, instruments the server to automatically withdraw rewards from the source wallet when they are deemed
        /// <br/>sufficient (i.e. they contribute to the balance for at least as much as they cost).
        /// <br/>
        /// <br/>As a consequence, the resulting transaction may or may not have a withdrawal object. Summarizing:
        /// <br/>
        /// <br/>withdrawal field | reward balance | result
        /// <br/>---              | ---            | ---
        /// <br/>`null`           | too small      | ✓ no withdrawals generated
        /// <br/>`null`           | big enough     | ✓ no withdrawals generated
        /// <br/>`"self"`         | too small      | ✓ no withdrawals generated
        /// <br/>`"self"`         | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body3Withdrawal Withdrawal { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata12 Metadata { get; set; } = default!;

        /// <summary>
        /// If used then metadata in a transaction is going to be encrypted by
        /// <br/>AES 256 using CBC mode which is a default method (called base).
        /// <br/>PBKDF2 password stretching is used to get a 32-byte secret key and a 16-byte
        /// <br/>initialization vector required in the cipher.
        /// <br/>PBKDF2 encryption algorithm using HMAC with the SHA256 hash algorithm is employed,
        /// <br/>and 10000 iterations to get key and iv pair are used.
        /// <br/>Cipher algorithm uses 8-byte salt, PKCS#7 padding as specified in
        /// <br/>https://datatracker.ietf.org/doc/html/rfc5652#section-6.3 is applied.
        /// <br/>Only metadata value under `msg` field is encrypted. If `msg` field is missing error
        /// <br/>will be emitted.
        /// <br/>Metadata encryption is in accordance to CIP 83 (https://cips.cardano.org/cips/cip83/).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encrypt_metadata")]
        public Encrypt_metadata2 Encrypt_metadata { get; set; } = default!;

        /// <summary>
        /// An entry for each unique asset to be minted and/or burned,
        /// <br/>containing helpful information.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mint_burn")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<mint_burn> Mint_burn { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vote")]
        public Vote2 Vote { get; set; } = default!;

        /// <summary>
        /// &lt;p&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>A list of staking actions (joining, rejoining or leaving from stake pools).
        /// <br/>Using '0H' stake key index is supported at this moment. This will change with
        /// <br/>multi-account support.
        /// <br/>Only one delegation action can be used.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegations")]
        public System.Collections.Generic.ICollection<object> Delegations { get; set; } = default!;

        /// <summary>
        /// Specify only invalid_before or invalid_hereafter or both.
        /// <br/>
        /// <br/>Please note that, if not set, the default values are:
        /// <br/>  - `"invalid_before": {"quantity":0, "unit":"slot"}`
        /// <br/>  - `"invalid_hereafter":{"quantity":7200, "unit":"second"}`
        /// <br/>
        /// <br/>Which translates to 2h transaction TTL.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval4 Validity_interval { get; set; } = default!;

        /// <summary>
        /// Optional policy script template that could be used as a script reference
        /// <br/>in another transaction.
        /// <br/>In the current transaction, the script will be included as
        /// <br/>the first output (`index = 0`).
        /// <br/>The script is constructed by replacing the cosigner
        /// <br/>with the policy public key of the wallet.
        /// <br/>In future transactions, the reference script can be used
        /// <br/>by any wallet multiple times
        /// <br/>by referencing the current transaction `id` and `index = 0`.
        /// <br/>The script template must contain a single cosigner only, but it may include time locks.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference_policy_script_template")]
        public object Reference_policy_script_template { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body3Encoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body4Encoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// The metadata passphrase for decryption.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decrypt_metadata")]
        public object Decrypt_metadata { get; set; } = default!;

        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// Determines whether extended (with chain code) or normal (without chain code) key is requested
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body6Format Format { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("purpose")]
        public string Purpose { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Role2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"utxo_external")]
        Utxo_external = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"utxo_internal")]
        Utxo_internal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mutable_account")]
        Mutable_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body7
    {

        [System.Text.Json.Serialization.JsonPropertyName("policy_script_template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Policy_script_template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body8
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body8>(data, options);

        }

    }

    /// <summary>
    /// The maintenance action to carry out, current values are
    /// <br/>  - gc_stake_pools -&gt; trigger looking up delisted pools from the remote SMASH server
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body9
    {

        [System.Text.Json.Serialization.JsonPropertyName("maintenance_action")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body9Maintenance_action Maintenance_action { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body10
    {
        /// <summary>
        /// The source wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body11
    {
        /// <summary>
        /// The source wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DrepId
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body12
    {
        /// <summary>
        /// The source wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body13
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// The recipient addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body14
    {
        /// <summary>
        /// The recipient addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body15
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        /// <summary>
        /// Mapping from inputs (`id`, `ix`) in the supplied `transaction` binary to outputs (`amount`, `assets`, ...). It is not required to include inputs present in the `cardano-node` UTxO, as `cardano-wallet` will automatically query for them.
        /// <br/>
        /// <br/>In other words, this field can be left empty unless the supplied `transaction` contains inputs referring to pending transactions.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        public System.Collections.Generic.ICollection<inputs3> Inputs { get; set; } = default!;

        /// <summary>
        /// A list of redeemers data with their purpose. The redeemers in the `transaction` binary will be overwritten by this value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("redeemers")]
        public System.Collections.Generic.ICollection<object> Redeemers { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body15Encoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body16
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body17
    {
        /// <summary>
        /// The current passphrase if present.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("old_passphrase")]
        public object Old_passphrase { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("new_passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object New_passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body18
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// An address derivation index.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_index")]
        [System.ComponentModel.DataAnnotations.Range(0D, 4294967295D)]
        public double Address_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body19
    {
        /// <summary>
        /// The imported addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body20
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments9> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments9>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body21
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments10> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments10>();

        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Order2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ascending")]
        Ascending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"descending")]
        Descending = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body22
    {
        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<payments11> Payments { get; set; } = new System.Collections.ObjectModel.Collection<payments11>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body23
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// The recipient addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body24
    {
        /// <summary>
        /// The recipient addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Addresses { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body25
    {

        [System.Text.Json.Serialization.JsonPropertyName("payment")]
        public object Payment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        public object Stake { get; set; } = default!;

        /// <summary>
        /// Script validation level. Required validation sifts off scripts that would not
        /// <br/>be accepted by the ledger. Recommended level filters out scripts that do not pass
        /// <br/>required validation and additionally when:
        /// <br/>  * 'all' is non-empty
        /// <br/>  * there are redundant timelocks in a given level
        /// <br/>  * there are no duplicated verification keys in a given level
        /// <br/>  * 'at_least' coefficient is positive
        /// <br/>  * 'all', 'any' are non-empty and `'at_least' has no less elements in the list
        /// <br/>     than the coefficient after timelocks are filtered out.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body25Validation Validation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body26
    {
        /// <summary>
        /// Settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("settings")]
        public Settings2 Settings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body27
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("one_change_address_mode")]
        public bool One_change_address_mode { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body27>(data, options);

        }

    }

    /// <summary>
    /// At least one field needs to be chosen
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body28
    {

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        public object Payments { get; set; } = default!;

        /// <summary>
        /// When provided, instruments the server to automatically withdraw rewards from the source wallet when they are deemed
        /// <br/>sufficient (i.e. they contribute to the balance for at least as much as they cost).
        /// <br/>
        /// <br/>As a consequence, the resulting transaction may or may not have a withdrawal object. Summarizing:
        /// <br/>
        /// <br/>withdrawal field | reward balance | result
        /// <br/>---              | ---            | ---
        /// <br/>`null`           | too small      | ✓ no withdrawals generated
        /// <br/>`null`           | big enough     | ✓ no withdrawals generated
        /// <br/>`"self"`         | too small      | ✓ no withdrawals generated
        /// <br/>`"self"`         | big enough     | ✓ withdrawal generated
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawal")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body28Withdrawal Withdrawal { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata13 Metadata { get; set; } = default!;

        /// <summary>
        /// If used then metadata in a transaction is going to be encrypted by
        /// <br/>AES 256 using CBC mode which is a default method (called base).
        /// <br/>PBKDF2 password stretching is used to get a 32-byte secret key and a 16-byte
        /// <br/>initialization vector required in the cipher.
        /// <br/>PBKDF2 encryption algorithm using HMAC with the SHA256 hash algorithm is employed,
        /// <br/>and 10000 iterations to get key and iv pair are used.
        /// <br/>Cipher algorithm uses 8-byte salt, PKCS#7 padding as specified in
        /// <br/>https://datatracker.ietf.org/doc/html/rfc5652#section-6.3 is applied.
        /// <br/>Only metadata value under `msg` field is encrypted. If `msg` field is missing error
        /// <br/>will be emitted.
        /// <br/>Metadata encryption is in accordance to CIP 83 (https://cips.cardano.org/cips/cip83/).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encrypt_metadata")]
        public Encrypt_metadata3 Encrypt_metadata { get; set; } = default!;

        /// <summary>
        /// An entry for each unique asset to be minted and/or burned,
        /// <br/>containing helpful information.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mint_burn")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<mint_burn2> Mint_burn { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vote")]
        public Vote3 Vote { get; set; } = default!;

        /// <summary>
        /// &lt;p&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;
        /// <br/>
        /// <br/>A list of staking actions (joining, rejoining or leaving from stake pools).
        /// <br/>Using '0H' stake key index is supported at this moment. This will change with
        /// <br/>multi-account support.
        /// <br/>Only one delegation action can be used.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegations")]
        public System.Collections.Generic.ICollection<object> Delegations { get; set; } = default!;

        /// <summary>
        /// Specify only invalid_before or invalid_hereafter or both.
        /// <br/>
        /// <br/>Please note that, if not set, the default values are:
        /// <br/>  - `"invalid_before": {"quantity":0, "unit":"slot"}`
        /// <br/>  - `"invalid_hereafter":{"quantity":7200, "unit":"second"}`
        /// <br/>
        /// <br/>Which translates to 2h transaction TTL.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval5 Validity_interval { get; set; } = default!;

        /// <summary>
        /// Optional policy script template that could be used as a script reference
        /// <br/>in another transaction.
        /// <br/>In the current transaction, the script will be included as
        /// <br/>the first output (`index = 0`).
        /// <br/>The script is constructed by replacing the cosigner
        /// <br/>with the policy public key of the wallet.
        /// <br/>In future transactions, the reference script can be used
        /// <br/>by any wallet multiple times
        /// <br/>by referencing the current transaction `id` and `index = 0`.
        /// <br/>The script template must contain a single cosigner only, but it may include time locks.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference_policy_script_template")]
        public object Reference_policy_script_template { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body28Encoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body29
    {
        /// <summary>
        /// The metadata passphrase for decryption.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decrypt_metadata")]
        public object Decrypt_metadata { get; set; } = default!;

        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body30
    {
        /// <summary>
        /// The wallet's master passphrase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Passphrase { get; set; } = default!;

        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        /// <summary>
        /// Encoding of transaction CBOR returned in response (base64 by default).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("encoding")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body30Encoding Encoding { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Order3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ascending")]
        Ascending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"descending")]
        Descending = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body31
    {
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 10)]
        public string Passphrase { get; set; } = default!;

        /// <summary>
        /// Determines whether extended (with chain code) or normal (without chain code) key is requested
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Body31Format Format { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Role3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"utxo_external")]
        Utxo_external = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"utxo_internal")]
        Utxo_internal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"mutable_account")]
        Mutable_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        /// <summary>
        /// Wallet current Ada balance(s).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance4 Balance { get; set; } = new Balance4();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets5 Assets { get; set; } = new Assets5();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation4 Delegation { get; set; } = new Delegation4();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase4 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip4 Tip { get; set; } = new Tip4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        /// <summary>
        /// Wallet current Ada balance(s).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance5 Balance { get; set; } = new Balance5();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets6 Assets { get; set; } = new Assets6();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation5 Delegation { get; set; } = new Delegation5();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase5 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip5 Tip { get; set; } = new Tip5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        /// <summary>
        /// In the Mary era of Cardano, UTxO may contain native assets. These
        /// <br/>assets are represented on-chain by opaque identifiers which are
        /// <br/>meaningless to end-users. Therefore, user-facing metadata
        /// <br/>regarding each token must be stored off-chain, in a metadata
        /// <br/>registry.
        /// <br/>
        /// <br/>Token creators may publish metadata into the registry and client
        /// <br/>applications can consume these metadata for display to end
        /// <br/>users. This will work in a similar way to how it is done for stake
        /// <br/>pool metadata.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata14 Metadata { get; set; } = default!;

        /// <summary>
        /// If there was an error fetching metadata from the server,
        /// <br/>this will be set to one of `fetch` or `parse`, to indicate
        /// <br/>the kind of error.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata_error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Metadata_error Metadata_error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        /// <summary>
        /// In the Mary era of Cardano, UTxO may contain native assets. These
        /// <br/>assets are represented on-chain by opaque identifiers which are
        /// <br/>meaningless to end-users. Therefore, user-facing metadata
        /// <br/>regarding each token must be stored off-chain, in a metadata
        /// <br/>registry.
        /// <br/>
        /// <br/>Token creators may publish metadata into the registry and client
        /// <br/>applications can consume these metadata for display to end
        /// <br/>users. This will work in a similar way to how it is done for stake
        /// <br/>pool metadata.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata15 Metadata { get; set; } = default!;

        /// <summary>
        /// If there was an error fetching metadata from the server,
        /// <br/>this will be set to one of `fetch` or `parse`, to indicate
        /// <br/>the kind of error.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata_error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response2Metadata_error Metadata_error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        /// <summary>
        /// In the Mary era of Cardano, UTxO may contain native assets. These
        /// <br/>assets are represented on-chain by opaque identifiers which are
        /// <br/>meaningless to end-users. Therefore, user-facing metadata
        /// <br/>regarding each token must be stored off-chain, in a metadata
        /// <br/>registry.
        /// <br/>
        /// <br/>Token creators may publish metadata into the registry and client
        /// <br/>applications can consume these metadata for display to end
        /// <br/>users. This will work in a similar way to how it is done for stake
        /// <br/>pool metadata.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata16 Metadata { get; set; } = default!;

        /// <summary>
        /// If there was an error fetching metadata from the server,
        /// <br/>this will be set to one of `fetch` or `parse`, to indicate
        /// <br/>the kind of error.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata_error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response3Metadata_error Metadata_error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public Total2 Total { get; set; } = new Total2();

        [System.Text.Json.Serialization.JsonPropertyName("scale")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response4Scale Scale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distribution")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, int> Distribution { get; set; } = new System.Collections.Generic.Dictionary<string, int>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {
        /// <summary>
        /// The complete set of UTxO entries associated with a wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entries")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<entries> Entries { get; set; } = new System.Collections.ObjectModel.Collection<entries>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        /// <summary>
        /// Wallet current Ada balance(s).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance6 Balance { get; set; } = new Balance6();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets7 Assets { get; set; } = new Assets7();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation6 Delegation { get; set; } = new Delegation6();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase6 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip6 Tip { get; set; } = new Tip6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        /// <summary>
        /// Wallet current Ada balance(s).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance7 Balance { get; set; } = new Balance7();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets8 Assets { get; set; } = new Assets8();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation7 Delegation { get; set; } = new Delegation7();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase7 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip7 Tip { get; set; } = new Tip7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_min")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_min2 Estimated_min { get; set; } = new Estimated_min2();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_max")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_max2 Estimated_max { get; set; } = new Estimated_max2();

        /// <summary>
        /// A list of minimum coin values that each output in a payment must satisfy. The values themselves depends on two things:
        /// <br/>
        /// <br/>  - (a) Some updatable protocol parameters fixed by the network.
        /// <br/>  - (b) The nature of the outputs (i.e. the kind of assets it includes).
        /// <br/>
        /// <br/>The list is a direct 1:1 mapping of the requested outputs. Said differently, it has the **same number of items** and **items
        /// <br/>are ordered in the same way** as **requested outputs** are ordered. In the case where there's no explicitly requested outputs (e.g.
        /// <br/>when calculating fee for delegation), this list is empty.
        /// <br/>
        /// <br/>For example, an output containing only `Ada` may require to be of at least `1 Ada`. An output containing only an hypothetical `AppleCoin`
        /// <br/>may require to also carry a minimum of `1.2 Ada`. Note that no matter what, a minimum coin value is always given in Lovelace / Ada.
        /// <br/>
        /// <br/>&gt; ℹ️ This mechanism is used by the protocol to protect against flooding of the network with worthless assets. By requiring a minimum coin value to every
        /// <br/>UTxO, they are given an intrinsic value indexed itself on the value of Ada.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minimum_coins")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<minimum_coins> Minimum_coins { get; set; } = new System.Collections.ObjectModel.Collection<minimum_coins>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit2 Deposit { get; set; } = new Deposit2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee4 Fee { get; set; } = new Fee4();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken2 Deposit_taken { get; set; } = new Deposit_taken2();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned2 Deposit_returned { get; set; } = new Deposit_returned2();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response9Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs4> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs4>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs2> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs2>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral2> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals2> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals2>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response9Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata17 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response9Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint4 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn3 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval6 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous3
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee5 Fee { get; set; } = new Fee5();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken3 Deposit_taken { get; set; } = new Deposit_taken3();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned3 Deposit_returned { get; set; } = new Deposit_returned3();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs5> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs5>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs3> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs3>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral3> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs2> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals3> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals3>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata18 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint5 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn4 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval7 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee6 Fee { get; set; } = new Fee6();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken4 Deposit_taken { get; set; } = new Deposit_taken4();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned4 Deposit_returned { get; set; } = new Deposit_returned4();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response10Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs6> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs6>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs4> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs4>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral4> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs3> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals4> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals4>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response10Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata19 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response10Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint6 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn5 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval8 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response11
    {
        /// <summary>
        /// Occurs when attempting to delete a transaction which is neither pending nor expired.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response11Code Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("info")]
        public Info Info { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response12
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("coin_selection")]
        [System.ComponentModel.DataAnnotations.Required]
        public Coin_selection2 Coin_selection { get; set; } = new Coin_selection2();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee7 Fee { get; set; } = new Fee7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response13
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee8 Fee { get; set; } = new Fee8();

        /// <summary>
        /// Inputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Inputs { get; set; } = default!;

        /// <summary>
        /// Outputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Outputs { get; set; } = default!;

        /// <summary>
        /// Inputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public object Collateral { get; set; } = default!;

        /// <summary>
        /// Outputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        public object Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// Withdrawals that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mint7 Mint { get; set; } = new Mint7();

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        [System.ComponentModel.DataAnnotations.Required]
        public Burn6 Burn { get; set; } = new Burn6();

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata20 Metadata { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken2> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned2> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response13Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval9 Validity_interval { get; set; } = default!;

        /// <summary>
        /// Specifies the number of verification key and bootstrap wintesses.
        /// <br/>As scripts act as witnesses they are also included. Scripts can be specified
        /// <br/>and spent in a given transaction or defined to be consumed later.
        /// <br/>In the latter case they are defined in transaction outputs (feature possible from Babbage era)
        /// <br/>in one transaction and referenced in other later transaction(s). The script referencing
        /// <br/>is realized via including of reference in a reference input. If reference script
        /// <br/>is present here it included the form of the script and reference to be used later,
        /// <br/>ie. tx id and index of tx out where the script was included.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("witness_count")]
        [System.ComponentModel.DataAnnotations.Required]
        public Witness_count2 Witness_count { get; set; } = new Witness_count2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response14
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous4
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public State5 State { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response15
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response16
    {
        /// <summary>
        /// Stake keys belonging to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ours")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ours> Ours { get; set; } = new System.Collections.ObjectModel.Collection<ours>();

        /// <summary>
        /// Stake keys found in the wallet's UTxO, but does not belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("foreign")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<foreign> Foreign { get; set; } = new System.Collections.ObjectModel.Collection<foreign>();

        /// <summary>
        /// The absence of a stake key. The `stake` field shows how much of the wallet funds
        /// <br/>are not associated with an identifiable stake key.
        /// <br/>
        /// <br/>Most likely, these funds are associated with enterprise addresses lacking staking rights.
        /// <br/>But they /could/ also be associate with more rare types of addresses like pointer addresses.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("none")]
        [System.ComponentModel.DataAnnotations.Required]
        public None2 None { get; set; } = new None2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous5
    {
        /// <summary>
        /// A unique identifier for the pool.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metrics")]
        [System.ComponentModel.DataAnnotations.Required]
        public Metrics2 Metrics { get; set; } = new Metrics2();

        /// <summary>
        /// Estimated cost set by the pool operator when registering his pool.
        /// <br/>This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cost")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Cost { get; set; } = default!;

        /// <summary>
        /// Variable margin on the total reward given to an operator before splitting rewards between stakeholders.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("margin")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Margin { get; set; } = default!;

        /// <summary>
        /// Minimal stake amount that a stake pool is willing to honor.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't found the pool's registration cerificate yet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pledge")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pledge { get; set; } = default!;

        /// <summary>
        /// Information about the stake pool.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata21 Metadata { get; set; } = default!;

        /// <summary>
        /// The epoch in which a stake pool retires.
        /// <br/>
        /// <br/>May be omitted if the wallet hasn't yet found a retirement certificate
        /// <br/>for this stake pool.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("retirement")]
        public object Retirement { get; set; } = default!;

        /// <summary>
        /// Various flags applicable to stake pools. Possible flags:
        /// <br/>
        /// <br/>| flag     | description                                                                                                      |
        /// <br/>| ---      | ---                                                                                                              |
        /// <br/>| delisted | The pool is marked as delisted on a configured SMASH server; metadata for this pool have therefore been dropped. |
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("flags")]

        // TODO(system.text.json): Add string enum item converter
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<flags> Flags { get; set; } = new System.Collections.ObjectModel.Collection<flags>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response17
    {
        /// <summary>
        /// May occur when an endpoint requires the presence of a query parameter that is missing.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response17Code Code { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response18
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_min")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_min3 Estimated_min { get; set; } = new Estimated_min3();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_max")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_max3 Estimated_max { get; set; } = new Estimated_max3();

        /// <summary>
        /// A list of minimum coin values that each output in a payment must satisfy. The values themselves depends on two things:
        /// <br/>
        /// <br/>  - (a) Some updatable protocol parameters fixed by the network.
        /// <br/>  - (b) The nature of the outputs (i.e. the kind of assets it includes).
        /// <br/>
        /// <br/>The list is a direct 1:1 mapping of the requested outputs. Said differently, it has the **same number of items** and **items
        /// <br/>are ordered in the same way** as **requested outputs** are ordered. In the case where there's no explicitly requested outputs (e.g.
        /// <br/>when calculating fee for delegation), this list is empty.
        /// <br/>
        /// <br/>For example, an output containing only `Ada` may require to be of at least `1 Ada`. An output containing only an hypothetical `AppleCoin`
        /// <br/>may require to also carry a minimum of `1.2 Ada`. Note that no matter what, a minimum coin value is always given in Lovelace / Ada.
        /// <br/>
        /// <br/>&gt; ℹ️ This mechanism is used by the protocol to protect against flooding of the network with worthless assets. By requiring a minimum coin value to every
        /// <br/>UTxO, they are given an intrinsic value indexed itself on the value of Ada.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minimum_coins")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<minimum_coins2> Minimum_coins { get; set; } = new System.Collections.ObjectModel.Collection<minimum_coins2>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit3 Deposit { get; set; } = new Deposit3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response19
    {
        /// <summary>
        /// May occur when a transaction can't be balanced for fees.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response19Code Code { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response20
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee9 Fee { get; set; } = new Fee9();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken5 Deposit_taken { get; set; } = new Deposit_taken5();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned5 Deposit_returned { get; set; } = new Deposit_returned5();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response20Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs7> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs7>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs5> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs5>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral5> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs4> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals5> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals5>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response20Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata22 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response20Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint8 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn7 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval10 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response21
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee10 Fee { get; set; } = new Fee10();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken6 Deposit_taken { get; set; } = new Deposit_taken6();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned6 Deposit_returned { get; set; } = new Deposit_returned6();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response21Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs8> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs8>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs6> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs6>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral6> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs5> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals6> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals6>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response21Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata23 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response21Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint9 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn8 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval11 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response22
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee11 Fee { get; set; } = new Fee11();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken7 Deposit_taken { get; set; } = new Deposit_taken7();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned7 Deposit_returned { get; set; } = new Deposit_returned7();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response22Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs9> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs9>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs7> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs7>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral7> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs6> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals7> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals7>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response22Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata24 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response22Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint10 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn9 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval12 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response23
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs10> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs10>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs8> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs8>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change> Change { get; set; } = new System.Collections.ObjectModel.Collection<change>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral8> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals8> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken3> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned3> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous6
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee12 Fee { get; set; } = new Fee12();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken8 Deposit_taken { get; set; } = new Deposit_taken8();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned8 Deposit_returned { get; set; } = new Deposit_returned8();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Direction2 Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs11> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs11>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs9> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs9>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral9> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs7> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals9> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals9>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status2 Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata25 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Script_validity2? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint11 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn10 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval13 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response24
    {
        /// <summary>
        /// The complete set of selections required for a migration.
        /// <br/>
        /// <br/>Each selection is the basis for a single transaction.
        /// <br/>
        /// <br/>The ordering of selections within the list is not significant.
        /// <br/>After conversion into transactions, the transactions can be
        /// <br/>broadcast to the network in any order to perform the migration.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("selections")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<selections> Selections { get; set; } = new System.Collections.ObjectModel.Collection<selections>();

        /// <summary>
        /// The total amount to be paid in fees for a migration.
        /// <br/>
        /// <br/>This is the total sum of the fees of the individual selections.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total_fee { get; set; } = default!;

        /// <summary>
        /// The total balance of assets that **cannot** be migrated.
        /// <br/>
        /// <br/>The **ada** component of this balance is the total sum of all dust
        /// <br/>ada entries in the UTxO set. An ada entry is considered to be dust
        /// <br/>if its value is not large enough to pay for the marginal cost of
        /// <br/>including it in a transaction.
        /// <br/>
        /// <br/>The **assets** component of this balance is the total sum of all
        /// <br/>non-ada assets that cannot currently be migrated. Tokens of a
        /// <br/>non-ada asset cannot be migrated if there is insufficient ada
        /// <br/>available to pay for their inclusion in a transaction.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance_leftover")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Balance_leftover { get; set; } = default!;

        /// <summary>
        /// The total balance of assets that **can** be migrated.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance_selected")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Balance_selected { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response25
    {
        /// <summary>
        /// May occur when trying to migrate a wallet that is empty or full of dust.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response25Code Code { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response25>(data, options);

        }

    }

    /// <summary>
    /// An encoded transaction.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response26
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response27
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Byron wallet's current balance(s)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance8 Balance { get; set; } = new Balance8();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets9 Assets { get; set; } = new Assets9();

        /// <summary>
        /// Mechanism used for discovering addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discovery")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response27Discovery Discovery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase8 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip8 Tip { get; set; } = new Tip8();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous7
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Byron wallet's current balance(s)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance9 Balance { get; set; } = new Balance9();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets10 Assets { get; set; } = new Assets10();

        /// <summary>
        /// Mechanism used for discovering addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discovery")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Discovery Discovery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase9 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip9 Tip { get; set; } = new Tip9();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous8
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        /// <summary>
        /// In the Mary era of Cardano, UTxO may contain native assets. These
        /// <br/>assets are represented on-chain by opaque identifiers which are
        /// <br/>meaningless to end-users. Therefore, user-facing metadata
        /// <br/>regarding each token must be stored off-chain, in a metadata
        /// <br/>registry.
        /// <br/>
        /// <br/>Token creators may publish metadata into the registry and client
        /// <br/>applications can consume these metadata for display to end
        /// <br/>users. This will work in a similar way to how it is done for stake
        /// <br/>pool metadata.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata26 Metadata { get; set; } = default!;

        /// <summary>
        /// If there was an error fetching metadata from the server,
        /// <br/>this will be set to one of `fetch` or `parse`, to indicate
        /// <br/>the kind of error.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata_error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Metadata_error2 Metadata_error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response28
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        /// <summary>
        /// In the Mary era of Cardano, UTxO may contain native assets. These
        /// <br/>assets are represented on-chain by opaque identifiers which are
        /// <br/>meaningless to end-users. Therefore, user-facing metadata
        /// <br/>regarding each token must be stored off-chain, in a metadata
        /// <br/>registry.
        /// <br/>
        /// <br/>Token creators may publish metadata into the registry and client
        /// <br/>applications can consume these metadata for display to end
        /// <br/>users. This will work in a similar way to how it is done for stake
        /// <br/>pool metadata.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata27 Metadata { get; set; } = default!;

        /// <summary>
        /// If there was an error fetching metadata from the server,
        /// <br/>this will be set to one of `fetch` or `parse`, to indicate
        /// <br/>the kind of error.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata_error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response28Metadata_error Metadata_error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response29
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        /// <summary>
        /// In the Mary era of Cardano, UTxO may contain native assets. These
        /// <br/>assets are represented on-chain by opaque identifiers which are
        /// <br/>meaningless to end-users. Therefore, user-facing metadata
        /// <br/>regarding each token must be stored off-chain, in a metadata
        /// <br/>registry.
        /// <br/>
        /// <br/>Token creators may publish metadata into the registry and client
        /// <br/>applications can consume these metadata for display to end
        /// <br/>users. This will work in a similar way to how it is done for stake
        /// <br/>pool metadata.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata28 Metadata { get; set; } = default!;

        /// <summary>
        /// If there was an error fetching metadata from the server,
        /// <br/>this will be set to one of `fetch` or `parse`, to indicate
        /// <br/>the kind of error.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata_error")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response29Metadata_error Metadata_error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response30
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public Total3 Total { get; set; } = new Total3();

        [System.Text.Json.Serialization.JsonPropertyName("scale")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response30Scale Scale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distribution")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, int> Distribution { get; set; } = new System.Collections.Generic.Dictionary<string, int>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response31
    {
        /// <summary>
        /// The complete set of UTxO entries associated with a wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entries")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<entries2> Entries { get; set; } = new System.Collections.ObjectModel.Collection<entries2>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response32
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Byron wallet's current balance(s)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance10 Balance { get; set; } = new Balance10();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets11 Assets { get; set; } = new Assets11();

        /// <summary>
        /// Mechanism used for discovering addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discovery")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response32Discovery Discovery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase10 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip10 Tip { get; set; } = new Tip10();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response33
    {
        /// <summary>
        /// A unique identifier for the wallet
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 40)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Number of consecutive unused addresses allowed.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER:** Using values other than `20` automatically makes your wallet invalid with regards to BIP-44 address discovery. It means that you **will not** be able to fully restore
        /// <br/>your wallet in a different software which is strictly following BIP-44.
        /// <br/>
        /// <br/>Beside, using large gaps is **not recommended** as it may induce important performance degradations. Use at your own risks.
        /// <br/>
        /// <br/>**IMPORTANT DISCLAIMER 2:** There is no way to `import` addresses generated outside (e.g. using cardano-addresses) into the wallet.
        /// <br/>Wallet only discovers transactions on its used and unused addresses that are within its currently seen `address_pool_gap`.
        /// <br/>Transactions on addresses that "belong" to the wallet but happen to be beyond its `address_pool_gap` will not be visible to the wallet.
        /// <br/>This is a technical limitation of the industry standard [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki). See also [CIP-1852](https://github.com/cardano-foundation/CIPs/blob/master/CIP-1852/CIP-1852.md).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_pool_gap")]
        [System.ComponentModel.DataAnnotations.Range(10, 100000)]
        public int Address_pool_gap { get; set; } = 20;

        /// <summary>
        /// Wallet current Ada balance(s).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Balance11 Balance { get; set; } = new Balance11();

        /// <summary>
        /// Current non-Ada asset holdings of the wallet.
        /// <br/>
        /// <br/>The amount of assets available to spend may be less than the total
        /// <br/>unspent assets due to transaction change amounts which are yet to
        /// <br/>be fully confirmed (pending).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public Assets12 Assets { get; set; } = new Assets12();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation8 Delegation { get; set; } = new Delegation8();

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Information about the wallet's passphrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        public Passphrase11 Passphrase { get; set; } = default!;

        /// <summary>
        /// Whether a wallet is ready to use or still syncing
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required]
        public object State { get; set; } = default!;

        /// <summary>
        /// A reference to a particular time slot, and the block height at that point.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tip11 Tip { get; set; } = new Tip11();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response33>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response34
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response34State State { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous9
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public State6 State { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response35
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_min")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_min4 Estimated_min { get; set; } = new Estimated_min4();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("estimated_max")]
        [System.ComponentModel.DataAnnotations.Required]
        public Estimated_max4 Estimated_max { get; set; } = new Estimated_max4();

        /// <summary>
        /// A list of minimum coin values that each output in a payment must satisfy. The values themselves depends on two things:
        /// <br/>
        /// <br/>  - (a) Some updatable protocol parameters fixed by the network.
        /// <br/>  - (b) The nature of the outputs (i.e. the kind of assets it includes).
        /// <br/>
        /// <br/>The list is a direct 1:1 mapping of the requested outputs. Said differently, it has the **same number of items** and **items
        /// <br/>are ordered in the same way** as **requested outputs** are ordered. In the case where there's no explicitly requested outputs (e.g.
        /// <br/>when calculating fee for delegation), this list is empty.
        /// <br/>
        /// <br/>For example, an output containing only `Ada` may require to be of at least `1 Ada`. An output containing only an hypothetical `AppleCoin`
        /// <br/>may require to also carry a minimum of `1.2 Ada`. Note that no matter what, a minimum coin value is always given in Lovelace / Ada.
        /// <br/>
        /// <br/>&gt; ℹ️ This mechanism is used by the protocol to protect against flooding of the network with worthless assets. By requiring a minimum coin value to every
        /// <br/>UTxO, they are given an intrinsic value indexed itself on the value of Ada.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minimum_coins")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<minimum_coins3> Minimum_coins { get; set; } = new System.Collections.ObjectModel.Collection<minimum_coins3>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit4 Deposit { get; set; } = new Deposit4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response35>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response36
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee13 Fee { get; set; } = new Fee13();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken9 Deposit_taken { get; set; } = new Deposit_taken9();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned9 Deposit_returned { get; set; } = new Deposit_returned9();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response36Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs12> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs12>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs10> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs10>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral10> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs8> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals10> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals10>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response36Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata29 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response36Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint12 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn11 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval14 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response36 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response36>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous10
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee14 Fee { get; set; } = new Fee14();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken10 Deposit_taken { get; set; } = new Deposit_taken10();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned10 Deposit_returned { get; set; } = new Deposit_returned10();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Direction3 Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs13> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs13>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs11> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs11>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral11> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs9> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals11> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals11>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status3 Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata30 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Script_validity3? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint13 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn12 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval15 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response37
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee15 Fee { get; set; } = new Fee15();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken11 Deposit_taken { get; set; } = new Deposit_taken11();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned11 Deposit_returned { get; set; } = new Deposit_returned11();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response37Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs14> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs14>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs12> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs12>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral12> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs10> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals12> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals12>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response37Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata31 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response37Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint14 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn13 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval16 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response37 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response37>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response38
    {
        /// <summary>
        /// Occurs when attempting to delete a transaction which is neither pending nor expired.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response38Code Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("info")]
        public Info2 Info { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response38 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response38>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response39
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs15> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs15>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs13> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs13>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change2> Change { get; set; } = new System.Collections.ObjectModel.Collection<change2>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral13> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals13> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates2> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken4> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned4> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response39 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response39>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous11
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee16 Fee { get; set; } = new Fee16();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken12 Deposit_taken { get; set; } = new Deposit_taken12();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned12 Deposit_returned { get; set; } = new Deposit_returned12();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Direction4 Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs16> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs16>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs14> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs14>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral14> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs11> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals14> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals14>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status4 Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata32 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Script_validity4? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint15 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn14 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval17 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response40
    {
        /// <summary>
        /// The complete set of selections required for a migration.
        /// <br/>
        /// <br/>Each selection is the basis for a single transaction.
        /// <br/>
        /// <br/>The ordering of selections within the list is not significant.
        /// <br/>After conversion into transactions, the transactions can be
        /// <br/>broadcast to the network in any order to perform the migration.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("selections")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<selections2> Selections { get; set; } = new System.Collections.ObjectModel.Collection<selections2>();

        /// <summary>
        /// The total amount to be paid in fees for a migration.
        /// <br/>
        /// <br/>This is the total sum of the fees of the individual selections.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total_fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total_fee { get; set; } = default!;

        /// <summary>
        /// The total balance of assets that **cannot** be migrated.
        /// <br/>
        /// <br/>The **ada** component of this balance is the total sum of all dust
        /// <br/>ada entries in the UTxO set. An ada entry is considered to be dust
        /// <br/>if its value is not large enough to pay for the marginal cost of
        /// <br/>including it in a transaction.
        /// <br/>
        /// <br/>The **assets** component of this balance is the total sum of all
        /// <br/>non-ada assets that cannot currently be migrated. Tokens of a
        /// <br/>non-ada asset cannot be migrated if there is insufficient ada
        /// <br/>available to pay for their inclusion in a transaction.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance_leftover")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Balance_leftover { get; set; } = default!;

        /// <summary>
        /// The total balance of assets that **can** be migrated.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance_selected")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Balance_selected { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response40 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response40>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response41
    {
        /// <summary>
        /// May occur when trying to migrate a wallet that is empty or full of dust.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response41Code Code { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response41 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response41>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response42
    {
        /// <summary>
        /// Estimated synchronization progress of the node with the underlying network. Note that this may
        /// <br/>change quite arbitrarily as the node may switch to shorter or longer chain forks.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sync_progress")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Sync_progress { get; set; } = default!;

        /// <summary>
        /// Underlying node's tip
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_tip")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Node_tip { get; set; } = default!;

        /// <summary>
        /// The time slot corresponding the network tip.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_tip")]
        public object Network_tip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next_epoch")]
        public Next_epoch2 Next_epoch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("node_era")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response42Node_era Node_era { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("network_info")]
        [System.ComponentModel.DataAnnotations.Required]
        public Network_info2 Network_info { get; set; } = new Network_info2();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_mode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response42Wallet_mode Wallet_mode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response42 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response42>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response43
    {
        /// <summary>
        /// The hash of a block
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("genesis_block_hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Genesis_block_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("blockchain_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Blockchain_start_time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slot_length")]
        [System.ComponentModel.DataAnnotations.Required]
        public Slot_length2 Slot_length { get; set; } = new Slot_length2();

        [System.Text.Json.Serialization.JsonPropertyName("epoch_length")]
        [System.ComponentModel.DataAnnotations.Required]
        public Epoch_length2 Epoch_length { get; set; } = new Epoch_length2();

        [System.Text.Json.Serialization.JsonPropertyName("security_parameter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Security_parameter2 Security_parameter { get; set; } = new Security_parameter2();

        [System.Text.Json.Serialization.JsonPropertyName("active_slot_coefficient")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active_slot_coefficient2 Active_slot_coefficient { get; set; } = new Active_slot_coefficient2();

        [System.Text.Json.Serialization.JsonPropertyName("decentralization_level")]
        [System.ComponentModel.DataAnnotations.Required]
        public Decentralization_level2 Decentralization_level { get; set; } = new Decentralization_level2();

        [System.Text.Json.Serialization.JsonPropertyName("desired_pool_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Desired_pool_number { get; set; } = default!;

        /// <summary>
        /// 
        /// <br/>If and when each era started or will start.
        /// <br/>
        /// <br/>The object is keyed by era names. The values either describe the epoch boundary
        /// <br/>when the era starts (can be in the future or in the past), or are null if not yet
        /// <br/>confirmed on-chain.
        /// <br/>
        /// <br/>If you need to know the current era, see the `node_era` field of
        /// <br/>`GET /network/information`.
        /// <br/>
        /// <br/>&gt; Due to complications with our current tooling, we cannot mark the era names
        /// <br/>&gt; as required, but the keys are in fact always present.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("eras")]
        [System.ComponentModel.DataAnnotations.Required]
        public Eras2 Eras { get; set; } = new Eras2();

        /// <summary>
        /// The maximum number of collateral inputs that can be used in a single
        /// <br/>transaction.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maximum_collateral_input_count")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Maximum_collateral_input_count { get; set; } = default!;

        /// <summary>
        /// The minimum required amount of collateral as a percentage of the
        /// <br/>total transaction fee.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minimum_collateral_percentage")]
        public object Minimum_collateral_percentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maximum_token_bundle_size")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Maximum_token_bundle_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("execution_unit_prices")]
        public object Execution_unit_prices { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response43 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response43>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response44
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response44 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response44>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response45
    {

        [System.Text.Json.Serialization.JsonPropertyName("address_style")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response45Address_style Address_style { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake_reference")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response45Stake_reference Stake_reference { get; set; } = default!;

        /// <summary>
        /// Can be null for 'Icarus' and 'Byron' styles.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_tag")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Network_tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("spending_key_hash")]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Spending_key_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("spending_key_bech32")]
        public string Spending_key_bech32 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake_key_hash")]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Stake_key_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stake_key_bech32")]
        public string Stake_key_bech32 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script_hash")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Script_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script_hash_bech32")]
        public string Script_hash_bech32 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pointer")]
        public Pointer2 Pointer { get; set; } = default!;

        /// <summary>
        /// Only for 'Icarus' and 'Byron' styles.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_root")]
        public string Address_root { get; set; } = default!;

        /// <summary>
        /// Only for 'Byron' style.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        public string Derivation_path { get; set; } = default!;

        /// <summary>
        /// The raw type field of the address.
        /// <br/>
        /// <br/>Details about possible address types are following (refer also to [cddl](https://github.com/IntersectMBO/cardano-ledger/blob/master/eras/alonzo/test-suite/cddl-files/alonzo.cddl)).
        /// <br/>
        /// <br/>| address_type | binary prefix  |   Meaning                                                |
        /// <br/>| ------------ |:--------------:|:--------------------------------------------------------:|
        /// <br/>|      0       |  0000          |   base address: keyhash28,keyhash28                      |
        /// <br/>|      1       |  0001          |   base address: scripthash28,keyhash28                   |
        /// <br/>|      2       |  0010          |   base address: keyhash28,scripthash28                   |
        /// <br/>|      3       |  0011          |   base address: scripthash28,scripthash28                |
        /// <br/>|      4       |  0100          |   pointer address: keyhash28, 3 variable length uint     |
        /// <br/>|      5       |  0101          |   pointer address: scripthash28, 3 variable length uint  |
        /// <br/>|      6       |  0110          |   enterprise address: keyhash28                          |
        /// <br/>|      7       |  0111          |   enterprise address: scripthash28                       |
        /// <br/>|      8       |  1000          |   byron/icarus                                           |
        /// <br/>|      14      |  1110          |   reward account: keyhash28                              |
        /// <br/>|      15      |  1111          |   reward account: scripthash28                           |
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address_type")]
        [System.ComponentModel.DataAnnotations.Range(0, 15)]
        public int Address_type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response45 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response45>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response46
    {
        /// <summary>
        /// A Shelley address representing either enterprise, reward account or delegating address
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((addr)|(stake)|(addr_test)|(stake_test))1[0-9a-z]*$")]
        public string Address { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response46 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response46>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response47
    {
        /// <summary>
        /// Pool metadata source. This sets the metadata fetching strategy.
        /// <br/>
        /// <br/>Possible values are
        /// <br/>  * none -&gt; no fetching
        /// <br/>  * direct -&gt; direct fetching
        /// <br/>  * uri -&gt; use SMASH server
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_metadata_source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(none|direct|https?:\/\/[a-zA-Z0-9-_~.]+(:[0-9]+)?/?)$")]
        public string Pool_metadata_source { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response47 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response47>(data, options);

        }

    }

    /// <summary>
    /// The status of the SMASH server. Possible values are:
    /// <br/>
    /// <br/>health                  | description
    /// <br/>---                     | ---
    /// <br/>`"available"`           | server is awaiting your requests
    /// <br/>`"unavailable"`         | server is running, but currently unavailable, try again in a short time
    /// <br/>`"unreachable"`         | server could not be reached or didn't return a health status
    /// <br/>`"no_smash_configured"` | SMASH is currently not configured, adjust the Settings first
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response48
    {

        [System.Text.Json.Serialization.JsonPropertyName("health")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response48Health Health { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response48 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response48>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response49
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public Total4 Total { get; set; } = new Total4();

        [System.Text.Json.Serialization.JsonPropertyName("scale")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response49Scale Scale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distribution")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, int> Distribution { get; set; } = new System.Collections.Generic.Dictionary<string, int>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response49 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response49>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response50
    {
        /// <summary>
        /// The complete set of UTxO entries associated with a wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("entries")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<entries3> Entries { get; set; } = new System.Collections.ObjectModel.Collection<entries3>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response50 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response50>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response51
    {
        /// <summary>
        /// The CBOR-encoded transaction, represented in either hex or base64 encoding.
        /// <br/>This always includes the transaction body and the witness set, even if the
        /// <br/>latter is empty.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("coin_selection")]
        [System.ComponentModel.DataAnnotations.Required]
        public Coin_selection3 Coin_selection { get; set; } = new Coin_selection3();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee17 Fee { get; set; } = new Fee17();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response51 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response51>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response52
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee18 Fee { get; set; } = new Fee18();

        /// <summary>
        /// Inputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Inputs { get; set; } = default!;

        /// <summary>
        /// Outputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Outputs { get; set; } = default!;

        /// <summary>
        /// Inputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public object Collateral { get; set; } = default!;

        /// <summary>
        /// Outputs that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        public object Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// Withdrawals that could be external or belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        [System.ComponentModel.DataAnnotations.Required]
        public Mint16 Mint { get; set; } = new Mint16();

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        [System.ComponentModel.DataAnnotations.Required]
        public Burn15 Burn { get; set; } = new Burn15();

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata33 Metadata { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken5> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned5> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response52Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval18 Validity_interval { get; set; } = default!;

        /// <summary>
        /// Specifies the number of verification key and bootstrap wintesses.
        /// <br/>As scripts act as witnesses they are also included. Scripts can be specified
        /// <br/>and spent in a given transaction or defined to be consumed later.
        /// <br/>In the latter case they are defined in transaction outputs (feature possible from Babbage era)
        /// <br/>in one transaction and referenced in other later transaction(s). The script referencing
        /// <br/>is realized via including of reference in a reference input. If reference script
        /// <br/>is present here it included the form of the script and reference to be used later,
        /// <br/>ie. tx id and index of tx out where the script was included.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("witness_count")]
        [System.ComponentModel.DataAnnotations.Required]
        public Witness_count3 Witness_count { get; set; } = new Witness_count3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response52 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response52>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response53
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response53 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response53>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous12
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee19 Fee { get; set; } = new Fee19();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken13 Deposit_taken { get; set; } = new Deposit_taken13();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned13 Deposit_returned { get; set; } = new Deposit_returned13();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Direction5 Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs17> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs17>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs15> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs15>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral15> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs12> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals15> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals15>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status5 Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata34 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Script_validity5? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint17 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn16 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval19 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response54
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// An amount of Ada spent or received, from the perspective of the wallet.
        /// <br/>
        /// <br/>That is, for outgoing transaction, it represents the amount of Ada consumed
        /// <br/>as inputs including the amount of Ada spent as fees or deposits.
        /// <br/>
        /// <br/>For incoming transaction, it represents the total amount of Ada received to
        /// <br/>addresses that belong to the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Amount { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee20 Fee { get; set; } = new Fee20();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_taken")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_taken14 Deposit_taken { get; set; } = new Deposit_taken14();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposit_returned")]
        [System.ComponentModel.DataAnnotations.Required]
        public Deposit_returned14 Deposit_returned { get; set; } = new Deposit_returned14();

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time at which the transaction was inserted in a block.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inserted_at")]
        public object Inserted_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending OR status == expired
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Absolute time and slot at which the pending transaction TTL (time to live) will lapse.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expires_at")]
        public object Expires_at { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == pending
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>The point in time at which a transaction became pending.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pending_since")]
        public object Pending_since { get; set; } = default!;

        /// <summary>
        /// &lt;span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;"&gt;
        /// <br/>&lt;strong&gt;if:&lt;/strong&gt; status == in_ledger
        /// <br/>&lt;/span&gt;&lt;br/&gt;
        /// <br/>Current depth of the transaction in the local chain
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public object Depth { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response54Direction Direction { get; set; } = default!;

        /// <summary>
        /// A list of transaction inputs.
        /// <br/>
        /// <br/>`assets` and `address` are always present for `outgoing`
        /// <br/>transactions but generally absent for `incoming`
        /// <br/>transactions. This information is present on the Cardano explorer,
        /// <br/>but is not tracked by the wallet.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs18> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs18>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs16> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs16>();

        /// <summary>
        /// A list of transaction inputs used for collateral.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral16> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of collateral return outputs with amounts specified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral_outputs")]
        [System.ComponentModel.DataAnnotations.MaxLength(1)]
        public System.Collections.Generic.ICollection<collateral_outputs13> Collateral_outputs { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<withdrawals16> Withdrawals { get; set; } = new System.Collections.ObjectModel.Collection<withdrawals16>();

        /// <summary>
        /// Current transaction status.
        /// <br/>
        /// <br/>  ```
        /// <br/>       *-----------*
        /// <br/>  ---&gt; |  PENDING  |----------------*
        /// <br/>       *-----------*                |
        /// <br/>             |                      |
        /// <br/>             V                      V
        /// <br/>       *-----------*          *-----------*
        /// <br/>       |           |----------&gt;  EXPIRED  |
        /// <br/>       |           |  (ttl)   *-----------*
        /// <br/>       | SUBMITTED |
        /// <br/>       |           &lt;----------------*
        /// <br/>       |           |                |
        /// <br/>       *-----------*           (rollback)
        /// <br/>              |                     |
        /// <br/>         (in ledger)          *-----------*
        /// <br/>              |               |           |
        /// <br/>              *---------------&gt; IN_LEDGER |
        /// <br/>                              |           |
        /// <br/>                              *-----------*
        /// <br/>  ```
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response54Status Status { get; set; } = default!;

        /// <summary>
        /// **⚠️ WARNING ⚠️**
        /// <br/>
        /// <br/>_Please note that metadata provided in a transaction will be
        /// <br/>stored on the blockchain forever. Make sure not to include any sensitive data,
        /// <br/>in particular personally identifiable information (PII)._
        /// <br/>
        /// <br/>Extra application data attached to the transaction.
        /// <br/>
        /// <br/>Cardano allows users and developers to embed their own
        /// <br/>authenticated metadata when submitting transactions. Metadata can
        /// <br/>be expressed as a JSON object with some restrictions:
        /// <br/>
        /// <br/>1. All top-level keys must be integers between `0` and `2^64 - 1`.
        /// <br/>
        /// <br/>2. Each metadata value is tagged with its type.
        /// <br/>
        /// <br/>3. Strings must be at most 64 bytes when UTF-8 encoded.
        /// <br/>
        /// <br/>4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.
        /// <br/>
        /// <br/>Metadata aren't stored as JSON on the Cardano blockchain but are
        /// <br/>instead stored using a compact binary encoding (CBOR).
        /// <br/>
        /// <br/>The binary encoding of metadata values supports three simple types:
        /// <br/>
        /// <br/>* Integers in the range `-(2^64 - 1)` to `2^64 - 1`
        /// <br/>* Strings (UTF-8 encoded)
        /// <br/>* Bytestrings
        /// <br/>
        /// <br/>And two compound types:
        /// <br/>
        /// <br/>* Lists of metadata values
        /// <br/>* Mappings from metadata values to metadata values
        /// <br/>
        /// <br/>It is possible to transform any JSON object into this schema.
        /// <br/>
        /// <br/>However, if your application uses floating point values, they will
        /// <br/>need to be converted somehow, according to your
        /// <br/>requirements. Likewise for `null` or `bool` values. When reading
        /// <br/>metadata from chain, be aware that integers may exceed the
        /// <br/>javascript numeric range, and may need special "bigint" parsing.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata35 Metadata { get; set; } = default!;

        /// <summary>
        /// Indicates whether the phase-2 monetary policy script (e.g. Plutus script)
        /// <br/>used in the transaction validated or not. Validity may be null if this
        /// <br/>transaction was from an era that doesn't support phase-2 monetary policy
        /// <br/>scripts, or is a pending transaction (we don't know if validation passed or
        /// <br/>failed until the transaction hits the ledger).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_validity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Response54Script_validity? Script_validity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<object> Certificates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint18 Mint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("burn")]
        public Burn17 Burn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validity_interval")]
        public Validity_interval20 Validity_interval { get; set; } = default!;

        /// <summary>
        /// A script data integrity hash - 32 bytes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("script_integrity")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(script_data)1[0-9a-z]*$")]
        public string Script_integrity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extra_signatures")]
        public System.Collections.Generic.ICollection<string> Extra_signatures { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response54 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response54>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous13
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public State7 State { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous13>(data, options);

        }

    }

    /// <summary>
    /// A Block Header.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response55
    {
        /// <summary>
        /// The hash of a block
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("header_hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Header_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slot_no")]
        [System.ComponentModel.DataAnnotations.Required]
        public Slot_no2 Slot_no { get; set; } = new Slot_no2();

        [System.Text.Json.Serialization.JsonPropertyName("block_height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Block_height2 Block_height { get; set; } = new Block_height2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response55 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response55>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiAddressWithPathState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiAddressInspectAddress_style
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Shelley")]
        Shelley = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Icarus")]
        Icarus = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Byron")]
        Byron = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiAddressInspectStake_reference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"by value")]
        By_value = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"by pointer")]
        By_pointer = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pointer
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_num")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_num { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transaction_index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Transaction_index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("output_index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Output_index { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Pointer FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Pointer>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NetworkInfoNetwork_id
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mainnet")]
        Mainnet = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"testnet")]
        Testnet = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Next_epoch
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Next_epoch FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Next_epoch>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiNetworkInformationNode_era
    {

        [System.Runtime.Serialization.EnumMember(Value = @"byron")]
        Byron = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"shelley")]
        Shelley = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"allegra")]
        Allegra = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"mary")]
        Mary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"alonzo")]
        Alonzo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"babbage")]
        Babbage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"conway")]
        Conway = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Network_info
    {
        /// <summary>
        /// The unique magic number defining the network the wallet is working on.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("protocol_magic")]
        public int Protocol_magic { get; set; } = default!;

        /// <summary>
        /// A name just distinguishing mainnet from testnets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Network_infoNetwork_id Network_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Network_info FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Network_info>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiNetworkInformationWallet_mode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"light")]
        Light = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"node")]
        Node = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Slot_length
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Slot_lengthUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Slot_length FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Slot_length>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Epoch_length
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Epoch_lengthUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Epoch_length FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Epoch_length>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Security_parameter
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Security_parameterUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Security_parameter FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Security_parameter>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active_slot_coefficient
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active_slot_coefficientUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active_slot_coefficient FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active_slot_coefficient>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Decentralization_level
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Decentralization_levelUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Decentralization_level FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Decentralization_level>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Eras
    {

        [System.Text.Json.Serialization.JsonPropertyName("byron")]
        public object? Byron { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shelley")]
        public object? Shelley { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allegra")]
        public object? Allegra { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mary")]
        public object? Mary { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alonzo")]
        public object? Alonzo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("babbage")]
        public object? Babbage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conway")]
        public object? Conway { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Eras FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Eras>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payments
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount Amount { get; set; } = new Amount();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets2> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Payments FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Payments>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiSelectCoinsPaymentsWithdrawal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"self")]
        Self = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount2 Amount { get; set; } = new Amount2();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets3> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata2
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation_action
    {

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Delegation_actionAction Action { get; set; } = default!;

        /// <summary>
        /// A unique identifier for the pool.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public string Pool { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation_action FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation_action>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments2
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount3 Amount { get; set; } = new Amount3();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets4> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Inputs
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount4 Amount { get; set; } = new Amount4();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets5> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Inputs FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Inputs>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Outputs
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount5 Amount { get; set; } = new Amount5();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets6> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Outputs FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Outputs>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount6 Amount { get; set; } = new Amount6();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets7> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Change FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Change>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Collateral
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount7 Amount { get; set; } = new Amount7();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Collateral FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Collateral>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Withdrawals
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount8 Amount { get; set; } = new Amount8();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Withdrawals FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Withdrawals>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Certificates
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CertificatesCertificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Certificates FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Certificates>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposits_taken
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_takenUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposits_taken FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposits_taken>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposits_returned
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returnedUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposits_returned FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposits_returned>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiGCStatusStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_applicable")]
        Not_applicable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"not_started")]
        Not_started = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"restarting")]
        Restarting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"has_run")]
        Has_run = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiMaintenanceActionPostDataMaintenance_action
    {

        [System.Runtime.Serialization.EnumMember(Value = @"gc_stake_pools")]
        Gc_stake_pools = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Gc_stake_pools
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Gc_stake_poolsStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_run")]
        public string Last_run { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Gc_stake_pools FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Gc_stake_pools>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metrics
    {
        /// <summary>
        /// The rewards the wallet can expect to receive at the end of an epoch, in the long term, if delegating to
        /// <br/>this pool.
        /// <br/>
        /// <br/>For more details, see the
        /// <br/>[Design Specification for Delegation and Incentives in Cardano](https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec)
        /// <br/>document.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("non_myopic_member_rewards")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Non_myopic_member_rewards { get; set; } = default!;

        /// <summary>
        /// The live pool stake relative to the *total* stake.
        /// <br/>
        /// <br/>For more details, see the section "Relative Stake: Active vs Total" in
        /// <br/>[Design Specification for Delegation and Incentives in Cardano](https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relative_stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Relative_stake { get; set; } = default!;

        /// <summary>
        /// Saturation-level of the pool based on the desired number of pools aimed by the network.
        /// <br/>A value above `1` indicates that the pool is saturated.
        /// <br/>
        /// <br/>The `non_myopic_member_rewards` take oversaturation into account, as specified by the [specs](https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec).
        /// <br/>
        /// <br/>The saturation is based on the live `relative_stake`. The saturation at the end of epoch e,
        /// <br/>will affect the rewards paid out at the end of epoch e+3.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("saturation")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Saturation { get; set; } = default!;

        /// <summary>
        /// Number of blocks produced by a given stake pool in its lifetime.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("produced_blocks")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Produced_blocks { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metrics FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metrics>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata3
    {

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 3)]
        public string Ticker { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homepage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Homepage { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Flags
    {

        [System.Runtime.Serialization.EnumMember(Value = @"delisted")]
        Delisted = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_min
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_minUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_min FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_min>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_max
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_maxUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_max FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_max>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Minimum_coins
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Minimum_coinsUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Minimum_coins FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Minimum_coins>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DepositUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PlutusScriptInfoLanguage_version
    {

        [System.Runtime.Serialization.EnumMember(Value = @"v1")]
        V1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"v2")]
        V2 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnyScriptScript_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnyExplicitScriptScript_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference2
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_scriptScript_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference3 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tokens
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script2 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets8> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets8>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tokens FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tokens>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coin_selection
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs19> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs19>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs17> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs17>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change3> Change { get; set; } = new System.Collections.ObjectModel.Collection<change3>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral17> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals17> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates3> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken6> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned6> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Coin_selection FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Coin_selection>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FeeUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiRegisterPoolCertificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"register_pool")]
        Register_pool = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pool_metadata
    {
        /// <summary>
        /// A URL to the stake pool's website.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hash")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Pool_metadata FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Pool_metadata>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiDeregisterPoolCertificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"deregister_pool")]
        Deregister_pool = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_beforeUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafterUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Scripts
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ScriptsScript_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference4 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Scripts FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Scripts>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens2> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens2>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata4
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata4>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public deposits_takenUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public deposits_returnedUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiDecodedTransactionScript_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before2 Invalid_before { get; set; } = new Invalid_before2();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter2 Invalid_hereafter { get; set; } = new Invalid_hereafter2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Witness_count
    {
        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verification_key")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Verification_key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scripts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<scripts> Scripts { get; set; } = new System.Collections.ObjectModel.Collection<scripts>();

        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bootstrap")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Bootstrap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Witness_count FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Witness_count>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_takenUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returnedUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiTransactionDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount9 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets9> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount10 Amount { get; set; } = new Amount10();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets10> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount11 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Collateral_outputs
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount12 Amount { get; set; } = new Amount12();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets11> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Collateral_outputs FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Collateral_outputs>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount13 Amount { get; set; } = new Amount13();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiTransactionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata5
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiTransactionScript_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint2
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens3> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens3>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn2
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens4> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens4>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval2
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before3 Invalid_before { get; set; } = new Invalid_before3();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter3 Invalid_hereafter { get; set; } = new Invalid_hereafter3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiWalletDelegationNextStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ActiveStatus Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting2 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Next
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NextStatus Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting3 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at2 Changes_at { get; set; } = new Changes_at2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Next FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Next>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance
    {
        /// <summary>
        /// Available Ada UTxO balance (funds that can be spent without condition).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// The Ada balance of the reward account for this wallet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward { get; set; } = default!;

        /// <summary>
        /// Total Ada balance (available balance plus pending change and reward balance).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets2
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active2 Active { get; set; } = new Active2();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next> Next { get; set; } = new System.Collections.ObjectModel.Collection<next>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height Height { get; set; } = new Height();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance2
    {
        /// <summary>
        /// Available balance (funds that can be spent)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total balance (available balance plus pending change)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets3
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiByronWalletDiscovery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sequential")]
        Sequential = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase2
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip2
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height2 Height { get; set; } = new Height2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase3
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment_script_template
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Payment_script_template FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Payment_script_template>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation_script_template
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation_script_template FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation_script_template>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance3
    {
        /// <summary>
        /// Available Ada UTxO balance (funds that can be spent without condition).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// The Ada balance of the reward account for this wallet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward { get; set; } = default!;

        /// <summary>
        /// Total Ada balance (available balance plus pending change and reward balance).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets4
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation2
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active3 Active { get; set; } = new Active3();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next2> Next { get; set; } = new System.Collections.ObjectModel.Collection<next2>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip3
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height3 Height { get; set; } = new Height3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment_script_template2
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Payment_script_template2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Payment_script_template2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation_script_template2
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation_script_template2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation_script_template2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class State4
    {
        /// <summary>
        /// An incomplete shared wallet does not have a complete set
        /// <br/>of keys, so the only possible status is `incomplete`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public State4Status Status { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static State4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<State4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment_script_template3
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"or 'self'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Payment_script_template3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Payment_script_template3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation_script_template3
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"or 'self'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation_script_template3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation_script_template3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiSharedWalletPostDataFromMnemonicsScript_validation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"required")]
        Required = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"recommended")]
        Recommended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment_script_template4
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"or 'self'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Payment_script_template4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Payment_script_template4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation_script_template4
    {
        /// <summary>
        /// Map of cosigners and their account public keys. Use key as in &amp;cosigner, eg. "cosigner#"or 'self'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cosigners")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Cosigners { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Template { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation_script_template4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation_script_template4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiSharedWalletPostDataFromAccountPubXScript_validation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"required")]
        Required = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"recommended")]
        Recommended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata6
    {
        /// <summary>
        /// A human-readable name for the asset, intended for display in user
        /// <br/>interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A human-readable description for the asset. Good for display in
        /// <br/>user interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// An optional human-readable very short name or acronym for the
        /// <br/>asset, intended for display in user interfaces. If `ticker` is not
        /// <br/>present, then `name` will be used, but it might be truncated to
        /// <br/>fit within the available space.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        public string Ticker { get; set; } = default!;

        /// <summary>
        /// Defines a scaling factor for the asset of 10&lt;sup&gt;-n&lt;/sup&gt;. The
        /// <br/>decimals value _n_ is therefore the number of digits after the
        /// <br/>decimal point for quantities of this token.
        /// <br/>
        /// <br/>It is up to API clients to use this metadata field to decimalize
        /// <br/>asset quantities before displaying to users. The wallet backend
        /// <br/>will always return unscaled token quantities as whole numbers.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decimals")]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int Decimals { get; set; } = default!;

        /// <summary>
        /// A URL to the policy's owner(s) or the entity website in charge of the asset.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        /// <summary>
        /// A base64-encoded `image/png` for displaying the asset. The end image can be expected
        /// <br/>to be smaller than 64KB.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logo")]
        [System.ComponentModel.DataAnnotations.StringLength(87400)]
        public byte[] Logo { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiAssetMetadata_error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fetch")]
        Fetch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parse")]
        Parse = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ada
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AdaUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Ada FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Ada>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Selections
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs20> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs20>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs18> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs18>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change4> Change { get; set; } = new System.Collections.ObjectModel.Collection<change4>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral18> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals18> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates4> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken7> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned7> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Selections FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Selections>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entries
    {
        /// <summary>
        /// The ada quantity associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ada")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Ada { get; set; } = default!;

        /// <summary>
        /// The set of non-ada assets associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Entries FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Entries>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Total
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TotalUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Total FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Total>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiWalletUTxOsStatisticsScale
    {

        [System.Runtime.Serialization.EnumMember(Value = @"log10")]
        Log10 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata7
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiAddressDataValidation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"required")]
        Required = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"recommended")]
        Recommended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiByronWalletRandomPostDataStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiByronWalletRandomXPrvPostDataStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiByronWalletIcarusPostDataStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"icarus")]
        Icarus = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiByronWalletTrezorPostDataStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"trezor")]
        Trezor = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiByronWalletLedgerPostDataStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ledger")]
        Ledger = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiPostAccountKeyDataFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"extended")]
        Extended = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non_extended")]
        Non_extended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiPostAccountKeyDataWithPurposeFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"extended")]
        Extended = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non_extended")]
        Non_extended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Settings
    {
        /// <summary>
        /// Select stake pool metadata fetching strategy:
        /// <br/>  - `none` - metadata is not fetched at all,
        /// <br/>  - `direct` - metadata is fetched directly URLs registered on chain,
        /// <br/>  - `uri` - metadata is fetched from an external Stake-Pool Metadata Aggregation Server (SMASH)
        /// <br/>
        /// <br/>After update existing metadata will be dropped forcing it to re-sync automatically with the new setting.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_metadata_source")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pool_metadata_source { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Settings FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Settings>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiHealthCheckHealth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unavailable")]
        Unavailable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unreachable")]
        Unreachable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"no_smash_configured")]
        No_smash_configured = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiSignTransactionPostDataEncoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments3
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount14 Amount { get; set; } = new Amount14();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets12> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments4
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount15 Amount { get; set; } = new Amount15();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets13> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiPostTransactionDataWithdrawal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"self")]
        Self = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata8
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments5
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount16 Amount { get; set; } = new Amount16();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets14> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments6
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount17 Amount { get; set; } = new Amount17();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets15> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments7
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount18 Amount { get; set; } = new Amount18();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets16> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiPostTransactionFeeDataWithdrawal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"self")]
        Self = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata9
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments8
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount19 Amount { get; set; } = new Amount19();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets17> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint3
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiving_address")]
        public string Receiving_address { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation
    {

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint19 Mint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Operation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Operation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiConstructTransactionDataWithdrawal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"self")]
        Self = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata10
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Encrypt_metadata
    {

        [System.Text.Json.Serialization.JsonPropertyName("method")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Encrypt_metadataMethod Method { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Encrypt_metadata FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Encrypt_metadata>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint_burn
    {

        [System.Text.Json.Serialization.JsonPropertyName("policy_script_template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Policy_script_template { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public Operation2 Operation { get; set; } = new Operation2();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint_burn FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint_burn>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Vote
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval3
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        public object Invalid_before { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        public object Invalid_hereafter { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiConstructTransactionDataEncoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StakeUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reward_balance
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Reward_balanceUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reward_balance FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reward_balance>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation3
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active4 Active { get; set; } = new Active4();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next3> Next { get; set; } = new System.Collections.ObjectModel.Collection<next3>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reward_balance2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Reward_balance2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reward_balance2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reward_balance2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ours
    {
        /// <summary>
        /// A soft derivation index.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int Index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake4 Stake { get; set; } = new Stake4();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward_balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reward_balance3 Reward_balance { get; set; } = new Reward_balance3();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation9 Delegation { get; set; } = new Delegation9();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Ours FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Ours>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Foreign
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake5 Stake { get; set; } = new Stake5();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward_balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reward_balance4 Reward_balance { get; set; } = new Reward_balance4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Foreign FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Foreign>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class None
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake6 Stake { get; set; } = new Stake6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static None FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<None>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiRedeemerSpendingPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"spending")]
        Spending = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Input
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Input FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Input>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiRedeemerMintingPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"minting")]
        Minting = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiRedeemerRewardingPurpose
    {

        [System.Runtime.Serialization.EnumMember(Value = @"rewarding")]
        Rewarding = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs2
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount20 Amount { get; set; } = new Amount20();

        /// <summary>
        /// A datum hash.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datum")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Datum { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<assets18> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets18>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApiBalanceTransactionPostDataEncoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Slot_no
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Slot_noUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Slot_no FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Slot_no>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Block_height
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Block_heightUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Block_height FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Block_height>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata11
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body3Withdrawal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"self")]
        Self = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata12
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Encrypt_metadata2
    {

        [System.Text.Json.Serialization.JsonPropertyName("method")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Encrypt_metadata2Method Method { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Encrypt_metadata2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Encrypt_metadata2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class mint_burn
    {

        [System.Text.Json.Serialization.JsonPropertyName("policy_script_template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Policy_script_template { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public Operation3 Operation { get; set; } = new Operation3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static mint_burn FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<mint_burn>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Vote2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval4
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        public object Invalid_before { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        public object Invalid_hereafter { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body3Encoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body4Encoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body6Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"extended")]
        Extended = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non_extended")]
        Non_extended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body9Maintenance_action
    {

        [System.Runtime.Serialization.EnumMember(Value = @"gc_stake_pools")]
        Gc_stake_pools = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs3
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount21 Amount { get; set; } = new Amount21();

        /// <summary>
        /// A datum hash.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datum")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Datum { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<assets19> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets19>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body15Encoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments9
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount22 Amount { get; set; } = new Amount22();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets20> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments10
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount23 Amount { get; set; } = new Amount23();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets21> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class payments11
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount24 Amount { get; set; } = new Amount24();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets22> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static payments11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<payments11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body25Validation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"required")]
        Required = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"recommended")]
        Recommended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Settings2
    {
        /// <summary>
        /// Select stake pool metadata fetching strategy:
        /// <br/>  - `none` - metadata is not fetched at all,
        /// <br/>  - `direct` - metadata is fetched directly URLs registered on chain,
        /// <br/>  - `uri` - metadata is fetched from an external Stake-Pool Metadata Aggregation Server (SMASH)
        /// <br/>
        /// <br/>After update existing metadata will be dropped forcing it to re-sync automatically with the new setting.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pool_metadata_source")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Pool_metadata_source { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Settings2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Settings2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body28Withdrawal
    {

        [System.Runtime.Serialization.EnumMember(Value = @"self")]
        Self = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata13
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Encrypt_metadata3
    {

        [System.Text.Json.Serialization.JsonPropertyName("method")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Encrypt_metadata3Method Method { get; set; } = default!;

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("passphrase")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Passphrase { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Encrypt_metadata3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Encrypt_metadata3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class mint_burn2
    {

        [System.Text.Json.Serialization.JsonPropertyName("policy_script_template")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Policy_script_template { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public Operation4 Operation { get; set; } = new Operation4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static mint_burn2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<mint_burn2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Vote3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval5
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        public object Invalid_before { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        public object Invalid_hereafter { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body28Encoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body30Encoding
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base16")]
        Base16 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body31Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"extended")]
        Extended = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non_extended")]
        Non_extended = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance4
    {
        /// <summary>
        /// Available Ada UTxO balance (funds that can be spent without condition).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// The Ada balance of the reward account for this wallet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward { get; set; } = default!;

        /// <summary>
        /// Total Ada balance (available balance plus pending change and reward balance).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets5
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation4
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active5 Active { get; set; } = new Active5();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next4> Next { get; set; } = new System.Collections.ObjectModel.Collection<next4>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase4
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip4
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height4 Height { get; set; } = new Height4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance5
    {
        /// <summary>
        /// Available Ada UTxO balance (funds that can be spent without condition).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// The Ada balance of the reward account for this wallet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward { get; set; } = default!;

        /// <summary>
        /// Total Ada balance (available balance plus pending change and reward balance).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets6
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation5
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active6 Active { get; set; } = new Active6();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next5> Next { get; set; } = new System.Collections.ObjectModel.Collection<next5>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase5
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip5
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height5 Height { get; set; } = new Height5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata14
    {
        /// <summary>
        /// A human-readable name for the asset, intended for display in user
        /// <br/>interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A human-readable description for the asset. Good for display in
        /// <br/>user interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// An optional human-readable very short name or acronym for the
        /// <br/>asset, intended for display in user interfaces. If `ticker` is not
        /// <br/>present, then `name` will be used, but it might be truncated to
        /// <br/>fit within the available space.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        public string Ticker { get; set; } = default!;

        /// <summary>
        /// Defines a scaling factor for the asset of 10&lt;sup&gt;-n&lt;/sup&gt;. The
        /// <br/>decimals value _n_ is therefore the number of digits after the
        /// <br/>decimal point for quantities of this token.
        /// <br/>
        /// <br/>It is up to API clients to use this metadata field to decimalize
        /// <br/>asset quantities before displaying to users. The wallet backend
        /// <br/>will always return unscaled token quantities as whole numbers.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decimals")]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int Decimals { get; set; } = default!;

        /// <summary>
        /// A URL to the policy's owner(s) or the entity website in charge of the asset.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        /// <summary>
        /// A base64-encoded `image/png` for displaying the asset. The end image can be expected
        /// <br/>to be smaller than 64KB.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logo")]
        [System.ComponentModel.DataAnnotations.StringLength(87400)]
        public byte[] Logo { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Metadata_error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fetch")]
        Fetch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parse")]
        Parse = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata15
    {
        /// <summary>
        /// A human-readable name for the asset, intended for display in user
        /// <br/>interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A human-readable description for the asset. Good for display in
        /// <br/>user interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// An optional human-readable very short name or acronym for the
        /// <br/>asset, intended for display in user interfaces. If `ticker` is not
        /// <br/>present, then `name` will be used, but it might be truncated to
        /// <br/>fit within the available space.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        public string Ticker { get; set; } = default!;

        /// <summary>
        /// Defines a scaling factor for the asset of 10&lt;sup&gt;-n&lt;/sup&gt;. The
        /// <br/>decimals value _n_ is therefore the number of digits after the
        /// <br/>decimal point for quantities of this token.
        /// <br/>
        /// <br/>It is up to API clients to use this metadata field to decimalize
        /// <br/>asset quantities before displaying to users. The wallet backend
        /// <br/>will always return unscaled token quantities as whole numbers.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decimals")]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int Decimals { get; set; } = default!;

        /// <summary>
        /// A URL to the policy's owner(s) or the entity website in charge of the asset.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        /// <summary>
        /// A base64-encoded `image/png` for displaying the asset. The end image can be expected
        /// <br/>to be smaller than 64KB.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logo")]
        [System.ComponentModel.DataAnnotations.StringLength(87400)]
        public byte[] Logo { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response2Metadata_error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fetch")]
        Fetch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parse")]
        Parse = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata16
    {
        /// <summary>
        /// A human-readable name for the asset, intended for display in user
        /// <br/>interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A human-readable description for the asset. Good for display in
        /// <br/>user interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// An optional human-readable very short name or acronym for the
        /// <br/>asset, intended for display in user interfaces. If `ticker` is not
        /// <br/>present, then `name` will be used, but it might be truncated to
        /// <br/>fit within the available space.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        public string Ticker { get; set; } = default!;

        /// <summary>
        /// Defines a scaling factor for the asset of 10&lt;sup&gt;-n&lt;/sup&gt;. The
        /// <br/>decimals value _n_ is therefore the number of digits after the
        /// <br/>decimal point for quantities of this token.
        /// <br/>
        /// <br/>It is up to API clients to use this metadata field to decimalize
        /// <br/>asset quantities before displaying to users. The wallet backend
        /// <br/>will always return unscaled token quantities as whole numbers.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decimals")]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int Decimals { get; set; } = default!;

        /// <summary>
        /// A URL to the policy's owner(s) or the entity website in charge of the asset.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        /// <summary>
        /// A base64-encoded `image/png` for displaying the asset. The end image can be expected
        /// <br/>to be smaller than 64KB.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logo")]
        [System.ComponentModel.DataAnnotations.StringLength(87400)]
        public byte[] Logo { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response3Metadata_error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fetch")]
        Fetch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parse")]
        Parse = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Total2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Total2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Total2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Total2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response4Scale
    {

        [System.Runtime.Serialization.EnumMember(Value = @"log10")]
        Log10 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class entries
    {
        /// <summary>
        /// The ada quantity associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ada")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Ada { get; set; } = default!;

        /// <summary>
        /// The set of non-ada assets associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static entries FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<entries>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance6
    {
        /// <summary>
        /// Available Ada UTxO balance (funds that can be spent without condition).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// The Ada balance of the reward account for this wallet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward { get; set; } = default!;

        /// <summary>
        /// Total Ada balance (available balance plus pending change and reward balance).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets7
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation6
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active7 Active { get; set; } = new Active7();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next6> Next { get; set; } = new System.Collections.ObjectModel.Collection<next6>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase6
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip6
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height6 Height { get; set; } = new Height6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance7
    {
        /// <summary>
        /// Available Ada UTxO balance (funds that can be spent without condition).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// The Ada balance of the reward account for this wallet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward { get; set; } = default!;

        /// <summary>
        /// Total Ada balance (available balance plus pending change and reward balance).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets8
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation7
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active8 Active { get; set; } = new Active8();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next7> Next { get; set; } = new System.Collections.ObjectModel.Collection<next7>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase7
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip7
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height7 Height { get; set; } = new Height7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_min2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_min2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_min2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_min2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_max2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_max2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_max2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_max2>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class minimum_coins
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public minimum_coinsUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static minimum_coins FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<minimum_coins>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response9Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs4
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount25 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets23> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs2
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount26 Amount { get; set; } = new Amount26();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets24> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral2
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount27 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount28 Amount { get; set; } = new Amount28();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets25> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals2
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount29 Amount { get; set; } = new Amount29();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response9Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata17
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response9Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint4
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens5> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens5>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn3
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens6> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens6>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval6
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before4 Invalid_before { get; set; } = new Invalid_before4();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter4 Invalid_hereafter { get; set; } = new Invalid_hereafter4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs5
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount30 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets26> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs3
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount31 Amount { get; set; } = new Amount31();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets27> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral3
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount32 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs2
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount33 Amount { get; set; } = new Amount33();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets28> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals3
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount34 Amount { get; set; } = new Amount34();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata18
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint5
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens7> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens7>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn4
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens8> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens8>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval7
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before5 Invalid_before { get; set; } = new Invalid_before5();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter5 Invalid_hereafter { get; set; } = new Invalid_hereafter5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response10Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs6
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount35 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets29> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs4
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount36 Amount { get; set; } = new Amount36();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets30> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral4
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount37 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs3
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount38 Amount { get; set; } = new Amount38();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets31> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals4
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount39 Amount { get; set; } = new Amount39();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response10Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata19
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response10Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint6
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens9> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens9>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn5
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens10> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens10>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval8
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before6 Invalid_before { get; set; } = new Invalid_before6();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter6 Invalid_hereafter { get; set; } = new Invalid_hereafter6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response11Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"transaction_already_in_ledger")]
        Transaction_already_in_ledger = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Info
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Transaction_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Info FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Info>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coin_selection2
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs21> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs21>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs19> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs19>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change5> Change { get; set; } = new System.Collections.ObjectModel.Collection<change5>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral19> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals19> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates5> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken8> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned8> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Coin_selection2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Coin_selection2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint7
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens11> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens11>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn6
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens12> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens12>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata20
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata20>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken2>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response13Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval9
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before7 Invalid_before { get; set; } = new Invalid_before7();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter7 Invalid_hereafter { get; set; } = new Invalid_hereafter7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Witness_count2
    {
        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verification_key")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Verification_key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scripts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<scripts2> Scripts { get; set; } = new System.Collections.ObjectModel.Collection<scripts2>();

        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bootstrap")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Bootstrap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Witness_count2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Witness_count2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ours
    {
        /// <summary>
        /// A soft derivation index.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int Index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake7 Stake { get; set; } = new Stake7();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward_balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reward_balance5 Reward_balance { get; set; } = new Reward_balance5();

        /// <summary>
        /// Delegation settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("delegation")]
        [System.ComponentModel.DataAnnotations.Required]
        public Delegation10 Delegation { get; set; } = new Delegation10();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ours FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ours>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class foreign
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake8 Stake { get; set; } = new Stake8();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward_balance")]
        [System.ComponentModel.DataAnnotations.Required]
        public Reward_balance6 Reward_balance { get; set; } = new Reward_balance6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static foreign FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<foreign>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class None2
    {
        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public Stake9 Stake { get; set; } = new Stake9();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static None2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<None2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metrics2
    {
        /// <summary>
        /// The rewards the wallet can expect to receive at the end of an epoch, in the long term, if delegating to
        /// <br/>this pool.
        /// <br/>
        /// <br/>For more details, see the
        /// <br/>[Design Specification for Delegation and Incentives in Cardano](https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec)
        /// <br/>document.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("non_myopic_member_rewards")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Non_myopic_member_rewards { get; set; } = default!;

        /// <summary>
        /// The live pool stake relative to the *total* stake.
        /// <br/>
        /// <br/>For more details, see the section "Relative Stake: Active vs Total" in
        /// <br/>[Design Specification for Delegation and Incentives in Cardano](https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relative_stake")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Relative_stake { get; set; } = default!;

        /// <summary>
        /// Saturation-level of the pool based on the desired number of pools aimed by the network.
        /// <br/>A value above `1` indicates that the pool is saturated.
        /// <br/>
        /// <br/>The `non_myopic_member_rewards` take oversaturation into account, as specified by the [specs](https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec).
        /// <br/>
        /// <br/>The saturation is based on the live `relative_stake`. The saturation at the end of epoch e,
        /// <br/>will affect the rewards paid out at the end of epoch e+3.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("saturation")]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Saturation { get; set; } = default!;

        /// <summary>
        /// Number of blocks produced by a given stake pool in its lifetime.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("produced_blocks")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Produced_blocks { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metrics2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metrics2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata21
    {

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 3)]
        public string Ticker { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homepage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Homepage { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum flags
    {

        [System.Runtime.Serialization.EnumMember(Value = @"delisted")]
        Delisted = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response17Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"query_param_missing")]
        Query_param_missing = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_min3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_min3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_min3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_min3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_max3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_max3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_max3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_max3>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class minimum_coins2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Minimum_coins2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static minimum_coins2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<minimum_coins2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response19Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cannot_cover_fee")]
        Cannot_cover_fee = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response20Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs7
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount40 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets32> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs5
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount41 Amount { get; set; } = new Amount41();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets33> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral5
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount42 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs4
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount43 Amount { get; set; } = new Amount43();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets34> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals5
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount44 Amount { get; set; } = new Amount44();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response20Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata22
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response20Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint8
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens13> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens13>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn7
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens14> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens14>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval10
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before8 Invalid_before { get; set; } = new Invalid_before8();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter8 Invalid_hereafter { get; set; } = new Invalid_hereafter8();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response21Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs8
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount45 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets35> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs6
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount46 Amount { get; set; } = new Amount46();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets36> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral6
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount47 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs5
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount48 Amount { get; set; } = new Amount48();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets37> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals6
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount49 Amount { get; set; } = new Amount49();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response21Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata23
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response21Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint9
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens15> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens15>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn8
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens16> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens16>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval11
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before9 Invalid_before { get; set; } = new Invalid_before9();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter9 Invalid_hereafter { get; set; } = new Invalid_hereafter9();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response22Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs9
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount50 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets38> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs7
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount51 Amount { get; set; } = new Amount51();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets39> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral7
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount52 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs6
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount53 Amount { get; set; } = new Amount53();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets40> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals7
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount54 Amount { get; set; } = new Amount54();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response22Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata24
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response22Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint10
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens17> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens17>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn9
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens18> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens18>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval12
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before10 Invalid_before { get; set; } = new Invalid_before10();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter10 Invalid_hereafter { get; set; } = new Invalid_hereafter10();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs10
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount55 Amount { get; set; } = new Amount55();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets41> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs8
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount56 Amount { get; set; } = new Amount56();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets42> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount57 Amount { get; set; } = new Amount57();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets43> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral8
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount58 Amount { get; set; } = new Amount58();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals8
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount59 Amount { get; set; } = new Amount59();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals8>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public certificatesCertificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken3>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee12
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee12Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Direction2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs11
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount60 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets44> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs9
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount61 Amount { get; set; } = new Amount61();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets45> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral9
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount62 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs7
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount63 Amount { get; set; } = new Amount63();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets46> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals9
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount64 Amount { get; set; } = new Amount64();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata25
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Script_validity2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint11
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens19> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens19>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn10
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens20> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens20>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval13
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before11 Invalid_before { get; set; } = new Invalid_before11();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter11 Invalid_hereafter { get; set; } = new Invalid_hereafter11();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class selections
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs22> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs22>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs20> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs20>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change6> Change { get; set; } = new System.Collections.ObjectModel.Collection<change6>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral20> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals20> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates6> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken9> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned9> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static selections FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<selections>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response25Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nothing_to_migrate")]
        Nothing_to_migrate = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance8
    {
        /// <summary>
        /// Available balance (funds that can be spent)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total balance (available balance plus pending change)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets9
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response27Discovery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sequential")]
        Sequential = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase8
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip8
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height8 Height { get; set; } = new Height8();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance9
    {
        /// <summary>
        /// Available balance (funds that can be spent)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total balance (available balance plus pending change)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets10
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Discovery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sequential")]
        Sequential = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase9
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip9
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height9 Height { get; set; } = new Height9();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata26
    {
        /// <summary>
        /// A human-readable name for the asset, intended for display in user
        /// <br/>interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A human-readable description for the asset. Good for display in
        /// <br/>user interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// An optional human-readable very short name or acronym for the
        /// <br/>asset, intended for display in user interfaces. If `ticker` is not
        /// <br/>present, then `name` will be used, but it might be truncated to
        /// <br/>fit within the available space.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        public string Ticker { get; set; } = default!;

        /// <summary>
        /// Defines a scaling factor for the asset of 10&lt;sup&gt;-n&lt;/sup&gt;. The
        /// <br/>decimals value _n_ is therefore the number of digits after the
        /// <br/>decimal point for quantities of this token.
        /// <br/>
        /// <br/>It is up to API clients to use this metadata field to decimalize
        /// <br/>asset quantities before displaying to users. The wallet backend
        /// <br/>will always return unscaled token quantities as whole numbers.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decimals")]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int Decimals { get; set; } = default!;

        /// <summary>
        /// A URL to the policy's owner(s) or the entity website in charge of the asset.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        /// <summary>
        /// A base64-encoded `image/png` for displaying the asset. The end image can be expected
        /// <br/>to be smaller than 64KB.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logo")]
        [System.ComponentModel.DataAnnotations.StringLength(87400)]
        public byte[] Logo { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Metadata_error2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fetch")]
        Fetch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parse")]
        Parse = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata27
    {
        /// <summary>
        /// A human-readable name for the asset, intended for display in user
        /// <br/>interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A human-readable description for the asset. Good for display in
        /// <br/>user interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// An optional human-readable very short name or acronym for the
        /// <br/>asset, intended for display in user interfaces. If `ticker` is not
        /// <br/>present, then `name` will be used, but it might be truncated to
        /// <br/>fit within the available space.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        public string Ticker { get; set; } = default!;

        /// <summary>
        /// Defines a scaling factor for the asset of 10&lt;sup&gt;-n&lt;/sup&gt;. The
        /// <br/>decimals value _n_ is therefore the number of digits after the
        /// <br/>decimal point for quantities of this token.
        /// <br/>
        /// <br/>It is up to API clients to use this metadata field to decimalize
        /// <br/>asset quantities before displaying to users. The wallet backend
        /// <br/>will always return unscaled token quantities as whole numbers.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decimals")]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int Decimals { get; set; } = default!;

        /// <summary>
        /// A URL to the policy's owner(s) or the entity website in charge of the asset.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        /// <summary>
        /// A base64-encoded `image/png` for displaying the asset. The end image can be expected
        /// <br/>to be smaller than 64KB.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logo")]
        [System.ComponentModel.DataAnnotations.StringLength(87400)]
        public byte[] Logo { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response28Metadata_error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fetch")]
        Fetch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parse")]
        Parse = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata28
    {
        /// <summary>
        /// A human-readable name for the asset, intended for display in user
        /// <br/>interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// A human-readable description for the asset. Good for display in
        /// <br/>user interfaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Description { get; set; } = default!;

        /// <summary>
        /// An optional human-readable very short name or acronym for the
        /// <br/>asset, intended for display in user interfaces. If `ticker` is not
        /// <br/>present, then `name` will be used, but it might be truncated to
        /// <br/>fit within the available space.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ticker")]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        public string Ticker { get; set; } = default!;

        /// <summary>
        /// Defines a scaling factor for the asset of 10&lt;sup&gt;-n&lt;/sup&gt;. The
        /// <br/>decimals value _n_ is therefore the number of digits after the
        /// <br/>decimal point for quantities of this token.
        /// <br/>
        /// <br/>It is up to API clients to use this metadata field to decimalize
        /// <br/>asset quantities before displaying to users. The wallet backend
        /// <br/>will always return unscaled token quantities as whole numbers.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("decimals")]
        [System.ComponentModel.DataAnnotations.Range(0, 255)]
        public int Decimals { get; set; } = default!;

        /// <summary>
        /// A URL to the policy's owner(s) or the entity website in charge of the asset.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^https://.+")]
        public System.Uri Url { get; set; } = default!;

        /// <summary>
        /// A base64-encoded `image/png` for displaying the asset. The end image can be expected
        /// <br/>to be smaller than 64KB.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("logo")]
        [System.ComponentModel.DataAnnotations.StringLength(87400)]
        public byte[] Logo { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response29Metadata_error
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fetch")]
        Fetch = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"parse")]
        Parse = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Total3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Total3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Total3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Total3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response30Scale
    {

        [System.Runtime.Serialization.EnumMember(Value = @"log10")]
        Log10 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class entries2
    {
        /// <summary>
        /// The ada quantity associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ada")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Ada { get; set; } = default!;

        /// <summary>
        /// The set of non-ada assets associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static entries2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<entries2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance10
    {
        /// <summary>
        /// Available balance (funds that can be spent)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total balance (available balance plus pending change)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets11
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response32Discovery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sequential")]
        Sequential = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase10
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip10
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height10 Height { get; set; } = new Height10();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance11
    {
        /// <summary>
        /// Available Ada UTxO balance (funds that can be spent without condition).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// The Ada balance of the reward account for this wallet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reward")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward { get; set; } = default!;

        /// <summary>
        /// Total Ada balance (available balance plus pending change and reward balance).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Balance11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Balance11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Assets12
    {
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without
        /// <br/>condition).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Available { get; set; } = default!;

        /// <summary>
        /// Total asset balances (available balances plus pending change balances).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Assets12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Assets12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation8
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active9 Active { get; set; } = new Active9();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next8> Next { get; set; } = new System.Collections.ObjectModel.Collection<next8>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Passphrase11
    {

        [System.Text.Json.Serialization.JsonPropertyName("last_updated_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Last_updated_at { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Passphrase11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Passphrase11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tip11
    {
        /// <summary>
        /// The 0-based slot index starting from genesis of the blockchain.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("absolute_slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Absolute_slot_number { get; set; } = default!;

        /// <summary>
        /// The zero-based slot index within an epoch.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slot_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_number { get; set; } = default!;

        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        [System.ComponentModel.DataAnnotations.Required]
        public Height11 Height { get; set; } = new Height11();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tip11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tip11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response34State
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_min4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_min4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_min4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_min4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Estimated_max4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Estimated_max4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Estimated_max4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Estimated_max4>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class minimum_coins3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Minimum_coins3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static minimum_coins3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<minimum_coins3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee13
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee13Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response36Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs12
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount65 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets47> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs10
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount66 Amount { get; set; } = new Amount66();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets48> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral10
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount67 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs8
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount68 Amount { get; set; } = new Amount68();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets49> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals10
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount69 Amount { get; set; } = new Amount69();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response36Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata29
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response36Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint12
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens21> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens21>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn11
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens22> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens22>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval14
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before12 Invalid_before { get; set; } = new Invalid_before12();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter12 Invalid_hereafter { get; set; } = new Invalid_hereafter12();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee14
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee14Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Direction3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs13
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount70 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets50> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs11
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount71 Amount { get; set; } = new Amount71();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets51> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral11
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount72 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs9
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount73 Amount { get; set; } = new Amount73();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets52> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals11
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount74 Amount { get; set; } = new Amount74();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata30
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Script_validity3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint13
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens23> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens23>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn12
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens24> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens24>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval15
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before13 Invalid_before { get; set; } = new Invalid_before13();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter13 Invalid_hereafter { get; set; } = new Invalid_hereafter13();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee15
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee15Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response37Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs14
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount75 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets53> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs12
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount76 Amount { get; set; } = new Amount76();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets54> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral12
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount77 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs10
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount78 Amount { get; set; } = new Amount78();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets55> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals12
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount79 Amount { get; set; } = new Amount79();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response37Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata31
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response37Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint14
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens25> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens25>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn13
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens26> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens26>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval16
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before14 Invalid_before { get; set; } = new Invalid_before14();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter14 Invalid_hereafter { get; set; } = new Invalid_hereafter14();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response38Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"transaction_already_in_ledger")]
        Transaction_already_in_ledger = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Info2
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("transaction_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Transaction_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Info2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Info2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs15
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount80 Amount { get; set; } = new Amount80();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets56> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs13
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount81 Amount { get; set; } = new Amount81();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets57> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change2
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount82 Amount { get; set; } = new Amount82();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets58> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral13
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount83 Amount { get; set; } = new Amount83();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals13
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount84 Amount { get; set; } = new Amount84();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals13>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates2
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Certificates2Certificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates2>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken4>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee16
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee16Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken12
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken12Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned12
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned12Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Direction4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs16
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount85 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets59> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs14
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount86 Amount { get; set; } = new Amount86();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets60> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral14
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount87 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs11
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount88 Amount { get; set; } = new Amount88();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets61> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals14
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount89 Amount { get; set; } = new Amount89();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata32
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Script_validity4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint15
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens27> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens27>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn14
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens28> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens28>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval17
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before15 Invalid_before { get; set; } = new Invalid_before15();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter15 Invalid_hereafter { get; set; } = new Invalid_hereafter15();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class selections2
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs23> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs23>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs21> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs21>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change7> Change { get; set; } = new System.Collections.ObjectModel.Collection<change7>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral21> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals21> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates7> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken10> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned10> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static selections2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<selections2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response41Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nothing_to_migrate")]
        Nothing_to_migrate = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Next_epoch2
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Next_epoch2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Next_epoch2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response42Node_era
    {

        [System.Runtime.Serialization.EnumMember(Value = @"byron")]
        Byron = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"shelley")]
        Shelley = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"allegra")]
        Allegra = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"mary")]
        Mary = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"alonzo")]
        Alonzo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"babbage")]
        Babbage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"conway")]
        Conway = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Network_info2
    {
        /// <summary>
        /// The unique magic number defining the network the wallet is working on.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("protocol_magic")]
        public int Protocol_magic { get; set; } = default!;

        /// <summary>
        /// A name just distinguishing mainnet from testnets
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("network_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Network_info2Network_id Network_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Network_info2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Network_info2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response42Wallet_mode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"light")]
        Light = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"node")]
        Node = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Slot_length2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Slot_length2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Slot_length2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Slot_length2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Epoch_length2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Epoch_length2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Epoch_length2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Epoch_length2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Security_parameter2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Security_parameter2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Security_parameter2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Security_parameter2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active_slot_coefficient2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active_slot_coefficient2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active_slot_coefficient2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active_slot_coefficient2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Decentralization_level2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Decentralization_level2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Decentralization_level2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Decentralization_level2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Eras2
    {

        [System.Text.Json.Serialization.JsonPropertyName("byron")]
        public object? Byron { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shelley")]
        public object? Shelley { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allegra")]
        public object? Allegra { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mary")]
        public object? Mary { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alonzo")]
        public object? Alonzo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("babbage")]
        public object? Babbage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conway")]
        public object? Conway { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Eras2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Eras2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response45Address_style
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Shelley")]
        Shelley = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Icarus")]
        Icarus = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Byron")]
        Byron = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response45Stake_reference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"by value")]
        By_value = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"by pointer")]
        By_pointer = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pointer2
    {

        [System.Text.Json.Serialization.JsonPropertyName("slot_num")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slot_num { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transaction_index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Transaction_index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("output_index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Output_index { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Pointer2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Pointer2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response48Health
    {

        [System.Runtime.Serialization.EnumMember(Value = @"available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unavailable")]
        Unavailable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unreachable")]
        Unreachable = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"no_smash_configured")]
        No_smash_configured = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Total4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Total4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Total4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Total4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response49Scale
    {

        [System.Runtime.Serialization.EnumMember(Value = @"log10")]
        Log10 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class entries3
    {
        /// <summary>
        /// The ada quantity associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ada")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Ada { get; set; } = default!;

        /// <summary>
        /// The set of non-ada assets associated with this UTxO entry.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static entries3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<entries3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Coin_selection3
    {
        /// <summary>
        /// A list of transaction inputs
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<inputs24> Inputs { get; set; } = new System.Collections.ObjectModel.Collection<inputs24>();

        /// <summary>
        /// A list of target outputs with amounts specified.
        /// <br/>
        /// <br/>When creating a new transaction, the wallet software ensures that all
        /// <br/>user-specified transaction outputs have ada amounts that satisfy the ledger
        /// <br/>minimum UTxO rule:
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **zero**, the wallet software will automatically assign a minimal amount
        /// <br/>  of ada to the output so that it satisfies the ledger minimum UTxO rule.
        /// <br/>
        /// <br/>- If a user-specified transaction output has an ada `amount` that is
        /// <br/>  **non-zero**, the wallet software will verify that the specified amount
        /// <br/>  is large enough to satisfy the ledger minimum UTxO rule. If the amount is
        /// <br/>  not large enough, the wallet software will return a `utxo_too_small`
        /// <br/>  error, together with a revised ada amount that does satisfy the minimum
        /// <br/>  UTxO rule.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("outputs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<outputs22> Outputs { get; set; } = new System.Collections.ObjectModel.Collection<outputs22>();

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<change8> Change { get; set; } = new System.Collections.ObjectModel.Collection<change8>();

        /// <summary>
        /// A list of transaction inputs used for collateral
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collateral")]
        public System.Collections.Generic.ICollection<collateral22> Collateral { get; set; } = default!;

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("withdrawals")]
        public System.Collections.Generic.ICollection<withdrawals22> Withdrawals { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificates")]
        public System.Collections.Generic.ICollection<certificates8> Certificates { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_taken")]
        public System.Collections.Generic.ICollection<deposits_taken11> Deposits_taken { get; set; } = default!;

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deposits_returned")]
        public System.Collections.Generic.ICollection<deposits_returned11> Deposits_returned { get; set; } = default!;

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public byte[] Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Coin_selection3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Coin_selection3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee17
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee17Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee18
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee18Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint16
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens29> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens29>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn15
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens30> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens30>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata33
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata33>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken5>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response52Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval18
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before16 Invalid_before { get; set; } = new Invalid_before16();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter16 Invalid_hereafter { get; set; } = new Invalid_hereafter16();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Witness_count3
    {
        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verification_key")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Verification_key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scripts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<scripts3> Scripts { get; set; } = new System.Collections.ObjectModel.Collection<scripts3>();

        /// <summary>
        /// The number of witnesses detected
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bootstrap")]
        [System.ComponentModel.DataAnnotations.Range(0, 127)]
        public int Bootstrap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Witness_count3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Witness_count3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee19
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee19Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken13
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken13Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned13
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned13Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Direction5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs17
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount90 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets62> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs15
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount91 Amount { get; set; } = new Amount91();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets63> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral15
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount92 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs12
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount93 Amount { get; set; } = new Amount93();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets64> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals15
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount94 Amount { get; set; } = new Amount94();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata34
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Script_validity5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint17
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens31> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens31>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn16
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens32> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens32>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval19
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before17 Invalid_before { get; set; } = new Invalid_before17();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter17 Invalid_hereafter { get; set; } = new Invalid_hereafter17();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee20
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Fee20Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Fee20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Fee20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_taken14
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_taken14Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_taken14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_taken14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deposit_returned14
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposit_returned14Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deposit_returned14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deposit_returned14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response54Direction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"outgoing")]
        Outgoing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incoming")]
        Incoming = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs18
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount95 Amount { get; set; } = default!;

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets65> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs16
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount96 Amount { get; set; } = new Amount96();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets66> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral16
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public Amount97 Amount { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral_outputs13
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount98 Amount { get; set; } = new Amount98();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets67> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral_outputs13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral_outputs13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals16
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount99 Amount { get; set; } = new Amount99();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response54Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"submitted")]
        Submitted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"in_ledger")]
        In_ledger = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata35
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Metadata35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Metadata35>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response54Script_validity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"valid")]
        Valid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invalid")]
        Invalid = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint18
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens33> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens33>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Burn17
    {

        [System.Text.Json.Serialization.JsonPropertyName("tokens")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<tokens34> Tokens { get; set; } = new System.Collections.ObjectModel.Collection<tokens34>();

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_hash")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^((policy_vk)|(policy_vkh))1[0-9a-z]*$")]
        public string Wallet_policy_key_hash { get; set; } = default!;

        /// <summary>
        /// An individual segment within a derivation path.
        /// <br/>
        /// <br/>The `H` suffix indicates a _Hardened_ child private key, which
        /// <br/>means that children of this key cannot be derived from the public
        /// <br/>key. Indices without a `H` suffix are called _Soft_.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wallet_policy_key_index")]
        public string Wallet_policy_key_index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Burn17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Burn17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Validity_interval20
    {

        [System.Text.Json.Serialization.JsonPropertyName("invalid_before")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_before18 Invalid_before { get; set; } = new Invalid_before18();

        [System.Text.Json.Serialization.JsonPropertyName("invalid_hereafter")]
        [System.ComponentModel.DataAnnotations.Required]
        public Invalid_hereafter18 Invalid_hereafter { get; set; } = new Invalid_hereafter18();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Validity_interval20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Validity_interval20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Slot_no2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Slot_no2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Slot_no2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Slot_no2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Block_height2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Block_height2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Block_height2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Block_height2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network_infoNetwork_id
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mainnet")]
        Mainnet = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"testnet")]
        Testnet = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Slot_lengthUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"second")]
        Second = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Epoch_lengthUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Security_parameterUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active_slot_coefficientUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Decentralization_levelUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AmountUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets2
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount2>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets3
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Delegation_actionAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"quit")]
        Quit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"join")]
        Join = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount3>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets4
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount4>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets5
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount5>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets6
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount6>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets7
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CertificatesCertificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_takenUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returnedUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Gc_stake_poolsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_applicable")]
        Not_applicable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"not_started")]
        Not_started = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"restarting")]
        Restarting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"has_run")]
        Has_run = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_minUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_maxUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Minimum_coinsUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DepositUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_scriptScript_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference3
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script2
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script2Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference5 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets8
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs19
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount100 Amount { get; set; } = new Amount100();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets68> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs17
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount101 Amount { get; set; } = new Amount101();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets69> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change3
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount102 Amount { get; set; } = new Amount102();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets70> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral17
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount103 Amount { get; set; } = new Amount103();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals17
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount104 Amount { get; set; } = new Amount104();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals17>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates3
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Certificates3Certificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates3>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken6>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_beforeUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafterUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScriptsScript_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference4
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script3 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets71> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets71>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens2
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script4 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets72> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets72>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum deposits_takenUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum deposits_returnedUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class scripts
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public scriptsScript_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference6 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static scripts FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<scripts>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_takenUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returnedUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount9>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets9
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount10>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets10
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount12
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount12Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount12>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets11
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount13
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount13Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens3
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script5 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets73> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets73>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens4
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script6 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets74> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets74>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ActiveStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NextStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at2
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active2
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active2Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting4 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active2>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public nextStatus Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting5 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at3 Changes_at { get; set; } = new Changes_at3();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public HeightUnit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height2
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height2Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active3
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active3Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting6 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active3>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next2
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next2Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting7 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at4 Changes_at { get; set; } = new Changes_at4();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum State4Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"incomplete")]
        Incomplete = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdaUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs20
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount105 Amount { get; set; } = new Amount105();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets75> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs18
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount106 Amount { get; set; } = new Amount106();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets76> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change4
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount107 Amount { get; set; } = new Amount107();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets77> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral18
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount108 Amount { get; set; } = new Amount108();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals18
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount109 Amount { get; set; } = new Amount109();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals18>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates4
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Certificates4Certificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates4>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken7>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TotalUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount14
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount14Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount14>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets12
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount15
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount15Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount15>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets13
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount16
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount16Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount16>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets14
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount17
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount17Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount17>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets15
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount18
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount18Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount18>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets16
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount19
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount19Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount19>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets17
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint19
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiving_address")]
        public string Receiving_address { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Encrypt_metadataMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation2
    {

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint20 Mint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Operation2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Operation2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StakeUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Reward_balanceUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active4
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active4Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting8 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active4>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next3
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next3Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting9 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at5 Changes_at { get; set; } = new Changes_at5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Reward_balance2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reward_balance3
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Reward_balance3Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reward_balance3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reward_balance3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation9
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active10 Active { get; set; } = new Active10();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next9> Next { get; set; } = new System.Collections.ObjectModel.Collection<next9>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reward_balance4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Reward_balance4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reward_balance4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reward_balance4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount20
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount20Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount20>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets18
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Slot_noUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Block_heightUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Encrypt_metadata2Method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation3
    {

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint21 Mint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Operation3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Operation3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount21
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount21Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount21>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets19
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount22
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount22Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount22>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets20
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount23
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount23Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount23>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets21
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount24
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount24Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount24>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets22
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Encrypt_metadata3Method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation4
    {

        [System.Text.Json.Serialization.JsonPropertyName("mint")]
        public Mint22 Mint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Operation4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Operation4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active5
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active5Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting10 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active5>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next4
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next4Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting11 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at6 Changes_at { get; set; } = new Changes_at6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active6
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active6Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting12 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active6>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next5
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next5Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting13 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at7 Changes_at { get; set; } = new Changes_at7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Total2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active7
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active7Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting14 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active7>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next6
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next6Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting15 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at8 Changes_at { get; set; } = new Changes_at8();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active8
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active8Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting16 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active8>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next7
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next7Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting17 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at9 Changes_at { get; set; } = new Changes_at9();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_min2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_max2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum minimum_coinsUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount25
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount25Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount25>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets23
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount26
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount26Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount26>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets24
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount27
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount27Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount28
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount28Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount28>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets25
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount29
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount29Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens5
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script7 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets78> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets78>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens6
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script8 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets79> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets79>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter4
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter4Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount30
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount30Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount30>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets26
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount31
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount31Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount31>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets27
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount32
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount32Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount33
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount33Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount33>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets28
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount34
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount34Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens7
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script9 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets80> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets80>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens8
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script10 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets81> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets81>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount35
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount35Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount35>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets29
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount36
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount36Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount36 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount36>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets30
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount37
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount37Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount37 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount37>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount38
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount38Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount38 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount38>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets31
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount39
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount39Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount39 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount39>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens9
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script11 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets82> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets82>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens10
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script12 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets83> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets83>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs21
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount110 Amount { get; set; } = new Amount110();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets84> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs19
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount111 Amount { get; set; } = new Amount111();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets85> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change5
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount112 Amount { get; set; } = new Amount112();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets86> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral19
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount113 Amount { get; set; } = new Amount113();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals19
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount114 Amount { get; set; } = new Amount114();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals19>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates5
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Certificates5Certificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates5>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken8>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens11
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script13 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets87> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets87>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens12
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script14 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets88> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets88>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class scripts2
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Scripts2Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference7 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static scripts2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<scripts2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake7
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake7Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reward_balance5
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Reward_balance5Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reward_balance5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reward_balance5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegation10
    {
        /// <summary>
        /// Currently active delegation status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        [System.ComponentModel.DataAnnotations.Required]
        public Active11 Active { get; set; } = new Active11();

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<next10> Next { get; set; } = new System.Collections.ObjectModel.Collection<next10>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Delegation10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Delegation10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reward_balance6
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Reward_balance6Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reward_balance6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reward_balance6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stake9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Stake9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Stake9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Stake9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_min3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_max3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Minimum_coins2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount40
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount40Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount40 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount40>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets32
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount41
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount41Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount41 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount41>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets33
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets33>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount42
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount42Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount42 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount42>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount43
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount43Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount43 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount43>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets34
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount44
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount44Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount44 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount44>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens13
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script15 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets89> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets89>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens14
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script16 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets90> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets90>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount45
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount45Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount45 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount45>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets35
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets35>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount46
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount46Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount46 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount46>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets36
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets36 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets36>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount47
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount47Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount47 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount47>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount48
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount48Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount48 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount48>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets37
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets37 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets37>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount49
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount49Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount49 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount49>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens15
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script17 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets91> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets91>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens16
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script18 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets92> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets92>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount50
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount50Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount50 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount50>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets38
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets38 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets38>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount51
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount51Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount51 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount51>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets39
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets39 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets39>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount52
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount52Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount52 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount52>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount53
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount53Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount53 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount53>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets40
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets40 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets40>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount54
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount54Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount54 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount54>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens17
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script19 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets93> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets93>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens18
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script20 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets94> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets94>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount55
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount55Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount55 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount55>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets41
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets41 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets41>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount56
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount56Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount56 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount56>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets42
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets42 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets42>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount57
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount57Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount57 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount57>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets43
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets43 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets43>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount58
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount58Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount58 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount58>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount59
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount59Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount59 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount59>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum certificatesCertificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee12Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount60
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount60Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount60 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount60>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets44
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets44 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets44>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount61
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount61Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount61 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount61>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets45
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets45 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets45>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount62
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount62Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount62 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount62>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount63
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount63Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount63 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount63>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets46
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets46 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets46>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount64
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount64Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount64 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount64>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens19
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script21 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets95> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets95>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens20
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script22 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets96> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets96>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs22
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount115 Amount { get; set; } = new Amount115();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets97> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs20
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount116 Amount { get; set; } = new Amount116();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets98> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change6
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount117 Amount { get; set; } = new Amount117();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets99> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral20
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount118 Amount { get; set; } = new Amount118();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals20
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount119 Amount { get; set; } = new Amount119();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals20>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates6
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Certificates6Certificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates6>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken9>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height8
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height8Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height9
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height9Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Total3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active9
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active9Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting18 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active9>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next8
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next8Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting19 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at10 Changes_at { get; set; } = new Changes_at10();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Height11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Height11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Height11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Height11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_min4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Estimated_max4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Minimum_coins3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee13Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount65
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount65Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount65 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount65>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets47
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets47 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets47>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount66
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount66Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount66 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount66>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets48
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets48 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets48>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount67
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount67Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount67 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount67>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount68
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount68Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount68 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount68>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets49
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets49 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets49>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount69
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount69Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount69 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount69>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens21
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script23 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets100> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets100>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens22
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script24 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets101> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets101>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before12
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before12Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter12
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter12Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee14Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount70
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount70Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount70 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount70>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets50
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets50 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets50>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount71
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount71Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount71 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount71>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets51
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets51 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets51>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount72
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount72Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount72 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount72>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount73
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount73Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount73 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount73>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets52
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets52 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets52>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount74
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount74Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount74 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount74>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens23
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script25 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets102> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets102>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens24
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script26 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets103> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets103>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before13
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before13Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter13
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter13Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee15Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount75
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount75Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount75 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount75>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets53
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets53 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets53>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount76
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount76Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount76 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount76>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets54
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets54 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets54>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount77
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount77Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount77 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount77>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount78
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount78Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount78 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount78>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets55
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets55 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets55>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount79
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount79Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount79 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount79>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens25
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script27 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets104> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets104>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens26
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script28 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets105> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets105>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before14
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before14Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter14
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter14Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount80
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount80Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount80 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount80>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets56
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets56 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets56>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount81
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount81Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount81 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount81>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets57
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets57 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets57>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount82
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount82Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount82 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount82>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets58
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets58 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets58>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount83
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount83Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount83 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount83>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount84
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount84Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount84 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount84>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Certificates2Certificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee16Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken12Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned12Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount85
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount85Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount85 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount85>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets59
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets59 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets59>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount86
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount86Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount86 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount86>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets60
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets60 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets60>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount87
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount87Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount87 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount87>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount88
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount88Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount88 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount88>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets61
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets61 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets61>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount89
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount89Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount89 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount89>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens27
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script29 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets106> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets106>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens28
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script30 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets107> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets107>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before15
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before15Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter15
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter15Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs23
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount120 Amount { get; set; } = new Amount120();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets108> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs21
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount121 Amount { get; set; } = new Amount121();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets109> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change7
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount122 Amount { get; set; } = new Amount122();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets110> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral21
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount123 Amount { get; set; } = new Amount123();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals21
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount124 Amount { get; set; } = new Amount124();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals21>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates7
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Certificates7Certificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates7>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken10>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned10
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned10Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network_info2Network_id
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mainnet")]
        Mainnet = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"testnet")]
        Testnet = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Slot_length2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"second")]
        Second = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Epoch_length2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Security_parameter2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active_slot_coefficient2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Decentralization_level2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"percent")]
        Percent = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Total4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class inputs24
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount125 Amount { get; set; } = new Amount125();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets111> Assets { get; set; } = default!;

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static inputs24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<inputs24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class outputs22
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount126 Amount { get; set; } = new Amount126();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets112> Assets { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static outputs22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<outputs22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class change8
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount127 Amount { get; set; } = new Amount127();

        /// <summary>
        /// A flat list of assets (possibly empty).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        public System.Collections.Generic.ICollection<assets113> Assets { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static change8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<change8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class collateral22
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount128 Amount { get; set; } = new Amount128();

        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static collateral22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<collateral22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class withdrawals22
    {

        [System.Text.Json.Serialization.JsonPropertyName("stake_address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stake_address { get; set; } = default!;

        /// <summary>
        /// A path for deriving a child key from a parent key.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("derivation_path")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<string> Derivation_path { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount129 Amount { get; set; } = new Amount129();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static withdrawals22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<withdrawals22>(data, options);

        }

    }

    /// <summary>
    /// A delegation certificate belonging to wallet
    /// <br/>
    /// <br/>Only for 'join_pool' the 'pool' property is required.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class certificates8
    {

        [System.Text.Json.Serialization.JsonPropertyName("certificate_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Certificates8Certificate_type Certificate_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pool")]
        public object Pool { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reward_account_path")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Reward_account_path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static certificates8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<certificates8>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_taken11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_taken11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_taken11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_taken11>(data, options);

        }

    }

    /// <summary>
    /// Coins, in Lovelace. Only relates to 'Ada'. Refer to `assets` for multi-assets wallets instead.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class deposits_returned11
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Deposits_returned11Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static deposits_returned11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<deposits_returned11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee17Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee18Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens29
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script31 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets114> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets114>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens30
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script32 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets115> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets115>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before16
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before16Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter16
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter16Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class scripts3
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Scripts3Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference8 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static scripts3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<scripts3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee19Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken13Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned13Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount90
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount90Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount90 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount90>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets62
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets62 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets62>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount91
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount91Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount91 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount91>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets63
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets63 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets63>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount92
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount92Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount92 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount92>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount93
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount93Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount93 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount93>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets64
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets64 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets64>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount94
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount94Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount94 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount94>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens31
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script33 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets116> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets116>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens32
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script34 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets117> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets117>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before17
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before17Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter17
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter17Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fee20Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_taken14Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposit_returned14Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount95
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount95Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount95 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount95>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets65
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets65 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets65>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount96
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount96Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount96 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount96>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets66
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets66 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets66>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount97
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount97Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount97 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount97>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount98
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount98Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount98 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount98>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets67
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets67 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets67>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount99
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount99Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount99 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount99>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens33
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script35 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets118> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets118>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens33>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class tokens34
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy_script")]
        [System.ComponentModel.DataAnnotations.Required]
        public Policy_script36 Policy_script { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assets")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<assets119> Assets { get; set; } = new System.Collections.ObjectModel.Collection<assets119>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static tokens34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<tokens34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_before18
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_before18Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_before18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_before18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Invalid_hereafter18
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Invalid_hereafter18Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invalid_hereafter18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invalid_hereafter18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Slot_no2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Block_height2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AmountUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script2Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference5
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount100
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount100Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount100 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount100>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets68
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets68 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets68>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount101
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount101Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount101 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount101>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets69
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets69 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets69>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount102
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount102Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount102 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount102>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets70
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets70 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets70>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount103
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount103Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount103 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount103>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount104
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount104Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount104 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount104>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Certificates3Certificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script3
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script3Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference9 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets71
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets71 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets71>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script4
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script4Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference10 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets72
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets72 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets72>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum scriptsScript_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference6
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount12Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount13Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script5
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script5Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference11 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets73
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets73 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets73>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script6
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script6Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference12 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets74
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets74 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets74>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active2Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum nextStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at3
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum HeightUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height2Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active3Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next2Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at4
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount105
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount105Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount105 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount105>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets75
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets75 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets75>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount106
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount106Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount106 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount106>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets76
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets76 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets76>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount107
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount107Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount107 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount107>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets77
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets77 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets77>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount108
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount108Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount108 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount108>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount109
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount109Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount109 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount109>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Certificates4Certificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount14Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount15Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount16Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount17Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount18Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount19Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint20
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiving_address")]
        public string Receiving_address { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active4Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next3Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at5
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Reward_balance3Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active10
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active10Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting20 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active10>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next9
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next9Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting21 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at11 Changes_at { get; set; } = new Changes_at11();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Reward_balance4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount20Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint21
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiving_address")]
        public string Receiving_address { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount21Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount22Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount23Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount24Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mint22
    {
        /// <summary>
        /// A sequence of characters that encodes (in Base58 or Bech32) a sequence of bytes
        /// <br/>which represents an address on the Cardano blockchain.
        /// <br/>Sequences in Base58 encoding are expected to be legacy Byron addresses,
        /// <br/>whereas sequences in Bech32 encoding correspond to current Shelley addresses.
        /// <br/>
        /// <br/>For more details, see
        /// <br/>[CIP-0019 — Cardano addresses](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019)
        /// <br/>.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("receiving_address")]
        public string Receiving_address { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Mint22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Mint22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active5Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next4Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at6
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active6Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next5Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at7
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active7Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next6Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at8
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active8Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next7Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at9
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount25Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount26Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount27Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount28Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount29Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script7
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script7Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference13 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets78
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets78 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets78>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script8
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script8Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference14 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets79
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets79 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets79>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter4Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount30Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount31Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount32Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount33Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount34Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script9
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script9Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference15 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets80
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets80 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets80>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script10
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script10Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference16 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets81
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets81 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets81>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount35Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount36Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount37Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount38Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount39Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script11
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script11Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference17 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets82
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets82 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets82>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script12
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script12Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference18 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets83
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets83 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets83>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount110
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount110Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount110 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount110>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets84
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets84 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets84>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount111
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount111Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount111 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount111>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets85
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets85 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets85>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount112
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount112Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount112 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount112>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets86
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets86 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets86>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount113
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount113Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount113 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount113>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount114
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount114Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount114 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount114>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Certificates5Certificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script13
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script13Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference19 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets87
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets87 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets87>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script14
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script14Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference20 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets88
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets88 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets88>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Scripts2Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference7
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake7Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Reward_balance5Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Active11
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Active11Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting22 Voting { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Active11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Active11>(data, options);

        }

    }

    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class next10
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Next10Status Status { get; set; } = default!;

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status = `delegating`)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("target")]
        public object Target { get; set; } = default!;

        /// <summary>
        /// Decentralized representative (DRep)
        /// <br/>that the wallet is delegating its vote to.
        /// <br/>One can abstain, give no confidence vote,
        /// <br/>or vote for a representative specified by a key hash or script hash.
        /// <br/>Vote delegation can be done together with stake delegation action.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("voting")]
        public Voting23 Voting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes_at")]
        [System.ComponentModel.DataAnnotations.Required]
        public Changes_at12 Changes_at { get; set; } = new Changes_at12();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static next10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<next10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Reward_balance6Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Stake9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount40Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount41Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount42Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount43Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount44Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script15
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script15Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference21 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets89
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets89 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets89>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script16
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script16Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference22 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets90
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets90 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets90>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount45Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount46Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount47Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount48Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount49Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script17
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script17Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference23 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets91
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets91 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets91>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script18
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script18Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference24 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets92
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets92 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets92>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount50Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount51Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount52Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount53Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount54Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script19
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script19Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference25 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets93
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets93 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets93>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script20
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script20Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference26 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets94
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets94 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets94>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount55Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount56Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount57Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount58Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount59Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount60Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount61Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount62Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount63Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount64Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script21
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script21Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference27 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets95
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets95 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets95>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script22
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script22Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference28 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets96
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets96 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets96>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount115
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount115Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount115 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount115>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets97
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets97 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets97>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount116
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount116Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount116 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount116>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets98
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets98 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets98>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount117
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount117Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount117 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount117>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets99
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets99 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets99>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount118
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount118Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount118 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount118>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount119
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount119Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount119 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount119>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Certificates6Certificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height8Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height9Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active9Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting18
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next8Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting19
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at10
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Height11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"block")]
        Block = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount65Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount66Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount67Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount68Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount69Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script23
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script23Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference29 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets100
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets100 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets100>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script24
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script24Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference30 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets101
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets101 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets101>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before12Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter12Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount70Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount71Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount72Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount73Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount74Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script25
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script25Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference31 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets102
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets102 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets102>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script26
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script26Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference32 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets103
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets103 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets103>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before13Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter13Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount75Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount76Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount77Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount78Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount79Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script27
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script27Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference33 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets104
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets104 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets104>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script28
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script28Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference34 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets105
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets105 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets105>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before14Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter14Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount80Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount81Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount82Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount83Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount84Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount85Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount86Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount87Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount88Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount89Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script29
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script29Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference35 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets106
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets106 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets106>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script30
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script30Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference36 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets107
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets107 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets107>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before15Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter15Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount120
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount120Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount120 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount120>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets108
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets108 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets108>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount121
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount121Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount121 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount121>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets109
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets109 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets109>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount122
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount122Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount122 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount122>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets110
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets110 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets110>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount123
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount123Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount123 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount123>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount124
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount124Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount124 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount124>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Certificates7Certificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned10Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount125
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount125Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount125 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount125>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets111
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets111 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets111>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount126
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount126Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount126 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount126>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets112
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets112 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets112>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount127
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount127Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount127 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount127>(data, options);

        }

    }

    /// <summary>
    /// An asset on the Cardano blockchain. An asset is uniquely identified by
    /// <br/>its `policy_id` and `asset_name` (together, these form the _asset id_).
    /// <br/>
    /// <br/>Two assets with the same `asset_name` and `policy_id` are
    /// <br/>interchangeable. Yet, different assets with a same `policy_id` but
    /// <br/>different `asset_name` are treated as separate assets, as are two
    /// <br/>assets with the same `asset_name` but different `policy_id`.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets113
    {
        /// <summary>
        /// A unique identifier of the asset's monetary policy. The policy
        /// <br/>controls how assets of this kind are created and destroyed.
        /// <br/>
        /// <br/>The contents are the blake2b-224 hash of the monetary policy
        /// <br/>script, encoded in hexadecimal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("policy_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(56, MinimumLength = 56)]
        public string Policy_id { get; set; } = default!;

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets113 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets113>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount128
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount128Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount128 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount128>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount129
    {

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Amount129Unit Unit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Amount129 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Amount129>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Certificates8Certificate_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"join_pool")]
        Join_pool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"quit_pool")]
        Quit_pool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"register_reward_account")]
        Register_reward_account = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_taken11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Deposits_returned11Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script31
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script31Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference37 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets114
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets114 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets114>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script32
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script32Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference38 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets115
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets115 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets115>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before16Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter16Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Scripts3Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference8
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount90Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount91Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount92Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount93Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount94Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script33
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script33Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference39 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script33>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets116
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets116 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets116>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script34
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script34Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference40 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets117
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets117 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets117>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before17Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter17Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount95Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount96Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount97Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount98Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount99Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script35
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script35Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference41 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script35>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets118
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets118 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets118>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Policy_script36
    {

        [System.Text.Json.Serialization.JsonPropertyName("script_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Policy_script36Script_type Script_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("script")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; } = default!;

        /// <summary>
        /// A reference input.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public Reference42 Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Policy_script36 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Policy_script36>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class assets119
    {
        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a
        /// <br/>policy. Although we call it "asset name", the value needn't be
        /// <br/>text, and it could even be empty.
        /// <br/>
        /// <br/>For policies with a single fungible asset item, asset name is
        /// <br/>typically an empty string.
        /// <br/>
        /// <br/>This value can be up to 32 bytes of arbitrary data (which is 64
        /// <br/>hexadecimal digits).
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asset_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(64)]
        public string Asset_name { get; set; } = default!;

        /// <summary>
        /// Number of assets for the given `policy_id` and `asset_name`.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Quantity { get; set; } = default!;

        /// <summary>
        /// A user-facing short fingerprint which combines the `policy_id` and `asset_name`
        /// <br/>to allow for an easier human comparison of assets. Note that it is generally
        /// <br/>**not okay** to use this fingerprint as a unique identifier for it is not collision
        /// <br/>resistant. Yet within the context of a single wallet, it makes for a (rather)
        /// <br/>short user-facing comparison mean.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fingerprint")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 44)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(asset)1[0-9a-z]*$")]
        public string Fingerprint { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static assets119 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<assets119>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_before18Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Invalid_hereafter18Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"slot")]
        Slot = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount100Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount101Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount102Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount103Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount104Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script3Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference9
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference9 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference9>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script4Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference10
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference10 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference10>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script5Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference11
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script6Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference12
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount105Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount106Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount107Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount108Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount109Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active10Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting20
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next9Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting21
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at11
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at11 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at11>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script7Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference13
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference13 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference13>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script8Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference14
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference14 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference14>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script9Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference15
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference15 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference15>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script10Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference16
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference16 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference16>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script11Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference17
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference17 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference17>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script12Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference18
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference18 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference18>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount110Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount111Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount112Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount113Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount114Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script13Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference19
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference19 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference19>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script14Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference20
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference20 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference20>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Active11Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting22
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Next10Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"not_delegating")]
        Not_delegating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating")]
        Delegating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"voting")]
        Voting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"delegating_and_voting")]
        Delegating_and_voting = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Voting23
    {

        [System.Runtime.Serialization.EnumMember(Value = @"abstain")]
        Abstain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"no_confidence")]
        No_confidence = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Changes_at12
    {
        /// <summary>
        /// An epoch is a time period which is divided into slots.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epoch_number")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Epoch_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epoch_start_time")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Epoch_start_time { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Changes_at12 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Changes_at12>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script15Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference21
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference21 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference21>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script16Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference22
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference22 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference22>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script17Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference23
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference23 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference23>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script18Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference24
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference24 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference24>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script19Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference25
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference25 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference25>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script20Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference26
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference26 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference26>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script21Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference27
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference27 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference27>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script22Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference28
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference28 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference28>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount115Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount116Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount117Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount118Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount119Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script23Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference29
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference29 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference29>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script24Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference30
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference30 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference30>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script25Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference31
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference31 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference31>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script26Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference32
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference32 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference32>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script27Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference33
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference33 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference33>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script28Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference34
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference34 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference34>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script29Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference35
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference35 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference35>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script30Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference36
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference36 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference36>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount120Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount121Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount122Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount123Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount124Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount125Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount126Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount127Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount128Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount129Unit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lovelace")]
        Lovelace = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script31Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference37
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference37 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference37>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script32Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference38
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference38 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference38>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script33Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference39
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference39 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference39>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script34Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference40
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference40 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference40>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script35Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference41
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference41 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference41>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Policy_script36Script_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"native")]
        Native = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reference42
    {
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 64)]
        public string Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Index { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Reference42 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Reference42>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625