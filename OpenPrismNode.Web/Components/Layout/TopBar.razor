@using System.Security.Claims
@using OpenPrismNode.Web.Common
@using OpenPrismNode.Web.Components.Pages.Shared
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="flex justify-between items-center bg-slate-700 h-16 px-4 text-white">
    <a href="/">
        <div class="font-roboto-slab text-xl font-bold">
            OpenPrismNode
            <span class="text-xs text-slate-400">v<span>@OpnVersion.GetVersion()</span></span>
        </div>
    </a>
    @if (User.Identity is not null && User.Identity.IsAuthenticated)
    {
        <div class="flex items-center space-x-4">
            <span>Hello, @User.Identity.Name!</span>
            <RedirectToLogout/>
        </div>
    }
    else
    {
        <a href="/login" class="hover:underline">Login</a>
    }
</div>

@code {
    private ClaimsPrincipal User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
    }

}