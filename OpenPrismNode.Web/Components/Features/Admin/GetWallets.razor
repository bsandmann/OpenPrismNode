@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using OpenPrismNode.Core.Common
@using OpenPrismNode.Web.Models

@attribute [Authorize(Roles = "Admin")]

@inject IHttpClientFactory HttpClientFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IOptions<AppSettings> AppSettingsOptions
@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="mx-auto mt-4 p-4 border rounded shadow-sm space-y-4">
    <h3 class="text-xl font-semibold text-center">All Wallets</h3>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-600 text-center">@ErrorMessage</div>
    }

    @if (Wallets is not null && Wallets.Count > 0)
    {
        <table class="min-w-full bg-white border rounded">
            <thead>
            <tr class="bg-gray-100 border-b">
                <th class="text-left p-2">Wallet ID</th>
                <th class="text-left p-2">Balance</th>
                <th class="text-left p-2">Sync Status</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var w in Wallets)
            {
                <tr class="border-b hover:bg-gray-50">
                    <!-- Wallet ID & optional Funding Address -->
                    <td class="p-2 align-top">
                        <!-- Wallet ID row -->
                        <div class="flex items-center space-x-2">
                            <span>@w.WalletId</span>
                            <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                                    @onclick="() => CopyToClipboard(w.WalletId)">
                                Copy
                            </button>
                        </div>

                        <!-- Funding address (only if syncing complete & address not empty) -->
                        @if (w.SyncingComplete && !string.IsNullOrEmpty(w.FundingAddress))
                        {
                            <div class="flex items-center space-x-2 mt-1 text-sm text-gray-500">
                                <span>Funding address: @TruncateAddress(w.FundingAddress)</span>
                                <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                                        @onclick="() => CopyToClipboard(w.FundingAddress)">
                                    Copy
                                </button>
                            </div>
                        }
                    </td>

                    <!-- Formatted balance -->
                    <td class="p-2 align-top">@FormatBalance(w.Balance)</td>

                    <!-- Single Sync Status column -->
                    <td class="p-2 align-top">@FormatSyncStatus(w.SyncingComplete, w.SyncProgress)</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-sm text-gray-600">No wallets found.</p>
    }

    <div class="flex justify-end">
        <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                @onclick="LoadWallets">
            Refresh
        </button>
    </div>
</div>

@code {
    private HttpClient? _httpClient;

    private string ErrorMessage { get; set; } = string.Empty;
    private List<GetWalletResponseModel>? Wallets;

    protected override async Task OnInitializedAsync()
    {
        // Create and configure HttpClient
        _httpClient = HttpClientFactory.CreateClient("LocalApi");
        var request = HttpContextAccessor.HttpContext?.Request;
        if (request is not null)
        {
            var baseUrl = $"{request.Scheme}://{request.Host}";
            _httpClient.BaseAddress = new Uri(baseUrl);

            var cookie = HttpContextAccessor.HttpContext.Request.Headers["Cookie"];
            if (!string.IsNullOrEmpty(cookie))
            {
                if (_httpClient.DefaultRequestHeaders.Contains("Cookie"))
                {
                    _httpClient.DefaultRequestHeaders.Remove("Cookie");
                }
                _httpClient.DefaultRequestHeaders.Add("Cookie", cookie.ToString());
            }
        }

        // Load all wallets on component init
        await LoadWallets();
    }

    private async Task LoadWallets()
    {
        ErrorMessage = string.Empty;

        try
        {
            // GET: api/v1.0/wallets
            var response = await _httpClient!.GetAsync("api/v1.0/wallets");
            if (!response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (content.Contains("No wallets not found"))
                {
                    return;
                }
                ErrorMessage = $"Failed to get wallets: {content} (HTTP {response.StatusCode})";
                return;
            }

            Wallets = await response.Content.ReadFromJsonAsync<List<GetWalletResponseModel>>();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error fetching wallets: {ex.Message}";
        }
    }

    // Clipboard copy logic
    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unable to copy to clipboard: {ex.Message}";
        }
    }

    private static string FormatSyncStatus(bool syncingComplete, decimal? syncProgress)
    {
        if (syncingComplete)
        {
            return "Sync completed";
        }

        if (syncProgress is null)
        {
            return string.Empty;
        }

        int percent = (int)(syncProgress.Value);
        // Ensure it doesn't exceed 100 if partially synced
        if (percent >= 100)
        {
            percent = 99;
        }

        return $"{percent}%";
    }

    private static string FormatBalance(long lovelaces)
    {
        // Format lovelaces with thousand separators
        string lovelacesStr = lovelaces.ToString("N0"); // e.g. "3,345,003"

        // Convert to ADA by integer division
        long adaWhole = lovelaces / 1_000_000;
        string adaText = adaWhole > 0
            ? $"(~{adaWhole} ADA)"
            : "(<1 ADA)";

        if (lovelaces > 0)
        {
            return $"{lovelacesStr} Lovelace {adaText}";
        }

        return "0 Lovelace";
    }

    private static string TruncateAddress(string address, int maxLength = 20)
    {
        if (string.IsNullOrEmpty(address) || address.Length <= maxLength)
        {
            return address;
        }
        return address.Substring(0, maxLength) + "...";
    }
}
