@page "/admin/LedgerManagement"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using OpenPrismNode.Core.Common
@using OpenPrismNode.Web
@attribute [Authorize(Roles = "Admin")]

@inject IHttpClientFactory HttpClientFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IOptions<AppSettings> AppSettingsOptions

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="mx-auto mt-4 p-4 border rounded shadow-sm space-y-6">
    <h4 class="text-xl font-semibold text-center">
        Ledger Management
    </h4>

    <!-- Error / Success messages -->
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-600 text-center">
            @ErrorMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="text-green-600 text-center">
            @SuccessMessage
        </div>
    }

    <!-- Delete Entire Ledger -->
    <div class="p-4 border rounded space-y-2">
        <p class="font-semibold text-lg">Delete Entire Ledger</p>
        <p class="text-sm text-gray-600">
            This permanently deletes all data for the <strong>@LedgerName</strong> ledger.
            You must manually restart the Sync Service afterward if desired.
        </p>

        @if (!ShowConfirmDeleteLedger)
        {
            <!-- Delete button to trigger confirmation -->
            <div class="flex justify-end">
                <button
                    class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                    @onclick="() => ShowConfirmDeleteLedger = true">
                    Delete Ledger
                </button>
            </div>
        }
        else
        {
            <!-- Confirmation UI -->
            <div class="flex justify-end items-center space-x-2">
                <span class="text-sm">Are you sure?</span>
                <button
                    class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                    @onclick="DeleteEntireLedger">
                    Confirm
                </button>
                <button
                    class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
                    @onclick="() => ShowConfirmDeleteLedger = false">
                    Cancel
                </button>
            </div>
        }
    </div>

    <!-- Delete Blocks -->
    <div class="p-4 border rounded space-y-2">
        <p class="font-semibold text-lg">Delete Blocks</p>
        <p class="text-sm text-gray-600">
            Optionally specify a block height. If left empty, only the tip block is deleted.
        </p>

        @if (!ShowConfirmDeleteBlock)
        {
            <div class="flex justify-between items-center">
                <input
                    @bind="BlockHeightString"
                    class="border px-2 py-1 rounded w-64"
                    placeholder="Block Height (optional)" />
                <button
                    class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                    @onclick="() => ShowConfirmDeleteBlock = true">
                    Delete
                </button>
            </div>
        }
        else
        {
            <div class="space-y-2">
                <p class="text-sm">
                    Are you sure you want to delete
                    @if (string.IsNullOrWhiteSpace(BlockHeightString))
                    {
                        <strong>the tip block</strong>
                    }
                    else
                    {
                        <strong>all blocks down to height @BlockHeightString</strong>
                    }
                    ?
                </p>

                <div class="flex justify-end items-center space-x-2">
                    <button
                        class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                        @onclick="DeleteBlock">
                        Confirm
                    </button>
                    <button
                        class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
                        @onclick="() => ShowConfirmDeleteBlock = false">
                        Cancel
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Delete Epochs -->
    <div class="p-4 border rounded space-y-2">
        <p class="font-semibold text-lg">Delete Epochs</p>
        <p class="text-sm text-gray-600">
            Optionally specify an epoch number. If left empty, only the most recent epoch is deleted.
        </p>

        @if (!ShowConfirmDeleteEpoch)
        {
            <div class="flex justify-between items-center">
                <input
                    @bind="EpochNumberString"
                    class="border px-2 py-1 rounded w-64"
                    placeholder="Epoch Number (optional)" />
                <button
                    class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                    @onclick="() => ShowConfirmDeleteEpoch = true">
                    Delete
                </button>
            </div>
        }
        else
        {
            <div class="space-y-2">
                <p class="text-sm">
                    Are you sure you want to delete
                    @if (string.IsNullOrWhiteSpace(EpochNumberString))
                    {
                        <strong>the most recent epoch</strong>
                    }
                    else
                    {
                        <strong>all epochs down to epoch @EpochNumberString</strong>
                    }
                    ?
                </p>

                <div class="flex justify-end items-center space-x-2">
                    <button
                        class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                        @onclick="DeleteEpoch">
                        Confirm
                    </button>
                    <button
                        class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
                        @onclick="() => ShowConfirmDeleteEpoch = false">
                        Cancel
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string LedgerName = string.Empty;

    // User input for blockHeight/epochNumber
    private string BlockHeightString { get; set; } = string.Empty;
    private string EpochNumberString { get; set; } = string.Empty;

    // Confirmation toggles
    private bool ShowConfirmDeleteLedger = false;
    private bool ShowConfirmDeleteBlock = false;
    private bool ShowConfirmDeleteEpoch = false;

    // Feedback messages
    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;

    private HttpClient? _httpClient;

    protected override void OnInitialized()
    {
        // Grab ledger name from configuration
        LedgerName = AppSettingsOptions.Value.PrismLedger.Name;

        // Create HttpClient similarly to your existing components
        _httpClient = HttpClientFactory.CreateClient("LocalApi");

        // Set up base address and pass cookies
        var request = HttpContextAccessor.HttpContext?.Request;
        if (request is not null)
        {
            var baseUrl = $"{request.Scheme}://{request.Host}";
            _httpClient.BaseAddress = new Uri(baseUrl);

            var cookie = HttpContextAccessor.HttpContext.Request.Headers["Cookie"];
            if (!string.IsNullOrEmpty(cookie))
            {
                if (_httpClient.DefaultRequestHeaders.Contains("Cookie"))
                {
                    _httpClient.DefaultRequestHeaders.Remove("Cookie");
                }
                _httpClient.DefaultRequestHeaders.Add("Cookie", cookie.ToString());
            }
        }
    }

    private async Task DeleteEntireLedger()
    {
        ClearMessages();
        ShowConfirmDeleteLedger = false;

        try
        {
            // DELETE: api/v1.0/ledgers/{LedgerName}
            var response = await _httpClient!.DeleteAsync($"api/v1.0/ledgers/{LedgerName}");
            if (!response.IsSuccessStatusCode)
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error deleting ledger: {errorBody} (HTTP {response.StatusCode})";
                return;
            }

            SuccessMessage = $"Ledger '{LedgerName}' deleted successfully. Restart sync if needed.";
            BlockHeightString = string.Empty;
            EpochNumberString = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to delete the ledger: {ex.Message}";
        }
    }

    private async Task DeleteBlock()
    {
        ClearMessages();
        ShowConfirmDeleteBlock = false;

        try
        {
            // Build URL: if BlockHeightString is empty => just delete tip
            // else => ?blockHeight={BlockHeight}
            var url = $"api/v1.0/ledgers/{LedgerName}/block";
            if (int.TryParse(BlockHeightString, out var blockHeight))
            {
                url += $"?blockHeight={blockHeight}";
            }

            var response = await _httpClient!.DeleteAsync(url);
            if (!response.IsSuccessStatusCode)
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error deleting block(s): {errorBody} (HTTP {response.StatusCode})";
                return;
            }

            SuccessMessage = "Block(s) deleted successfully. Restart sync if needed.";
            BlockHeightString = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to delete block(s): {ex.Message}";
        }
    }

    private async Task DeleteEpoch()
    {
        ClearMessages();
        ShowConfirmDeleteEpoch = false;

        try
        {
            // Build URL: if EpochNumberString is empty => just delete the most recent epoch
            // else => ?epochNumber={EpochNumber}
            var url = $"api/v1.0/ledgers/{LedgerName}/epochs";
            if (int.TryParse(EpochNumberString, out var epochNumber))
            {
                url += $"?epochNumber={epochNumber}";
            }

            var response = await _httpClient!.DeleteAsync(url);
            if (!response.IsSuccessStatusCode)
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error deleting epoch(s): {errorBody} (HTTP {response.StatusCode})";
                return;
            }

            SuccessMessage = "Epoch(s) deleted successfully. Restart sync if needed.";
            EpochNumberString = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to delete epoch(s): {ex.Message}";
        }
    }

    private void ClearMessages()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
    }
}
