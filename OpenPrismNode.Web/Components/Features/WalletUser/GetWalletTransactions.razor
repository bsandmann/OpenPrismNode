@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using OpenPrismNode.Core.Common
@attribute [Authorize(Roles = "User,Admin")]

@inject IHttpClientFactory HttpClientFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IOptions<AppSettings> AppSettingsOptions
@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="border p-4 rounded shadow-sm space-y-4 mt-4">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-600">@ErrorMessage</div>
    }

    <h4 class="font-semibold text-lg">Transactions for Wallet: @WalletId</h4>

    @if (Transactions is null)
    {
        <p class="text-gray-600">Loading transactions...</p>
    }
    else if (Transactions.Count == 0)
    {
        <p class="text-gray-600">No transactions found.</p>
    }
    else
    {
        <table class="min-w-full bg-white border rounded">
            <thead>
                <tr class="bg-gray-100 border-b">
                    <th class="text-left p-2">Transaction ID</th>
                    <th class="text-left p-2">Status</th>
                    <th class="text-left p-2">Operation Type</th>
                    <th class="text-left p-2">Operation Hash</th>
                    <th class="text-left p-2">Operation Status ID</th>
                    <th class="text-left p-2">Fee</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tx in Transactions)
                {
                    <tr class="border-b hover:bg-gray-50">
                        <td class="p-2 align-top">
                            <!-- TransactionId truncated + copy button -->
                            <div class="flex items-center space-x-2">
                                <span>@TruncateValue(tx.TransactionId)</span>
                                <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                                        @onclick="@(() => CopyToClipboard(tx.TransactionId))">
                                    Copy
                                </button>
                            </div>
                        </td>
                        <td class="p-2 align-top">@tx.Status</td>
                        <td class="p-2 align-top">@tx.OperationType</td>
                        <td class="p-2 align-top">
                            @if (!string.IsNullOrEmpty(tx.OperationHash))
                            {
                                <div class="flex items-center space-x-2">
                                    <span>@TruncateValue(tx.OperationHash)</span>
                                    <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                                            @onclick="@(() => CopyToClipboard(tx.OperationHash))">
                                        Copy
                                    </button>
                                </div>
                            }
                        </td>
                        <td class="p-2 align-top">
                            @if (!string.IsNullOrEmpty(tx.OperationStatusId))
                            {
                                <div class="flex items-center space-x-2">
                                    <span>@TruncateValue(tx.OperationStatusId)</span>
                                    <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                                            @onclick="@(() => CopyToClipboard(tx.OperationStatusId))">
                                        Copy
                                    </button>
                                </div>
                            }
                        </td>
                        <td class="p-2 align-top">
                            @if (tx.Fee.HasValue && tx.Fee.Value > 0)
                            {
                                @($"{ConvertFeeToAda(tx.Fee.Value):F6} ADA")
                            }
                            else
                            {
                                <span>0 ADA</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <!-- Refresh Button -->
    <div class="flex justify-end">
        <button class="px-4 py-2 bg-slate-700 text-white rounded hover:bg-slate-800"
                @onclick="LoadTransactions">
            Refresh
        </button>
    </div>
</div>

@code {
    [Parameter]
    public string WalletId { get; set; } = string.Empty;

    private HttpClient? _httpClient;
    private string ErrorMessage { get; set; } = string.Empty;

    // The list of transactions
    private List<WalletTransactionDto>? Transactions;

    protected override async Task OnInitializedAsync()
    {
        // Initialize HttpClient, pass cookies, etc.
        _httpClient = HttpClientFactory.CreateClient("LocalApi");
        var request = HttpContextAccessor.HttpContext?.Request;
        if (request is not null)
        {
            var baseUrl = $"{request.Scheme}://{request.Host}";
            _httpClient.BaseAddress = new Uri(baseUrl);

            var cookie = HttpContextAccessor.HttpContext.Request.Headers["Cookie"];
            if (!string.IsNullOrEmpty(cookie))
            {
                if (_httpClient.DefaultRequestHeaders.Contains("Cookie"))
                {
                    _httpClient.DefaultRequestHeaders.Remove("Cookie");
                }
                _httpClient.DefaultRequestHeaders.Add("Cookie", cookie.ToString());
            }
        }

        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        ErrorMessage = string.Empty;
        Transactions = null;

        if (string.IsNullOrWhiteSpace(WalletId))
        {
            ErrorMessage = "No wallet ID provided.";
            return;
        }

        try
        {
            // GET: api/v1.0/wallets/{walletId}/transactions
            var response = await _httpClient!.GetAsync($"api/v1.0/wallets/{WalletId}/transactions");
            if (!response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Error fetching transactions: {content} (HTTP {response.StatusCode})";
                return;
            }

            var result = await response.Content.ReadFromJsonAsync<List<WalletTransactionDto>>();
            if (result is not null)
            {
                Transactions = result;
            }
            else
            {
                ErrorMessage = "No data returned from server.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
    }

    // Copy text to clipboard
    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unable to copy: {ex.Message}";
        }
    }

    // Truncate a string to 20 chars + ellipsis
    private static string TruncateValue(string? value, int maxLength = 20)
    {
        if (string.IsNullOrEmpty(value) || value.Length <= maxLength)
        {
            return value ?? string.Empty;
        }
        return value.Substring(0, maxLength) + "...";
    }

    // Convert lovelace to ADA
    private static double ConvertFeeToAda(long lovelaces)
    {
        return lovelaces / 1_000_000.0;
    }

    // Transaction data model from the endpoint
    private record WalletTransactionDto
    {
        public string TransactionId { get; set; } = string.Empty;
        public string? OperationStatusId { get; set; }
        public string? OperationHash { get; set; }
        public string OperationType { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public long? Fee { get; set; }
    };
}
