@page "/create-wallet"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using OpenPrismNode.Core.Common
@using OpenPrismNode.Web.Models

@attribute [Authorize(Roles = "User,Admin")]

@inject IHttpClientFactory HttpClientFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IOptions<AppSettings> AppSettingsOptions

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="mx-auto mt-4 p-4 border rounded shadow-sm space-y-4">
    <h3 class="text-xl font-semibold text-center">Create Wallet</h3>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-600 text-center">@ErrorMessage</div>
    }

    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="text-green-600 text-center">@SuccessMessage</div>
    }

    <div>
        <label class="block text-gray-700 font-semibold mb-1">Wallet Name</label>
        <input class="border w-full px-2 py-1 rounded"
               @bind="WalletName"
               placeholder="Enter wallet name..." />
    </div>

    <div class="flex justify-end">
        <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                @onclick="Create">
            Create Wallet
        </button>
    </div>

    @if (CreatedWallet is not null)
    {
        <div class="p-2 border rounded bg-gray-50 mt-2 space-y-2">
            <div><strong>Wallet ID:</strong> @CreatedWallet.WalletId</div>
            <div><strong>Mnemonic:</strong> @CreatedWallet.Mnemonic</div>
        </div>
    }
</div>

@code {
    private HttpClient? _httpClient;

    private string WalletName { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;

    private CreateWalletResponseModel? CreatedWallet;

    protected override void OnInitialized()
    {
        // Configure HttpClient
        _httpClient = HttpClientFactory.CreateClient("LocalApi");
        var request = HttpContextAccessor.HttpContext?.Request;

        if (request is not null)
        {
            var baseUrl = $"{request.Scheme}://{request.Host}";
            _httpClient.BaseAddress = new Uri(baseUrl);

            // Pass Cookie
            var cookie = HttpContextAccessor.HttpContext.Request.Headers["Cookie"];
            if (!string.IsNullOrEmpty(cookie))
            {
                if (_httpClient.DefaultRequestHeaders.Contains("Cookie"))
                {
                    _httpClient.DefaultRequestHeaders.Remove("Cookie");
                }
                _httpClient.DefaultRequestHeaders.Add("Cookie", cookie.ToString());
            }
        }
    }

    private async Task Create()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        CreatedWallet = null;

        if (string.IsNullOrWhiteSpace(WalletName))
        {
            ErrorMessage = "Please enter a wallet name.";
            return;
        }

        try
        {
            var requestModel = new CreateWalletRequestModel { Name = WalletName };
            var response = await _httpClient!.PostAsJsonAsync("api/v1.0/wallets", requestModel);

            if (!response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Failed to create wallet: {content} (HTTP {response.StatusCode})";
                return;
            }

            // On success, parse the response
            CreatedWallet = await response.Content.ReadFromJsonAsync<CreateWalletResponseModel>();
            SuccessMessage = "Wallet created successfully!";
            WalletName = string.Empty; // Clear the input if desired
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating wallet: {ex.Message}";
        }
    }
}
