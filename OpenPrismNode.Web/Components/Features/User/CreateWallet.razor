@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using OpenPrismNode.Core.Common
@using OpenPrismNode.Web.Models

@attribute [Authorize(Roles = "User,Admin")]

@inject IHttpClientFactory HttpClientFactory
@inject IHttpContextAccessor HttpContextAccessor
@inject IOptions<AppSettings> AppSettingsOptions
@inject IJSRuntime JS

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<!-- Removed max-w-lg -->
<div class="mx-auto mt-4 p-4 border rounded shadow-sm space-y-4">
    <h3 class="text-xl font-semibold text-center">Create Wallet</h3>

    <!-- Always show this general info -->
    <p class="text-sm text-gray-700 text-align-center text-center">
        Create a wallet and wait until synchronization. After that you can use the Wallet-ID to sign in into the application again.
    </p>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="text-red-600 text-center">@ErrorMessage</div>
    }
    @if (!string.IsNullOrEmpty(SuccessMessage))
    {
        <div class="text-green-600 text-center">@SuccessMessage</div>
    }

    @if (IsCreating)
    {
        <!-- Spinner / progress indicator -->
        <div class="flex items-center justify-center space-x-2">
            <svg class="w-6 h-6 animate-spin text-blue-600" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
            </svg>
            <span>Creating wallet, please wait...</span>
        </div>
    }
    else if (!HasCreatedWallet)
    {
        <!-- Initial create form (only shown if wallet not created yet) -->
        <div>
            <label class="block text-gray-700 font-semibold mb-1">Wallet Name</label>
            <input class="border w-full px-2 py-1 rounded"
                   @bind="WalletName"
                   placeholder="Enter wallet name..." />
        </div>

        <div class="flex justify-end">
            <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300"
                    @onclick="Create"
                    disabled="@IsCreateButtonDisabled">
                Create Wallet
            </button>
        </div>
    }

    <!-- Show newly created wallet details if available -->
    @if (CreatedWallet is not null)
    {
        <!-- Basic Info: WalletId + Mnemonic -->
        <div class="p-2 border rounded bg-gray-50 mt-2 space-y-3">
            <div class="flex items-center space-x-2">
                <span><strong>Wallet ID:</strong> @CreatedWallet.WalletId</span>
                <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                        @onclick="() => CopyToClipboard(CreatedWallet.WalletId)">
                    Copy
                </button>
            </div>

            <div class="flex items-start space-x-2">
                <span><strong>Mnemonic:</strong></span>
                <span class="font-mono">@string.Join(" ", CreatedWallet.Mnemonic)</span>
                <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                        @onclick="CopyMnemonic">
                    Copy
                </button>
            </div>
        </div>

        <!-- GetWallet-like info: fetched from the new wallet -->
        <div class="p-2 border rounded bg-gray-50 space-y-2">
            <div class="flex items-center justify-between">
                <h4 class="font-semibold">Details</h4>
                <button class="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700"
                        @onclick="RefreshWalletInfo">
                    Refresh
                </button>
            </div>

            @if (CreatedWalletInfo is not null)
            {
                <div class="space-y-1">
                    <div>
                        <strong>Balance:</strong> @FormatBalance(CreatedWalletInfo.Balance)
                    </div>

                    @if (!string.IsNullOrEmpty(CreatedWalletInfo.FundingAddress))
                    {
                        <div class="space-y-1">
                            <div class="flex items-center space-x-2">
                                <strong>Funding Address:</strong>
                                <span>@CreatedWalletInfo.FundingAddress</span>
                                <button class="px-2 py-1 text-xs bg-gray-200 rounded hover:bg-gray-300"
                                        @onclick="() => CopyToClipboard(CreatedWalletInfo.FundingAddress)">
                                    Copy
                                </button>
                            </div>
                            <p class="text-xs text-gray-600">
                                The Funding address will be generated when the synchronisation is complete.
                                Use the provided address to provide ada to your account to pay for transactions on chain.
                            </p>
                        </div>
                    }
                    else
                    {
                        <p class="text-xs text-gray-600">
                            The funding address will be available once synchronization is complete.
                        </p>
                    }

                    <div><strong>Syncing Complete:</strong> @(CreatedWalletInfo.SyncingComplete ? "Yes" : "No")</div>
                    <div><strong>Sync Progress:</strong> @CreatedWalletInfo.SyncProgress%</div>
                </div>
            }
            else
            {
                <div class="text-sm text-gray-500">No wallet info loaded yet.</div>
            }
        </div>
    }

    <p class="text-sm text-gray-600 italic mt-2">
        * To create another wallet, reload this page.
    </p>
</div>

@code {
    // Local state
    private HttpClient? _httpClient;

    private string WalletName { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;

    private bool IsCreating { get; set; } = false;         // True while calling API to create wallet
    private bool HasCreatedWallet { get; set; } = false;   // Once a wallet is created, we don't allow creation again
    private bool IsCreateButtonDisabled => HasCreatedWallet || IsCreating;

    // Created wallet from server response
    private CreateWalletResponseModel? CreatedWallet;

    // Additional info about the created wallet (balance, etc.)
    private GetWalletResponseModel? CreatedWalletInfo;

    protected override void OnInitialized()
    {
        // Configure HttpClient
        _httpClient = HttpClientFactory.CreateClient("LocalApi");
        var request = HttpContextAccessor.HttpContext?.Request;

        if (request is not null)
        {
            var baseUrl = $"{request.Scheme}://{request.Host}";
            _httpClient.BaseAddress = new Uri(baseUrl);

            // Pass Cookie
            var cookie = HttpContextAccessor.HttpContext.Request.Headers["Cookie"];
            if (!string.IsNullOrEmpty(cookie))
            {
                if (_httpClient.DefaultRequestHeaders.Contains("Cookie"))
                {
                    _httpClient.DefaultRequestHeaders.Remove("Cookie");
                }
                _httpClient.DefaultRequestHeaders.Add("Cookie", cookie.ToString());
            }
        }
    }

    private async Task Create()
    {
        ClearMessages();
        IsCreating = true;            // Show spinner
        HasCreatedWallet = false;     // We are about to create a wallet

        if (string.IsNullOrWhiteSpace(WalletName))
        {
            ErrorMessage = "Please enter a wallet name.";
            IsCreating = false;
            return;
        }

        try
        {
            // Prepare request model for your server
            var requestModel = new CreateWalletRequestModel { Name = WalletName };
            var response = await _httpClient!.PostAsJsonAsync("api/v1.0/wallets", requestModel);

            if (!response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Failed to create wallet: {content} (HTTP {response.StatusCode})";
                IsCreating = false;
                return;
            }

            // Parse the successful response
            CreatedWallet = await response.Content.ReadFromJsonAsync<CreateWalletResponseModel>();
            if (CreatedWallet is null)
            {
                ErrorMessage = "Server returned an empty wallet response.";
                IsCreating = false;
                return;
            }

            SuccessMessage = "Wallet created successfully!";
            HasCreatedWallet = true;

            // Optionally: auto-load the new wallet info
            await RefreshWalletInfo();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error creating wallet: {ex.Message}";
        }
        finally
        {
            IsCreating = false; // Stop spinner
        }
    }

    // Refresh the newly created wallet info
    private async Task RefreshWalletInfo()
    {
        if (CreatedWallet is null) return;

        try
        {
            var response = await _httpClient!.GetAsync($"api/v1.0/wallets/{CreatedWallet.WalletId}");
            if (!response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Failed to load wallet info: {content} (HTTP {response.StatusCode})";
                return;
            }

            CreatedWalletInfo = await response.Content.ReadFromJsonAsync<GetWalletResponseModel>();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading wallet info: {ex.Message}";
        }
    }

    // Copy wallet ID or mnemonic to clipboard
    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Unable to copy to clipboard: {ex.Message}";
        }
    }

    private async Task CopyMnemonic()
    {
        if (CreatedWallet?.Mnemonic is null) return;
        var mnemonicString = string.Join(" ", CreatedWallet.Mnemonic);
        await CopyToClipboard(mnemonicString);
    }

    private static string FormatBalance(long lovelaces)
    {
        // Format lovelaces with thousand separators
        string lovelacesStr = lovelaces.ToString("N0"); // e.g. "3,345,003"

        // Convert to ADA by integer division
        long adaWhole = lovelaces / 1_000_000;
        string adaText = adaWhole > 0
            ? $"(~{adaWhole} ADA)"
            : "(<1 ADA)";

        if (lovelaces > 0)
        {
            return $"{lovelacesStr} Lovelace {adaText}";
        }

        return "0 Lovelace";
    }

    private void ClearMessages()
    {
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
    }
}
