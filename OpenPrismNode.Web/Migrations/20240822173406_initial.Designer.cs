// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenPrismNode.Core;

#nullable disable

namespace OpenPrismNode.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240822173406_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OpenPrismNode.Core.Entities.BlockEntity", b =>
                {
                    b.Property<int>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<int>("BlockHashPrefix")
                        .HasColumnType("integer");

                    b.Property<byte[]>("BlockHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<short>("EpochNumber")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsFork")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastParsedOnUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Ledger")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousBlockHashPrefix")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousBlockHeight")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("TxCount")
                        .HasColumnType("smallint");

                    b.HasKey("BlockHeight", "BlockHashPrefix");

                    b.HasIndex("EpochNumber");

                    b.HasIndex("EpochNumber", "Ledger");

                    b.HasIndex("PreviousBlockHeight", "PreviousBlockHashPrefix");

                    b.ToTable("BlockEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.CreateDidEntity", b =>
                {
                    b.Property<byte[]>("OperationHash")
                        .HasColumnType("bytea");

                    b.Property<int>("BlockHashPrefix")
                        .HasColumnType("integer");

                    b.Property<int>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Did")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("OperationSequenceNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SigningKeyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("OperationHash");

                    b.HasIndex("TransactionHash", "BlockHeight", "BlockHashPrefix");

                    b.ToTable("CreateDidEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.DeactivateDidEntity", b =>
                {
                    b.Property<byte[]>("OperationHash")
                        .HasColumnType("bytea");

                    b.Property<int>("BlockHashPrefix")
                        .HasColumnType("integer");

                    b.Property<int>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Did")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("OperationSequenceNumber")
                        .HasColumnType("integer");

                    b.Property<byte[]>("PreviousOperationHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SigningKeyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("OperationHash");

                    b.HasIndex("Did")
                        .IsUnique();

                    b.HasIndex("TransactionHash", "BlockHeight", "BlockHashPrefix");

                    b.ToTable("DeactivateDidEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.EpochEntity", b =>
                {
                    b.Property<int>("EpochNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Ledger")
                        .HasColumnType("integer");

                    b.HasKey("EpochNumber", "Ledger");

                    b.HasIndex("Ledger");

                    b.ToTable("EpochEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.LedgerEntity", b =>
                {
                    b.Property<int>("Ledger")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastSynced")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Ledger");

                    b.ToTable("LedgerEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PatchedContextEntity", b =>
                {
                    b.Property<int>("PatchedContextEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatchedContextEntityId"));

                    b.Property<string>("ContextListJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<byte[]>("UpdateDidEntityOperationHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<short?>("UpdateOperationOrder")
                        .HasColumnType("smallint");

                    b.HasKey("PatchedContextEntityId");

                    b.HasIndex("ContextListJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ContextListJson"), "gin");

                    b.HasIndex("UpdateDidEntityOperationHash");

                    b.ToTable("PatchedContextEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PrismPublicKeyEntity", b =>
                {
                    b.Property<int>("PrismPublicKeyEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrismPublicKeyEntityId"));

                    b.Property<byte[]>("CreateDidEntityOperationHash")
                        .HasColumnType("bytea");

                    b.Property<string>("Curve")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PrismKeyUsage")
                        .HasColumnType("integer");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("UpdateDidEntityOperationHash")
                        .HasColumnType("bytea");

                    b.Property<short?>("UpdateOperationOrder")
                        .HasColumnType("smallint");

                    b.HasKey("PrismPublicKeyEntityId");

                    b.HasIndex("CreateDidEntityOperationHash");

                    b.HasIndex("UpdateDidEntityOperationHash");

                    b.ToTable("PrismPublicKeyEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PrismPublicKeyRemoveEntity", b =>
                {
                    b.Property<int>("PrismPublicKeyRemoveEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrismPublicKeyRemoveEntityId"));

                    b.Property<string>("KeyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("UpdateDidOperationHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("UpdateDidEntityOperationHash");

                    b.Property<short>("UpdateOperationOrder")
                        .HasColumnType("smallint");

                    b.HasKey("PrismPublicKeyRemoveEntityId");

                    b.HasIndex("UpdateDidOperationHash");

                    b.ToTable("PrismPublicKeyRemoveEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PrismServiceEntity", b =>
                {
                    b.Property<int>("PrismServiceEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrismServiceEntityId"));

                    b.Property<byte[]>("CreateDidEntityOperationHash")
                        .HasColumnType("bytea");

                    b.Property<string>("JsonData")
                        .HasColumnType("jsonb");

                    b.Property<string>("ListOfUrisJson")
                        .HasColumnType("jsonb");

                    b.Property<bool>("Removed")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("UpdateDidEntityOperationHash")
                        .HasColumnType("bytea");

                    b.Property<short?>("UpdateOperationOrder")
                        .HasColumnType("smallint");

                    b.Property<bool>("Updated")
                        .HasColumnType("boolean");

                    b.Property<string>("UriString")
                        .HasColumnType("text");

                    b.HasKey("PrismServiceEntityId");

                    b.HasIndex("CreateDidEntityOperationHash");

                    b.HasIndex("UpdateDidEntityOperationHash");

                    b.ToTable("PrismServiceEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.StakeAddressEntity", b =>
                {
                    b.Property<string>("StakeAddress")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("StakeAddress");

                    b.ToTable("StakeAddressEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.TransactionEntity", b =>
                {
                    b.Property<byte[]>("TransactionHash")
                        .HasColumnType("bytea");

                    b.Property<int>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<int>("BlockHashPrefix")
                        .HasColumnType("integer");

                    b.Property<int>("Fees")
                        .HasColumnType("integer");

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<short>("Size")
                        .HasColumnType("smallint");

                    b.HasKey("TransactionHash", "BlockHeight", "BlockHashPrefix");

                    b.HasIndex("TransactionHash")
                        .IsUnique();

                    b.HasIndex("BlockHeight", "BlockHashPrefix");

                    b.ToTable("TransactionEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.UpdateDidEntity", b =>
                {
                    b.Property<byte[]>("OperationHash")
                        .HasColumnType("bytea");

                    b.Property<int>("BlockHashPrefix")
                        .HasColumnType("integer");

                    b.Property<int>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Did")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("OperationSequenceNumber")
                        .HasColumnType("integer");

                    b.Property<byte[]>("PreviousOperationHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SigningKeyId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("OperationHash");

                    b.HasIndex("Did");

                    b.HasIndex("TransactionHash", "BlockHeight", "BlockHashPrefix");

                    b.ToTable("UpdateDidEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.UtxoEntity", b =>
                {
                    b.Property<int>("UtxoEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UtxoEntityId"));

                    b.Property<int>("BlockHashPrefix")
                        .HasColumnType("integer");

                    b.Property<int>("BlockHeight")
                        .HasColumnType("integer");

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsOutgoing")
                        .HasColumnType("boolean");

                    b.Property<string>("StakeAddress")
                        .HasColumnType("character varying(64)");

                    b.Property<byte[]>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("character varying(114)");

                    b.HasKey("UtxoEntityId");

                    b.HasIndex("StakeAddress");

                    b.HasIndex("WalletAddress");

                    b.HasIndex("TransactionHash", "BlockHeight", "BlockHashPrefix", "Index", "IsOutgoing", "Value")
                        .IsUnique();

                    b.ToTable("UtxoEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.WalletAddressEntity", b =>
                {
                    b.Property<string>("WalletAddress")
                        .HasMaxLength(114)
                        .HasColumnType("character varying(114)");

                    b.HasKey("WalletAddress");

                    b.ToTable("WalletAddressEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.BlockEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.EpochEntity", "EpochEntity")
                        .WithMany("BlockEntities")
                        .HasForeignKey("EpochNumber", "Ledger")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenPrismNode.Core.Entities.BlockEntity", "PreviousBlock")
                        .WithMany("NextBlocks")
                        .HasForeignKey("PreviousBlockHeight", "PreviousBlockHashPrefix")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EpochEntity");

                    b.Navigation("PreviousBlock");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.CreateDidEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.TransactionEntity", "TransactionEntity")
                        .WithMany("CreateDidEntities")
                        .HasForeignKey("TransactionHash", "BlockHeight", "BlockHashPrefix")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.DeactivateDidEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.CreateDidEntity", "CreateDidEntity")
                        .WithOne("DidDeactivation")
                        .HasForeignKey("OpenPrismNode.Core.Entities.DeactivateDidEntity", "Did")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenPrismNode.Core.Entities.TransactionEntity", "TransactionEntity")
                        .WithMany("DeactivateDidEntities")
                        .HasForeignKey("TransactionHash", "BlockHeight", "BlockHashPrefix")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateDidEntity");

                    b.Navigation("TransactionEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.EpochEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.LedgerEntity", "LedgerEntity")
                        .WithMany("Epochs")
                        .HasForeignKey("Ledger")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LedgerEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PatchedContextEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.UpdateDidEntity", "UpdateDidEntity")
                        .WithMany("PatchedContexts")
                        .HasForeignKey("UpdateDidEntityOperationHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UpdateDidEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PrismPublicKeyEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.CreateDidEntity", null)
                        .WithMany("PrismPublicKeys")
                        .HasForeignKey("CreateDidEntityOperationHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenPrismNode.Core.Entities.UpdateDidEntity", null)
                        .WithMany("PrismPublicKeysToAdd")
                        .HasForeignKey("UpdateDidEntityOperationHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PrismPublicKeyRemoveEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.UpdateDidEntity", "UpdateDidEntity")
                        .WithMany("PrismPublicKeysToRemove")
                        .HasForeignKey("UpdateDidOperationHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UpdateDidEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.PrismServiceEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.CreateDidEntity", null)
                        .WithMany("PrismServices")
                        .HasForeignKey("CreateDidEntityOperationHash")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OpenPrismNode.Core.Entities.UpdateDidEntity", null)
                        .WithMany("PrismServices")
                        .HasForeignKey("UpdateDidEntityOperationHash")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.TransactionEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.BlockEntity", "BlockEntity")
                        .WithMany("PrismTransactionEntities")
                        .HasForeignKey("BlockHeight", "BlockHashPrefix")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.UpdateDidEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.CreateDidEntity", "CreateDidEntity")
                        .WithMany("DidUpdates")
                        .HasForeignKey("Did")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OpenPrismNode.Core.Entities.TransactionEntity", "TransactionEntity")
                        .WithMany("UpdateDidEntities")
                        .HasForeignKey("TransactionHash", "BlockHeight", "BlockHashPrefix")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateDidEntity");

                    b.Navigation("TransactionEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.UtxoEntity", b =>
                {
                    b.HasOne("OpenPrismNode.Core.Entities.StakeAddressEntity", "StakeAddressEntity")
                        .WithMany("Utxos")
                        .HasForeignKey("StakeAddress")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OpenPrismNode.Core.Entities.WalletAddressEntity", "WalletAddressEntity")
                        .WithMany("Utxos")
                        .HasForeignKey("WalletAddress")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OpenPrismNode.Core.Entities.TransactionEntity", "Transaction")
                        .WithMany("Utxos")
                        .HasForeignKey("TransactionHash", "BlockHeight", "BlockHashPrefix")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StakeAddressEntity");

                    b.Navigation("Transaction");

                    b.Navigation("WalletAddressEntity");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.BlockEntity", b =>
                {
                    b.Navigation("NextBlocks");

                    b.Navigation("PrismTransactionEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.CreateDidEntity", b =>
                {
                    b.Navigation("DidDeactivation");

                    b.Navigation("DidUpdates");

                    b.Navigation("PrismPublicKeys");

                    b.Navigation("PrismServices");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.EpochEntity", b =>
                {
                    b.Navigation("BlockEntities");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.LedgerEntity", b =>
                {
                    b.Navigation("Epochs");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.StakeAddressEntity", b =>
                {
                    b.Navigation("Utxos");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.TransactionEntity", b =>
                {
                    b.Navigation("CreateDidEntities");

                    b.Navigation("DeactivateDidEntities");

                    b.Navigation("UpdateDidEntities");

                    b.Navigation("Utxos");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.UpdateDidEntity", b =>
                {
                    b.Navigation("PatchedContexts");

                    b.Navigation("PrismPublicKeysToAdd");

                    b.Navigation("PrismPublicKeysToRemove");

                    b.Navigation("PrismServices");
                });

            modelBuilder.Entity("OpenPrismNode.Core.Entities.WalletAddressEntity", b =>
                {
                    b.Navigation("Utxos");
                });
#pragma warning restore 612, 618
        }
    }
}
